// Code generated by go-bindata.
// sources:
// neb.js
// DO NOT EDIT!

package library

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nebJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x6f\xdb\x38\xf2\x7f\x6d\x7d\x8a\x29\xff\x40\x22\x21\x82\x9c\x74\xbb\x8b\x85\xf4\x17\x16\xdd\x6d\xef\x92\x43\x9b\x04\x69\x8a\x5b\x20\x08\x0a\xda\x1a\xdb\xea\xca\xa4\x8e\xa4\xe2\x06\x5e\x7f\xf7\x03\x1f\x24\x4b\xb6\x1c\x3b\x41\xef\xe1\xc5\xe5\x8d\x9d\xe1\x70\xe6\x37\xbf\x19\x0e\xc7\x14\xf8\x8f\x2a\x17\x98\xfa\x93\x8a\x8d\x55\xce\x19\xa0\xaf\x42\x16\x8a\x60\xd9\x48\xa4\xcf\xc3\x2a\x58\xe6\x13\xff\x15\xbb\xe3\xf7\xf6\x9b\x32\xdf\x1e\xa8\x00\x9a\xaa\xc7\x12\xf9\x04\x6a\x5b\x29\xa9\xb7\x92\xa3\x23\x27\x4c\xf4\x9e\xea\xe8\x88\x06\x02\x55\x25\x18\x50\x9f\x87\xaf\x4e\x03\x2d\xcf\x6b\x59\xee\x64\xda\xea\x24\x65\xb8\x80\xf7\x42\x70\xe1\x93\xdf\x28\x63\x5c\xc1\x24\x67\x19\xcc\x79\x56\x15\x08\xc7\xe4\x84\x9f\x90\x63\x12\x24\x6a\x26\xf8\x02\x26\xd1\x98\x67\x98\x92\x8f\x57\xef\x3e\x7f\x78\xff\xe5\xf2\xea\xf6\xcb\x5f\xae\x3e\x5f\xbe\x23\xe1\x64\xa5\xed\x15\xa9\xc6\x9e\x2e\xf1\x5b\xc9\x85\x92\xf1\x72\xb5\x4a\x74\x0c\x77\xa7\xf7\xd1\x98\x16\x85\x5f\x44\x6e\x29\xac\xd1\xfb\x68\x03\x64\xa9\x51\x3c\xbb\xbf\xc3\xfb\xc4\x41\x95\x3e\xfb\x85\xc5\x18\xac\xc2\x22\x5c\xef\xc4\xd0\x72\xb7\x72\x5a\xda\x65\xbd\x68\x50\xe4\x07\x71\x35\xe1\xc2\xd7\xda\x3c\x3d\x4d\xf8\xff\x8b\xa8\x40\x36\x55\xb3\x84\x9f\x9c\x04\xd2\x17\x9a\xf8\x06\xc6\x2a\xf0\x97\x67\xf1\x5d\x03\xd9\x99\x08\x2d\x4b\xa1\xf3\x1d\x2c\x3d\x8f\x54\x12\x41\x2a\x91\x8f\x15\x49\x3c\x4f\xdb\x7f\x9b\xcd\x73\x06\x29\x34\x99\xf6\x19\x8e\x02\x58\x7a\x03\x35\xcb\x65\xf4\x45\x1b\x43\xa9\xce\x29\xcb\x0a\x14\x90\x02\xc3\xd1\xa6\x34\xf1\x56\x89\xe7\x19\x4b\x51\x29\xb8\xe2\x3a\xc0\x88\xe1\xe2\xed\x78\xcc\x2b\xa6\x3a\xe6\x4b\x2a\x65\x39\x13\x54\xa2\xf1\xa2\x31\x94\x54\xd0\xb9\x84\x14\x96\x64\xbd\x4a\x62\x58\xff\xb3\x4a\xbc\x81\x0b\xd7\xc0\x72\xfe\x7d\x52\x72\xa9\x48\x08\x64\xf8\x70\x36\xa4\xd6\xdb\x90\xe1\x82\x84\xce\x68\xd0\x8f\xad\x62\x05\x1f\xff\xd1\x07\x8f\x66\x99\x40\x29\x43\x78\x1a\xa7\x53\x23\x31\xd4\x1b\xbc\x01\x7c\x17\xf4\x16\xda\xbe\x00\xf6\xc0\x3f\x08\xf2\xb3\x60\x1d\x02\x4a\xe6\x53\x76\x2b\x28\x93\xd4\xa2\x69\x03\x9b\x08\x3e\x0f\x41\xf1\x10\x1e\x68\x51\x61\x08\x8c\xb3\x31\x86\x20\x79\x25\xf4\x27\x15\x53\x19\xc2\x94\xca\x6b\x91\xeb\xff\xa7\x54\x7e\xc8\xe7\xb9\xea\x8b\x44\xdb\x22\x31\x18\x93\xde\x80\x28\x4e\x62\x6d\xd9\x1b\x10\x63\x9b\xc4\xce\x87\x37\x20\xc6\x0b\x89\x9d\x37\x6f\x40\xac\x3f\x12\xd7\x8e\xbd\x01\xd1\xae\x35\x2b\x1a\x81\x37\x20\x35\x06\x12\xaf\xe1\x58\xb1\x01\x64\xc5\xe6\xab\x37\x38\x88\x42\x4d\xcb\x5e\xea\x90\x65\x2d\xea\xfe\x9e\xab\xd9\x75\x53\x3f\xdf\x85\xc8\x7d\x15\xfd\xdf\x42\xaa\x16\xef\x38\x47\x07\xf2\xad\x76\xf1\xb8\x2f\x09\xce\x5a\x87\xee\x39\xaa\x19\xcf\x42\xa0\x65\xde\xec\xd6\xec\xb5\x51\x6c\xb4\xc3\x06\x55\xdf\x5e\xeb\xd9\xb6\xe6\xfa\x5a\x80\xd4\xb6\xe1\xc4\x5b\x85\xcb\xd5\x7d\xf8\xfa\xc5\xcd\xfc\xfa\xe2\xfb\xb4\xf2\xeb\x8b\x16\x2d\x53\x54\x97\x38\xfa\xa4\xa8\xea\x56\xe2\x16\x0f\x4d\x36\xa6\xd8\x24\x83\xe1\x68\x28\xf5\x56\x12\xf4\xd9\x66\x3c\xc3\x0b\x36\xe1\x2f\x30\xcc\x33\x1c\xe6\x6c\xc2\xfb\x0d\xbb\xbe\x25\x9f\x6f\xb8\xde\xd9\x6f\x77\xa4\x1b\xe1\xbb\x6a\x5e\x76\x0c\x9b\x1d\x7d\xa7\xca\x2c\x90\xd8\x7c\x1c\x54\xbc\xc6\xfe\x30\xab\xe6\xe5\x56\xb5\x6e\x26\xc5\xf5\xff\xed\xc4\x1c\x72\x09\xbc\xe4\x0e\xb0\x79\x7c\x12\xd6\x46\x1f\xfb\xdf\x15\xb0\xd5\x92\x9e\xe6\x4f\x8f\xa1\x3b\x48\x73\x6c\xe9\xa5\xef\xc5\xd5\x16\x35\xcd\x20\x1a\x5b\x3f\xff\x06\x6a\x74\xc4\xfb\x6b\xea\x86\x2e\x76\x95\x55\x46\x15\xed\x0b\x5b\xcb\x49\x0c\xfa\xe3\x20\x20\x82\x2e\x0e\x4e\xd3\x14\xd5\xaf\xfa\xa0\xfe\xfa\x78\x4e\xe5\xac\x03\x67\x46\xe5\xac\x0f\x8e\x96\x93\x18\xf4\xc7\x41\x70\xba\x2e\xf6\xc2\x69\xb1\x73\x83\x63\xcc\x4b\xf5\xaf\x42\xb5\xed\xe9\x69\x70\xff\xc9\x5b\xf5\xfa\xa2\xbe\x53\x7f\x78\xc9\x9d\x3a\x1c\xc2\x48\xf0\x85\x44\xe1\xe5\x13\xf0\xdd\xef\xb6\x45\xce\x32\xbe\x80\x57\x69\x0a\xa4\x62\x19\x4e\x72\x86\x19\x81\xa3\x23\xb7\x12\xfd\xfe\xf1\xc3\xb9\x52\xe5\x8d\x05\xac\x03\x03\xe8\xca\x20\xed\xd7\x4d\x60\x38\x84\xaf\x72\x96\x33\x05\xf9\x94\x71\x81\x31\x14\x39\x43\x8d\x44\x5f\x78\xde\x0a\xb0\x90\xd8\x6f\xd1\x85\xe5\x93\x6f\xf3\x62\xa6\x54\xe9\x08\x23\xc1\xa1\x4e\x56\x76\x8a\xf8\xfd\xfc\xe6\x75\xc7\xdc\x4c\xbc\x26\x41\x02\x76\xb5\xeb\xb3\x55\x61\x5c\xaa\x10\x54\x3e\x47\x5e\xa9\xf5\xd4\xa1\xc5\x90\x82\xf9\xf8\xf3\x4f\x20\x1a\x58\x3c\xd4\x3f\x27\x68\xa1\x85\xf1\xcf\xa7\x3f\x9f\x92\xc4\x69\xbb\xed\x90\xd6\x86\xf4\x9e\x53\x9b\xdd\x96\xe3\x4e\x73\x50\xe7\xbc\x07\xca\xf3\x11\xec\xf6\xf1\x85\xe1\xa2\x2f\xe4\x4e\x25\x52\xf9\xc8\xc6\xcd\x11\x73\xdc\x27\xde\x40\x17\xce\x7a\x6d\xb0\x3e\x0d\x0c\x17\x86\x6a\x3f\x48\xd6\xf2\x36\x03\x2d\x42\x12\x6f\xd0\x64\x7e\xcb\x46\x27\xb9\xc6\xda\xca\x82\x98\x43\x0a\xe4\xaf\xef\x6f\x89\x83\x61\xf1\x46\x8a\x7f\x2e\x4b\x14\xbf\x51\x89\x7e\x00\xa9\x2e\xe3\xeb\xab\x4f\xb7\xc4\x02\x34\x9b\xcc\xff\x6b\x43\x95\x28\x6a\x40\x86\xc6\x13\x1d\xb2\x69\x17\x16\x34\x2f\x91\xf9\xf3\x50\xeb\xd5\x44\xac\x9b\x49\x43\xc5\x6e\x82\x0f\x68\x11\x8f\x05\xa7\xd9\x26\xbd\x35\xa8\x56\x82\xba\xfb\x26\xb4\x90\xa8\xb1\x28\xf1\x68\xa2\xd3\x34\x38\x63\x26\xf2\xe6\xfc\xea\xd2\x68\x2f\x10\x47\x47\x13\xa3\xbe\x85\x6c\xaa\x5a\x99\xe8\xae\xfe\xed\xd3\xd5\x65\xa4\xbb\x07\x9b\xe6\x93\xc7\xda\x4f\x60\x37\xe9\x0c\x8e\xa9\x1a\xcf\xc0\x47\x21\xb8\xb0\xe6\xed\xc3\x95\x11\x18\xba\xeb\xf0\x64\x55\xd4\x47\x5a\x9b\x17\x28\x4b\xce\x24\xde\xe2\x37\xd5\x8a\xa6\xd1\x33\x9e\x4b\x2a\x24\xfa\x56\x66\xaa\xa0\xf1\xd7\xf1\xe5\xfc\x34\xd9\xd1\xea\x4f\x25\xc7\xe4\x73\x6f\xf9\xbb\x60\x43\xd0\xf7\xf9\x88\x8e\xff\x78\x76\xae\x94\xa8\x30\x68\x17\x15\x13\x48\xb3\x47\x33\x74\x8e\x67\x94\x4d\x7b\x7e\x7d\x00\x00\xe8\x94\xae\x79\xa2\xd9\xa3\x1b\x88\xd3\x14\xde\xe8\xa6\xbc\x79\xb2\x74\xdf\x3e\x6b\x76\x03\x1c\x42\xf8\x5a\xd3\xa4\x4a\x9f\xbc\xaa\x28\x12\xaf\x5e\x71\x09\x01\xf7\xf7\x74\x5e\xac\xce\x46\x76\xea\xad\xe6\xdc\xa2\x94\xd4\x84\xfb\xea\x95\x33\x75\x74\xd4\x7c\x8f\x2c\x84\x2d\x49\x54\x6f\xfb\x05\x7a\xc5\x31\x90\x0b\xf6\x40\x8b\x3c\x83\x3a\xba\x18\x08\x9c\xc0\x46\xd9\x36\x40\x6b\x48\x83\x26\xe6\xe6\x35\xd6\xd9\x6c\x45\xd3\x50\x51\xe7\xdf\x56\x79\x08\xdd\xb8\x57\x1e\x80\x2e\x35\x80\x75\x9a\xd7\x2d\xaf\x9b\xdd\x8e\xb5\xd6\x4b\xf0\x98\x33\x86\x56\xcf\x6d\x25\x81\x81\x6b\x0d\xdb\x5c\x00\x3c\xff\xac\x6f\x1d\xf5\xed\x9e\xbb\xf7\xa0\x9b\x00\xb7\x0e\xfa\x36\x31\x16\x70\xff\xd8\xd2\xbe\xab\xf5\xf8\x62\x6f\xe0\xf8\xa7\x70\xf3\x66\x8f\x7f\x5c\xdd\x87\x6f\x5e\xfa\x5a\xb0\x63\x7a\x88\x86\x2d\x17\xd1\x57\xf3\x3b\xb8\xf5\xba\xd0\xd2\xa3\x65\xee\xd6\xdb\x2f\xc9\x6d\x05\xf3\xc0\xd2\x32\x71\x89\xa3\x4e\x9a\xc5\x7a\x44\x1a\xb4\xce\x71\xdd\xaf\x7a\x5f\x2d\xd6\x57\x6b\x2b\x3d\x3b\x5f\x38\x16\xb0\x7d\x39\xba\xc1\x80\x96\xb9\x53\x79\x7b\x7d\xe1\x6b\x51\x50\xcf\x21\xd4\xc5\x62\x16\xf5\xf7\x7a\x59\xe7\xeb\x12\x47\xdd\x01\xe4\x66\xd3\x6d\x7f\x80\xfb\xe2\xe9\xad\x85\x4b\x1c\xd9\x1a\x68\xb1\x19\x9f\x85\x6b\xf6\xe3\xd7\xe1\x76\xca\xe2\x1f\x56\xf7\xe1\x8f\x87\x14\xc6\xf6\xc4\x3b\xe5\x80\xec\x01\x32\x8e\x92\x11\x05\x33\xfa\x80\x40\x59\x06\x0c\x31\xdb\x18\x36\xda\x53\xf1\xe6\x38\xda\x9d\x8e\xeb\x43\xe0\x1c\x47\x5b\xc3\xeb\x72\x95\xb4\x87\xdb\x27\x34\xf7\x0e\xb3\xf5\x2c\xeb\x26\xff\x9f\x0e\xa1\x61\x8b\xf7\x0d\x2f\xb5\x31\xc2\x70\x44\x0e\x31\xb8\xae\xf6\xfa\x3c\x1c\x47\xc3\x22\x1f\x0d\x19\x8e\x8e\x03\xcb\x74\xc6\x99\x02\xfe\x80\x42\xe4\x19\xc2\xb4\xe0\x23\x5a\xe8\x0b\x20\xa7\xa3\x02\x77\xfc\xe2\x38\x6e\x38\x3d\xd6\x57\x40\x47\x21\x32\x0e\xbb\x4a\x35\xf1\x6d\x0d\x57\x54\xbb\xaa\xcd\x95\x9b\x03\x4b\xe2\x37\xab\x7b\x1d\x7c\x78\x67\x82\xbf\x0f\xbc\xe1\xf0\xff\xdc\xdb\xc9\x47\x5a\x96\x39\x9b\x7e\xbe\xf9\x90\x32\x1c\x45\x5f\x65\x34\xa7\xa5\xf7\xcf\x00\x00\x00\xff\xff\x43\x98\xd8\xd0\x51\x1c\x00\x00")

func nebJsBytes() ([]byte, error) {
	return bindataRead(
		_nebJs,
		"neb.js",
	)
}

func nebJs() (*asset, error) {
	bytes, err := nebJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "neb.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"neb.js": nebJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"neb.js": &bintree{nebJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
