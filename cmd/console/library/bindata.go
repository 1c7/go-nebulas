// Code generated by go-bindata.
// sources:
// neb.js
// DO NOT EDIT!

package library

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nebJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x6f\xdb\x38\xf2\x7f\x6d\x7d\x8a\x09\xff\x40\x22\x21\x82\xdc\x74\xbb\x8b\xff\x49\x27\x2c\xba\xdb\xde\x25\x87\x36\x09\xd2\x14\xb7\x40\x10\x14\xb4\x35\xb6\xd5\x95\x49\x1d\x49\xc5\x0d\xbc\xfe\xee\x07\x3e\x48\x96\x6c\x39\x76\x82\xde\xc3\x8b\xcb\x1b\x3b\xc3\xe1\xcc\x6f\x7e\x33\x1c\x8e\x29\xf0\x1f\x55\x2e\x30\xf5\x27\x15\x1b\xab\x9c\x33\x40\x5f\x85\x2c\x14\xc1\xb2\x91\x48\x9f\x87\x55\xb0\xcc\x27\xfe\x11\xbb\xe3\xf7\xf6\x9b\x32\xdf\x1e\xa8\x00\x9a\xaa\xc7\x12\xf9\x04\x6a\x5b\x29\xa9\xb7\x92\xe3\x63\x27\x4c\xf4\x9e\xea\xf8\x98\x06\x02\x55\x25\x18\x50\x9f\x87\x47\xaf\x02\x2d\xcf\x6b\x59\xee\x64\xda\xea\x24\x65\xb8\x80\xf7\x42\x70\xe1\x93\x5f\x29\x63\x5c\xc1\x24\x67\x19\xcc\x79\x56\x15\x08\x27\xe4\x94\x9f\x92\x13\x12\x24\x6a\x26\xf8\x02\x26\xd1\x98\x67\x98\x92\x8f\x57\xef\x3e\x7f\x78\xff\xe5\xf2\xea\xf6\xcb\x5f\xae\x3e\x5f\xbe\x23\xe1\x64\xa5\xed\x15\xa9\xc6\x9e\x2e\xf1\x5b\xc9\x85\x92\xf1\x72\xb5\x4a\x74\x0c\x77\xaf\xee\xa3\x31\x2d\x0a\xbf\x88\xdc\x52\x58\xa3\xf7\xd1\x06\xc8\x52\xa3\x78\x76\x7f\x87\xf7\x89\x83\x2a\x7d\xf6\x33\x8b\x31\x58\x85\x45\xb8\xde\x89\xa1\xe5\x6e\xe5\xb4\xb4\xcb\x7a\xd1\xa0\xc8\x0f\xe2\x6a\xc2\x85\xaf\xb5\x79\xfa\x2a\xe1\x7f\x16\x51\x81\x6c\xaa\x66\x09\x3f\x3d\x0d\xa4\x2f\x34\xf1\x0d\x8c\x55\xe0\x2f\xcf\xe2\xbb\x06\xb2\x33\x11\x5a\x96\x42\xe7\x3b\x58\x7a\x1e\xa9\x24\x82\x54\x22\x1f\x2b\x92\x78\x9e\xb6\xff\x36\x9b\xe7\x0c\x52\x68\x32\xed\x33\x1c\x05\xb0\xf4\x06\x6a\x96\xcb\xe8\x8b\x36\x86\x52\x9d\x53\x96\x15\x28\x20\x05\x86\xa3\x4d\x69\xe2\xad\x12\xcf\x33\x96\xa2\x52\x70\xc5\x75\x80\x11\xc3\xc5\xdb\xf1\x98\x57\x4c\x75\xcc\x97\x54\xca\x72\x26\xa8\x44\xe3\x45\x63\x28\xa9\xa0\x73\x09\x29\x2c\xc9\x7a\x95\xc4\xb0\xfe\x67\x95\x78\x03\x17\xae\x81\xe5\xfc\xfb\xa4\xe4\x52\x91\x10\xc8\xf0\xe1\x6c\x48\xad\xb7\x21\xc3\x05\x09\x9d\xd1\xa0\x1f\x5b\xc5\x0a\x3e\xfe\xbd\x0f\x1e\xcd\x32\x81\x52\x86\xf0\x34\x4e\xa7\x46\x62\xa8\x37\x78\x03\xf8\x2e\xe8\x2d\xb4\x7d\x01\xec\x81\x7f\x10\xe4\x67\xc1\x3a\x04\x94\xcc\xa7\xec\x56\x50\x26\xa9\x45\xd3\x06\x36\x11\x7c\x1e\x82\xe2\x21\x3c\xd0\xa2\xc2\x10\x18\x67\x63\x0c\x41\xf2\x4a\xe8\x4f\x2a\xa6\x32\x84\x29\x95\xd7\x22\xd7\xff\x4f\xa9\xfc\x90\xcf\x73\xd5\x17\x89\xb6\x45\x62\x30\x26\xbd\x01\x51\x9c\xc4\xda\xb2\x37\x20\xc6\x36\x89\x9d\x0f\x6f\x40\x8c\x17\x12\x3b\x6f\xde\x80\x58\x7f\x24\xae\x1d\x7b\x03\xa2\x5d\x6b\x56\x34\x02\x6f\x40\x6a\x0c\x24\x5e\xc3\xb1\x62\x03\xc8\x8a\xcd\x57\x6f\x70\x10\x85\x9a\x96\xbd\xd4\x21\xcb\x5a\xd4\xfd\x3d\x57\xb3\xeb\xa6\x7e\xbe\x0b\x91\xfb\x2a\xfa\xbf\x85\x54\x2d\xde\x71\x8e\x0e\xe4\x5b\xed\xe2\x71\x5f\x12\x9c\xb5\x0e\xdd\x73\x54\x33\x9e\x85\x40\xcb\xbc\xd9\xad\xd9\x6b\xa3\xd8\x68\x87\x0d\xaa\xbe\xbd\xd6\xb3\x6d\xcd\xf5\xb5\x00\xa9\x6d\xc3\x89\xb7\x0a\x97\xab\xfb\xf0\xf5\x8b\x9b\xf9\xf5\xc5\xf7\x69\xe5\xd7\x17\x2d\x5a\xa6\xa8\x2e\x71\xf4\x49\x51\xd5\xad\xc4\x2d\x1e\x9a\x6c\x4c\xb1\x49\x06\xc3\xd1\x50\xea\xad\x24\xe8\xb3\xcd\x78\x86\x17\x6c\xc2\x5f\x60\x98\x67\x38\xcc\xd9\x84\xf7\x1b\x76\x7d\x4b\x3e\xdf\x70\xbd\xb3\xdf\xee\x48\x37\xc2\x77\xd5\xbc\xec\x18\x36\x3b\xfa\x4e\x95\x59\x20\xb1\xf9\x38\xa8\x78\x8d\xfd\x61\x56\xcd\xcb\xad\x6a\xdd\x4c\x8a\xeb\xff\xdb\x89\x39\xe4\x12\x78\xc9\x1d\x60\xf3\xf8\x24\xac\x8d\x3e\xf6\xbf\x2b\x60\xab\x25\x3d\xcd\x9f\x1e\x43\x77\x90\xe6\xd8\xd2\x4b\xdf\x8b\xab\x2d\x6a\x9a\x41\x34\xb6\x7e\xfe\x0d\xd4\xe8\x88\xf7\xd7\xd4\x0d\x5d\xec\x2a\xab\x8c\x2a\xda\x17\xb6\x96\x93\x18\xf4\xc7\x41\x40\x04\x5d\x1c\x9c\xa6\x29\xaa\x5f\xf4\x41\xfd\xe5\xf1\x9c\xca\x59\x07\xce\x8c\xca\x59\x1f\x1c\x2d\x27\x31\xe8\x8f\x83\xe0\x74\x5d\xec\x85\xd3\x62\xe7\x06\xc7\x98\x97\xea\x5f\x85\x6a\xdb\xd3\xd3\xe0\xfe\x93\xb7\xea\xf5\x45\x7d\xa7\xfe\xf0\x92\x3b\x75\x38\x84\x91\xe0\x0b\x89\xc2\xcb\x27\xe0\xbb\xdf\x6d\x8b\x9c\x65\x7c\x01\x47\x69\x0a\xa4\x62\x19\x4e\x72\x86\x19\x81\xe3\x63\xb7\x12\xfd\xf6\xf1\xc3\xb9\x52\xe5\x8d\x05\xac\x03\x03\xe8\xca\x20\xed\xd7\x4d\x60\x38\x84\xaf\x72\x96\x33\x05\xf9\x94\x71\x81\x31\x14\x39\x43\x8d\x44\x5f\x78\xde\x0a\xb0\x90\xd8\x6f\xd1\x85\xe5\x93\x6f\xf3\x62\xa6\x54\xe9\x08\x23\xc1\xa1\x4e\x56\x76\x8a\xf8\xed\xfc\xe6\x75\xc7\xdc\x4c\xbc\x26\x41\x02\x76\xb5\xeb\xb3\x55\x61\x5c\xaa\x10\x54\x3e\x47\x5e\xa9\xf5\xd4\xa1\xc5\x90\x82\xf9\xf8\xe3\x0f\x20\x1a\x58\x3c\xd4\x3f\x27\x68\xa1\x85\xf1\xff\x9f\xfd\xe9\x8c\x24\x4e\xdb\x6d\x87\xb4\x36\xa4\xf7\xbc\xb2\xd9\x6d\x39\xee\x34\x07\x75\xce\x7b\xa0\x3c\x1f\xc1\x6e\x1f\x5f\x18\x2e\xfa\x42\xee\x54\x22\x95\x8f\x6c\xdc\x1c\x31\xc7\x7d\xe2\x0d\x74\xe1\xac\xd7\x06\xeb\xd3\xc0\x70\x61\xa8\xf6\x83\x64\x2d\x6f\x33\xd0\x22\x24\xf1\x06\x4d\xe6\xb7\x6c\x74\x92\x6b\xac\xad\x2c\x88\x39\xa4\x40\xfe\xfa\xfe\x96\x38\x18\x16\x6f\xa4\xf8\xe7\xb2\x44\xf1\x2b\x95\xe8\x07\x90\xea\x32\xbe\xbe\xfa\x74\x4b\x2c\x40\xb3\xc9\xfc\xbf\x36\x54\x89\xa2\x06\x64\x68\x3c\xd5\x21\x9b\x76\x61\x41\xf3\x12\x99\x3f\x0f\xb5\x5e\x4d\xc4\xba\x99\x34\x54\xec\x26\xf8\x80\x16\xf1\x58\x70\x9a\x6d\xd2\x5b\x83\x6a\x25\xa8\xbb\x6f\x42\x0b\x89\x1a\x8b\x12\x8f\x26\x3a\x4d\x83\x33\x66\x22\x6f\xce\xaf\x2e\x8d\xf6\x02\x71\x74\x34\x31\xea\x5b\xc8\xa6\xaa\x95\x89\xee\xea\xdf\x3e\x5d\x5d\x46\xba\x7b\xb0\x69\x3e\x79\xac\xfd\x04\x76\x93\xce\xe0\x98\xaa\xf1\x0c\x7c\x14\x82\x0b\x6b\xde\x3e\x5c\x19\x81\xa1\xbb\x0e\x4f\x56\x45\x7d\xa4\xb5\x79\x81\xb2\xe4\x4c\xe2\x2d\x7e\x53\xad\x68\x1a\x3d\xe3\xb9\xa4\x42\xa2\x6f\x65\xa6\x0a\x1a\x7f\x1d\x5f\xce\x4f\x93\x1d\xad\xfe\x54\x72\x4c\x3e\xf7\x96\xbf\x0b\x36\x04\x7d\x9f\x8f\xe8\xf8\xf7\x67\xe7\x4a\x89\x0a\x83\x76\x51\x31\x81\x34\x7b\x34\x43\xe7\x78\x46\xd9\xb4\xe7\xd7\x07\x00\x80\x4e\xe9\x9a\x27\x9a\x3d\xba\x81\x38\x4d\xe1\x8d\x6e\xca\x9b\x27\x4b\xf7\xed\xb3\x66\x37\xc0\x21\x84\xaf\x35\x4d\xaa\xf4\xc9\xab\x8a\x22\xf1\xea\x15\x97\x10\x70\x7f\x4f\xe7\xc5\xea\x6c\x64\xa7\xde\x6a\xce\x2d\x4a\x49\x4d\xb8\x47\x47\xce\xd4\xf1\x71\xf3\x3d\xb2\x10\xb6\x24\x51\xbd\xed\x67\xe8\x15\xc7\x40\x2e\xd8\x03\x2d\xf2\x0c\xea\xe8\x62\x20\x70\x0a\x1b\x65\xdb\x00\xad\x21\x0d\x9a\x98\x9b\xd7\x58\x67\xb3\x15\x4d\x43\x45\x9d\x7f\x5b\xe5\x21\x74\xe3\x5e\x79\x00\xba\xd4\x00\xd6\x69\x5e\xb7\xbc\x6e\x76\x3b\xd6\x5a\x2f\xc1\x63\xce\x18\x5a\x3d\xb7\x95\x04\x06\xae\x35\x6c\x73\x01\xf0\xfc\xb3\xbe\x75\xd4\xb7\x7b\xee\xde\x83\x6e\x02\xdc\x3a\xe8\xdb\xc4\x58\xc0\xfd\x63\x4b\xfb\xae\xd6\xe3\x8b\xbd\x81\xe3\x9f\xc2\xcd\x9b\x3d\xfe\x71\x75\x1f\xbe\x79\xe9\x6b\xc1\x8e\xe9\x21\x1a\xb6\x5c\x44\x5f\xcd\xef\xe0\xd6\xeb\x42\x4b\x8f\x96\xb9\x5b\x6f\xbf\x24\xb7\x15\xcc\x03\x4b\xcb\xc4\x25\x8e\x3a\x69\x16\xeb\x11\x69\xd0\x3a\xc7\x75\xbf\xea\x7d\xb5\x58\x5f\xad\xad\xf4\xec\x7c\xe1\x58\xc0\xf6\xe5\xe8\x06\x03\x5a\xe6\x4e\xe5\xed\xf5\x85\xaf\x45\x41\x3d\x87\x50\x17\x8b\x59\xd4\xdf\xeb\x65\x9d\xaf\x4b\x1c\x75\x07\x90\x9b\x4d\xb7\xfd\x01\xee\x8b\xa7\xb7\x16\x2e\x71\x64\x6b\xa0\xc5\x66\x7c\x16\xae\xd9\x8f\x5f\x87\xdb\x29\x8b\x7f\x58\xdd\x87\x3f\x1e\x52\x18\xdb\x13\xef\x94\x03\xb2\x07\xc8\x38\x4a\x46\x14\xcc\xe8\x03\x02\x65\x19\x30\xc4\x6c\x63\xd8\x68\x4f\xc5\x9b\xe3\x68\x77\x3a\xae\x0f\x81\x73\x1c\x6d\x0d\xaf\xcb\x55\xd2\x1e\x6e\x9f\xd0\xdc\x3b\xcc\xd6\xb3\xac\x9b\xfc\x7f\x3a\x84\x86\x2d\xde\x37\xbc\xd4\xc6\x08\xc3\x11\x39\xc4\xe0\xba\xda\xeb\xf3\x70\x12\x0d\x8b\x7c\x34\x64\x38\x3a\x09\x2c\xd3\x19\x67\x0a\xf8\x03\x0a\x91\x67\x08\xd3\x82\x8f\x68\xa1\x2f\x80\x9c\x8e\x0a\xdc\xf1\x8b\xe3\xa4\xe1\xf4\x44\x5f\x01\x1d\x85\xc8\x38\xec\x2a\xd5\xc4\xb7\x35\x5c\x51\xed\xaa\x36\x57\x6e\x0e\x2c\x89\xdf\xac\xee\x75\xf0\xe1\x9d\x09\xfe\x3e\xf0\x86\xc3\xff\x73\x6f\x27\x1f\x69\x59\xe6\x6c\xfa\xf9\xe6\x43\xca\x70\x14\x7d\x95\xd1\x9c\x96\xde\x3f\x03\x00\x00\xff\xff\x8f\x26\x57\x82\x51\x1c\x00\x00")

func nebJsBytes() ([]byte, error) {
	return bindataRead(
		_nebJs,
		"neb.js",
	)
}

func nebJs() (*asset, error) {
	bytes, err := nebJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "neb.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"neb.js": nebJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"neb.js": &bintree{nebJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
