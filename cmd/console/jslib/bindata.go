// Code generated by go-bindata.
// sources:
// neb.js
// DO NOT EDIT!

package jslib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nebJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x6d\x6f\xdb\x38\x12\xfe\x6c\xfd\x8a\x09\x0f\x70\x24\x44\x90\x93\x6e\x77\xb1\x90\x4e\x58\x14\xdb\xde\x35\x87\x36\x09\xda\x14\x58\x20\x30\x0a\xca\x1a\xdb\xea\xca\xa4\x8e\xa4\x92\x06\x5e\xfd\xf7\x03\x5f\xf4\x66\x3b\xa9\x5b\x2c\x70\xf9\x62\x85\x1c\x3e\xf3\xcc\x33\x43\x72\x28\xf0\xbf\x75\x21\x30\xf5\x97\x35\x5b\xa8\x82\x33\x40\x5f\x85\x2c\x14\xc1\xb6\x1b\x91\x3e\x0f\xeb\x60\x5b\x2c\xfd\x13\x76\xc7\xe7\xf6\x4b\x99\xaf\x7b\x2a\x80\xa6\xea\xb1\x42\xbe\x84\x16\x2b\x25\xed\x52\x32\x9d\xba\xc1\x44\xaf\xa9\xa7\x53\x1a\x08\x54\xb5\x60\x40\x7d\x1e\x9e\x9c\x07\x7a\xbc\x68\xc7\x0a\x37\xa6\x51\x97\x29\xc3\x07\x78\x23\x04\x17\x3e\xf9\x9d\x32\xc6\x15\x2c\x0b\x96\xc3\x86\xe7\x75\x89\x70\x4a\xce\xf8\x19\x39\x25\x41\xa2\xd6\x82\x3f\xc0\x32\x5a\xf0\x1c\x53\xf2\xfe\xfa\xf5\xa7\x77\x6f\x3e\x5f\x5d\xdf\x7e\xfe\xd7\xf5\xa7\xab\xd7\x24\x5c\x36\x1a\xaf\x4c\x35\xf7\x74\x8b\x5f\x2b\x2e\x94\x8c\xb7\x4d\x93\xe8\x18\xee\xce\xe7\xd1\x82\x96\xa5\x5f\x46\x6e\x2a\x6c\xd9\xfb\x68\x03\x64\xa9\x31\xbc\x98\xdf\xe1\x3c\x71\x54\xa5\xcf\x7e\x63\x31\x06\x4d\x58\x86\xfd\x4a\x0c\xad\x76\x8d\xb3\xd2\x2e\xdb\x49\xc3\xa2\x38\x4a\xab\x25\x17\xbe\xb6\xe6\xe9\x79\xc2\xff\x29\xa2\x12\xd9\x4a\xad\x13\x7e\x76\x16\x48\x5f\x68\xe1\x3b\x1a\x4d\xe0\x6f\x2f\xe2\xbb\x8e\xb2\x83\x08\xad\x4a\xa1\xf3\x1d\x6c\x3d\x8f\xd4\x12\x41\x2a\x51\x2c\x14\x49\x3c\x4f\xe3\xbf\xca\x37\x05\x83\x14\xba\x4c\xfb\x0c\xb3\x00\xb6\xde\x44\xad\x0b\x19\x7d\xd6\x60\x28\xd5\x5b\xca\xf2\x12\x05\xa4\xc0\x30\x8b\xc6\x83\x89\xd7\x24\x9e\x67\x80\xa2\x4a\x70\xc5\x75\x7c\xdd\xca\x11\xf6\x06\xd5\x9a\xe7\x21\xd0\xaa\x08\xa1\xa2\x82\x6e\xa4\xf1\xe5\x42\x39\xe4\xb2\x75\x76\x70\xad\x75\x6d\x03\x6d\x45\x86\xd4\x06\x95\x78\x4d\xb8\x6d\xe6\xe1\x8b\x1f\x96\xe6\xe6\xf2\x6f\x11\xe6\xe6\x72\x20\xcb\x0a\xd5\x15\x66\x1f\x15\x55\x38\x02\x7f\x52\x06\x9f\xac\x50\x91\x10\xc8\xec\xfe\x62\xc6\x30\x9b\x49\xbd\x96\x04\x87\xc0\xe9\x62\xc1\x6b\x66\x24\xf8\x5e\xe4\x76\xe9\x61\xe0\xac\xe4\x8b\x3f\x5f\xd7\x9b\x6a\x84\x6c\x56\x18\x78\x2d\x97\x4d\x09\xa4\xb0\x25\x66\x82\xc4\xe6\xa7\x49\x9e\xf2\x5e\x71\xd9\xb9\x37\x0e\x66\x79\xbd\xa9\xc8\x4e\x72\xf7\xe4\x7b\x65\x99\xee\x4b\x48\xf3\x5c\xa0\x94\x87\x08\xb9\x29\x12\xbb\x8f\xe3\x48\x39\x4d\x9c\xe2\xcf\xf2\x92\xc8\xf2\x5b\x41\x99\xa4\x96\xcc\x90\xd7\x52\xf0\x4d\x08\x8a\x87\x70\x4f\xcb\x1a\x43\x60\x9c\x2d\x30\x04\xc9\x6b\xa1\x7f\xb5\x65\x08\x54\xac\x0e\x52\xd7\xab\x49\x0c\x06\xc4\x9b\x10\xc5\x49\xac\xb1\xbc\x09\x31\x68\x24\x76\xa8\xde\x84\x18\x5c\x12\x3b\x7c\x6f\x42\xac\x07\x12\xb7\xae\xbc\x49\x7f\xd4\xc4\xd6\xaf\x37\x21\xda\x33\x89\x0d\x01\x6f\x72\x9c\x32\xaa\x0f\xf5\x79\x5d\xf4\xb1\xfa\x84\x18\x4e\x85\x1f\x8d\x7e\x2f\xd8\xbf\x27\x32\x4d\xf8\xf9\x90\xfe\xaf\x07\xdb\xcd\x65\x7b\xac\xfd\xf4\x23\xc7\xda\x6c\x06\x99\xe0\x0f\x12\x85\x57\x2c\xc1\x77\x17\xd1\x43\xc1\x72\xfe\x00\x27\x69\x0a\xa4\x66\x39\x2e\x0b\x86\x39\x81\xe9\xd4\xcd\x44\x7f\xbc\x7f\xf7\x56\xa9\xea\x83\x25\xac\x03\x03\x18\x8f\x41\x7a\xd8\x36\x81\xd9\x0c\xbe\xc8\x75\xc1\x14\x14\x2b\xc6\x05\xc6\x50\x16\x0c\x35\x13\xc6\x73\xf4\x1a\xc0\x52\xe2\x61\x44\x17\x96\x4f\xbe\x6e\xca\xb5\x52\x95\x13\x8c\x04\xc7\x3a\x69\xec\x41\xfe\xc7\xdb\x0f\x2f\x46\x70\x6b\xf1\x82\x04\x09\xd8\xd9\xb1\xcf\x3e\xa5\x6b\x2e\x55\x08\xaa\xd8\x20\xaf\x55\x7f\xf0\xeb\x61\x48\xc1\xfc\xfc\xf5\x17\x10\x4d\x2c\x9e\xcd\x4a\xbe\xa0\xa5\x1e\x8c\x7f\x3d\xff\xf5\x9c\x24\xce\xda\x2d\x87\xb4\x05\xd2\x6b\xce\x6d\x76\x07\x8e\x87\xe5\xc5\xf0\xe1\x10\x9d\x51\x95\x50\xf9\xc8\x16\xdd\x7e\x71\xba\x24\xde\x44\x27\xb5\x9f\x9b\xf4\x95\xaa\x1b\x29\x2d\x83\x1f\x24\xfd\xf8\x90\xdd\x80\x6c\xe2\x4d\xba\xac\xec\x61\x8c\x84\x37\x68\x8d\x25\xb1\x81\x14\xc8\xbf\xdf\xdc\x12\x47\xc3\xf2\x8d\x14\xff\x54\x55\x28\x7e\xa7\x12\xfd\x00\x52\x5d\x62\x37\xd7\x1f\x6f\x89\x25\x68\x16\x99\xff\x7b\xa0\x5a\x94\x2d\x21\x23\xf2\x99\x0e\xd9\xec\x5d\x4b\x9a\x57\xc8\xfc\x4d\xa8\xed\x5a\x21\xfa\x9d\xdd\x49\xf1\xb4\xc0\x47\x6c\xdf\xc7\x92\xd3\x7c\x57\xde\x96\xd4\x20\x41\xe3\x75\x4b\x5a\x4a\xd4\x5c\x94\x78\x34\xd1\x69\x19\x1c\x98\x89\xbc\xdb\x5b\xba\x08\x86\x13\xc4\xc9\xd1\xc5\xa8\xaf\x13\x9b\xaa\x41\x26\xc6\xb3\xff\xf9\x78\x7d\x15\xe9\x9d\xcd\x56\xc5\xf2\xb1\xf5\x13\xd8\x45\x3a\x83\x0b\xaa\x16\x6b\xf0\x51\xb7\xcf\x16\xde\x76\xc9\x66\xc0\xc8\xdd\x86\x27\xeb\xb2\xdd\x6e\x1a\x5e\xa0\xac\x38\x93\x78\x8b\x5f\xd5\x20\x9a\xce\xce\x78\xae\xa8\x90\xe8\xdb\x31\x53\x05\x9d\xbf\x91\x2f\xe7\xa7\xcb\x8e\x36\x7f\x2e\x39\x26\x9f\xdf\x2c\x7f\x17\x6c\x08\xfa\xb4\xce\xe8\xe2\xcf\xef\xce\x95\x12\x35\x06\xc3\xa2\x62\x02\x69\xfe\x68\x6e\xfa\xc5\x9a\xb2\xd5\x81\xee\x0c\x00\x40\xa7\xb4\xd7\x89\xe6\x8f\xae\x0d\x49\x53\x78\xa9\x0f\xcc\xdd\x9d\xa5\xcf\xd4\x8b\x6e\x35\xc0\x31\x82\xf7\x96\x26\x55\x7a\xe7\xd5\x65\x99\x78\xed\x8c\x4b\x08\xb8\xbf\xe7\xf3\x62\x6d\x76\xb2\xd3\x2e\x35\xfb\x16\xa5\xa4\x26\xdc\x93\x13\x07\x35\x9d\x76\xdf\x91\xa5\xb0\x37\x12\xb5\xcb\x7e\x83\x83\xc3\x31\x90\x4b\x76\x4f\xcb\x22\x87\x36\xba\x18\x08\x9c\xc1\x4e\xd9\x76\x44\x5b\x4a\x93\x2e\xe6\xee\xe9\xe7\x30\x07\xd1\x74\x52\xb4\xf9\xb7\x55\x1e\xc2\x38\xee\xc6\x03\xd0\xa5\x06\xd0\xa7\xb9\x3f\xf2\xc6\xd9\x1d\xa1\x0d\x9e\x9d\x0b\xce\x18\x5a\x3b\xb7\x94\x04\x86\xae\x05\xb6\xb9\x00\xf8\xfe\xbd\xbe\xb7\xd5\xf7\xcf\xdc\x6f\x6e\x74\x13\xe0\xde\x46\xdf\x17\xc6\x12\x3e\xdc\x52\x0c\xef\x51\xdd\x5a\xd8\xdb\x31\xfe\x25\xdc\xbd\x75\xe3\x9f\x9b\x79\xf8\xf2\x47\x1f\x53\x4f\xdc\xec\xd1\x6c\xe0\x22\xfa\x62\x9e\x1f\x83\xc7\xd7\xc0\x8e\x56\x85\x9b\x1f\x3e\x5b\x87\x06\xe6\x01\x3a\x80\xb8\xc2\x6c\x94\x66\xd1\xb7\x2f\x93\xc1\x3e\x6e\xcf\xab\x42\x46\x7b\x6f\xba\xfe\x66\x1d\x64\xe7\xb0\xa9\xae\x99\xfd\xab\xd1\xb5\x01\xb4\x2a\x9c\xc9\xab\x9b\x4b\x5f\x0f\x05\x6d\x87\x40\x5d\x24\x66\x52\x7f\xb7\xd3\x3a\x5b\x57\x98\x8d\x1e\x19\xea\xc3\xae\xdb\xc3\xe1\x7d\x23\x9a\x83\x85\x70\x85\x99\x2d\x80\x81\x94\xf1\x45\xd8\x4b\x1f\xbf\x08\xf7\xf3\x15\xff\xd4\xcc\xc3\x9f\x8f\xa9\x8a\xfd\x56\x74\xc5\x01\xd9\x3d\xe4\x1c\x25\x23\x0a\xd6\xf4\x1e\x81\xb2\x1c\x18\x62\xbe\xd3\x69\x0c\xdb\xd5\xdd\x3e\x71\xdc\xb6\xb6\x3b\xc0\x39\x8e\xf6\xba\xca\x6d\x93\x0c\xbb\xce\x67\x2c\xbf\xd9\x65\xb6\x4d\xa6\x6b\xc9\x7f\x39\x46\x86\x3d\xdd\x77\xbc\xb4\x60\x84\x61\x46\x8e\x01\xec\x4b\xbd\xdd\x0c\xa7\xd1\xac\x2c\xb2\x19\xc3\xec\x34\xb0\x4a\xe7\x9c\x29\xe0\xf7\x28\x44\x91\x23\xac\x4a\x9e\xd1\x52\x9f\xfe\x05\xcd\x4a\x7c\xe2\x29\x70\xda\x69\x7a\xaa\xcf\xff\x91\x41\x64\x1c\x8e\x8d\x5a\xe1\x87\x16\xae\xa8\x9e\xaa\x36\x57\x6e\x8e\x2c\x89\x5f\x36\x73\x1d\x7c\x78\x67\x82\x9f\x07\xde\x6c\xf6\x0f\xf7\x76\x7d\x4f\xab\xaa\x60\xab\x4f\x1f\xde\xa5\x0c\xb3\xe8\x8b\x8c\x36\xb4\xf2\xfe\x17\x00\x00\xff\xff\xb9\xc8\xfe\x5a\xbb\x14\x00\x00")

func nebJsBytes() ([]byte, error) {
	return bindataRead(
		_nebJs,
		"neb.js",
	)
}

func nebJs() (*asset, error) {
	bytes, err := nebJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "neb.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"neb.js": nebJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"neb.js": &bintree{nebJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
