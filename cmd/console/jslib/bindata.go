// Code generated by go-bindata.
// sources:
// neb.js
// DO NOT EDIT!

package jslib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nebJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x6d\x6f\xdb\x38\x12\xfe\x6c\xfd\x8a\x09\x0f\x48\x24\x44\x90\x93\x6e\x77\xb1\x90\x4e\x58\x74\xb7\xbd\x6b\x0e\x6d\x12\xa4\x29\x6e\x81\x20\x28\x68\x6b\x6c\xab\x2b\x93\x3a\x92\x8a\x1b\x78\xf5\xdf\x0f\x14\xa9\x37\x5b\x8e\x9d\xe0\x8a\x03\x36\x5f\xe4\x90\xf3\xf2\xcc\x33\xc3\xe1\x48\x02\xff\x53\xa4\x02\x63\x77\x56\xb0\xa9\x4a\x39\x03\x74\x95\xcf\x7c\xe1\xad\x9b\x15\xe9\x72\xbf\xf0\xd6\xe9\xcc\x3d\x62\x77\xfc\xde\xfc\x52\xd5\xaf\x07\x2a\x80\xc6\xea\x31\x47\x3e\x83\xda\x56\x4c\x6a\x55\x72\x7c\x6c\x17\x23\xad\x53\x1c\x1f\x53\x4f\xa0\x2a\x04\x03\xea\x72\xff\xe8\xcc\xd3\xeb\x69\xbd\x96\xda\x35\x6d\x75\x16\x33\x5c\xc1\x3b\x21\xb8\x70\xc9\x6f\x94\x31\xae\x60\x96\xb2\x04\x96\x3c\x29\x32\x84\x13\x72\xca\x4f\xc9\x09\xf1\x22\xb5\x10\x7c\x05\xb3\x60\xca\x13\x8c\xc9\xc7\xab\xb7\x9f\x3f\xbc\xfb\x72\x79\x75\xfb\xe5\x1f\x57\x9f\x2f\xdf\x12\x7f\x56\x6a\x7b\x59\xac\xb1\xc7\x6b\xfc\x96\x73\xa1\x64\xb8\x2e\xcb\x48\xc7\x70\x77\x76\x1f\x4c\x69\x96\xb9\x59\x60\xb7\xfc\x1a\xbd\x8b\x26\x40\x16\x57\x82\xe7\xf7\x77\x78\x1f\x59\xa8\xd2\x65\xbf\xb0\x10\xbd\xd2\xcf\xfc\x56\x13\x7d\xc3\x5d\x69\xa5\xb4\xcb\x7a\xb3\x42\x91\x1e\xc4\xd5\x8c\x0b\x57\x4b\xf3\xf8\x2c\xe2\x7f\x17\x41\x86\x6c\xae\x16\x11\x3f\x3d\xf5\xa4\x2b\x34\xf1\x0d\x8c\xd2\x73\xd7\xe7\xe1\x5d\x03\xd9\x9a\xf0\x0d\x4b\xbe\xf5\xed\xad\x1d\x87\x14\x12\x41\x2a\x91\x4e\x15\x89\x1c\x47\xdb\x7f\x93\x2c\x53\x06\x31\x34\x99\x76\x19\x4e\x3c\x58\x3b\x23\xb5\x48\x65\xf0\x45\x1b\x43\xa9\xde\x53\x96\x64\x28\x20\x06\x86\x93\xa0\xbf\x18\x39\x65\xe4\x38\x95\xa1\x20\x17\x5c\x71\x1d\x5f\xc0\x70\xf5\x66\x3a\xe5\x05\x53\x3d\xeb\x39\x95\x32\x5f\x08\x2a\xb1\x72\xa2\x21\xe4\x54\xd0\xa5\x84\x18\xd6\xa4\xdd\x25\x21\xb4\xff\x94\x91\x33\xb2\xd1\xf6\x50\xb9\x64\x8e\x8a\xf8\x40\xc6\x0f\xe7\xe3\xd6\x21\xf1\xad\x4d\x6f\x18\x5a\xc1\x32\x3e\xfd\x63\x08\x1d\x4d\x12\x81\x52\xfa\xf0\x34\x4c\x2b\x46\x42\xa8\x15\x9c\x11\x3c\x1f\x7c\xce\x65\x83\xde\x60\xda\x87\x7c\x0f\xee\x83\xb0\x1e\x86\xe7\x10\x34\x32\x9d\xb3\x5b\x41\x99\xa4\x06\x46\x17\xd1\x4c\xf0\xa5\x0f\x8a\xfb\xf0\x40\xb3\x02\x7d\x60\x9c\x4d\xd1\x07\xc9\x0b\xa1\x9f\x54\xcc\x07\xe1\x6a\x3d\x12\x42\xa5\xee\x8c\x88\xe2\x24\xd4\x56\x9c\x11\xa9\xec\x90\xd0\xda\x73\x46\xa4\xb2\x48\x42\x6b\xd9\x19\x11\x63\x9b\x84\xb5\x13\x67\x44\xb4\x1b\x1d\xba\x98\x4b\x67\x74\x58\xe4\x3a\xaa\xbd\x91\x23\x4b\x3a\x91\xff\x3b\x55\x8b\xeb\x26\xe1\xcf\xe6\x61\x5f\xb9\x7d\x3f\x4e\xf4\xbf\x3b\xca\xf6\x50\xba\xd4\x2e\x1a\xf6\x71\x58\x9b\xeb\xd1\xb5\x44\xb5\xe0\x89\x0f\x34\x4f\x1b\x75\xcd\xc8\x10\x0e\xdb\x7e\xea\x6e\x34\xa8\x6b\x5c\x9b\x4e\x58\x77\x61\x88\x4d\xd7\x8b\x9c\xd2\x5f\x97\xf7\xfe\xab\x17\xf7\xce\xeb\x8b\xff\x49\xe7\xbc\xbe\xe8\xd0\x32\x47\x75\x89\x93\x4f\x8a\xaa\x7e\x21\xed\xa4\x61\xa3\x09\x4e\xc6\x52\xeb\x12\x6f\xc8\x38\xe3\x09\x5e\xb0\x19\x7f\x89\x65\x9e\xe0\x38\x65\x33\x3e\x6c\x99\x9a\xae\x24\x5f\x60\xb9\x56\x1d\x36\x3c\xd1\x9d\xe8\x6d\xb1\xcc\x7b\x96\x2b\x8d\xa1\xb3\x62\x2e\x80\xb0\x7a\x1c\x56\xc0\x95\x83\x71\x52\x2c\xf3\xad\x8a\xdd\x4c\x8c\x6d\xbd\xdb\xc9\x39\xa4\xff\x3e\xab\xfd\x5a\x4e\x6c\x2e\x9f\xc4\xb5\xd1\x8b\xfe\x22\x5d\xb8\xd3\x56\x9e\x0e\x5f\x0f\x6e\x3b\x62\xb6\xc1\xea\xad\x97\x84\xba\x15\x59\x33\xa6\x85\xc6\xe6\xcb\x22\xd3\x80\xf7\x67\xf4\x86\xae\x76\x25\x35\xa1\x8a\x0e\x45\xa2\xd7\x49\x08\xfa\x71\x18\x12\x41\x57\x07\xd3\x3c\x47\xf5\xab\x3e\x28\xbf\x3e\xbe\xa7\x72\xd1\xc3\xb3\xa0\x72\x31\x84\x47\xaf\x93\x10\xf4\xe3\x30\x3c\x7d\x1f\x7b\xf1\x74\xf8\xb9\xc1\x29\xa6\xb9\xfa\x6e\xb0\xb6\x5d\x3d\x8d\xee\xff\x7a\xb7\x5d\x5f\xd4\x37\xdb\x0f\x2f\xb9\xd9\xc6\x63\x98\x08\xbe\x92\x28\x9c\x74\x06\xae\x7d\x59\x59\xa5\x2c\xe1\x2b\x38\x8a\x63\x20\x05\x4b\x70\x96\x32\x4c\x08\x1c\x1f\xdb\x9d\xe0\xf7\x8f\x1f\xde\x2b\x95\xdf\x18\xc0\x3a\x30\x80\xfe\x1a\xc4\xc3\xb2\x11\x8c\xc7\xf0\x55\x2e\x52\xa6\x20\x9d\x33\x2e\x30\x84\x2c\x65\xa8\x91\xe8\x5b\xc7\x29\x01\x33\x89\xc3\x16\x6d\x58\x2e\xf9\xb6\xcc\x16\x4a\xe5\x96\x30\xe2\x1d\xea\xa4\x34\x77\xf9\xef\xef\x6f\x5e\xf5\xcc\x2d\xc4\x2b\xe2\x45\x60\x76\xfb\x3e\x3b\x35\xc6\xa5\xf2\x41\xa5\x4b\xe4\x85\x6a\xef\x7e\xbd\x0c\x31\x54\x8f\x3f\xff\x04\xa2\x81\x85\x63\x3d\x53\xd3\x4c\x2f\x86\x3f\x9f\xfd\x7c\x46\x22\x2b\x6d\xd5\x21\xae\x0d\x69\x9d\x33\x93\xdd\x8e\xe3\x6e\x79\x31\x5c\x0d\xc1\xe9\x55\x09\x95\x8f\x6c\xda\x1c\x00\xcb\x4b\xe4\x8c\x74\x52\xdb\xbd\x51\x5b\xa9\xfa\x65\x5b\xd3\xe0\x7a\x51\xbb\xde\x45\xd7\x01\x1b\x39\xa3\x26\x2b\x5b\x36\x7a\xc4\x57\xd6\x4a\x03\x62\x09\x31\x90\x7f\xbe\xbb\x25\x16\x86\xc1\x1b\x28\xfe\x39\xcf\x51\xfc\x46\x25\xba\x1e\xc4\xba\xc4\xae\xaf\x3e\xdd\x12\x03\xb0\x52\xaa\xfe\x6f\x0d\x15\x22\xab\x01\x55\x24\x9f\xea\x90\xab\xc3\x6c\x40\xf3\x1c\x99\xbb\xf4\xb5\x5c\x4d\x44\x7b\xd4\x1b\x2a\x76\x13\x7c\xc0\xf1\x7d\xcc\x38\x4d\x36\xe9\xad\x41\x75\x12\xd4\xd7\x9b\xd1\x4c\xa2\xc6\xa2\xc4\x63\x15\x9d\xa6\xc1\x1a\xab\x22\x6f\xce\x96\x2e\x82\xee\x06\xb1\x74\x34\x31\xea\x5b\xc2\xa4\xaa\x93\x89\xfe\xee\xbf\x3e\x5d\x5d\x06\xfa\x64\xb3\x79\x3a\x7b\xac\xfd\x78\x46\x49\x67\x70\x4a\xd5\x74\x01\x2e\x0a\xc1\x85\x31\x6f\xbe\xa4\x54\x0b\x15\xdd\x75\x78\xb2\xc8\xea\xe3\xa6\xcd\x0b\x94\x39\x67\x12\x6f\xf1\x9b\xea\x44\xd3\xc8\x55\x9e\x73\x2a\x24\xba\x66\xad\xaa\x82\xc6\x5f\xcf\x97\xf5\xd3\x64\x47\x8b\x3f\x95\x9c\x2a\x9f\x7b\xcb\xdf\x06\xeb\x83\xbe\x6f\x27\x74\xfa\xc7\xb3\x73\xa5\x44\x81\x5e\xb7\xa8\x98\x40\x9a\x3c\x56\x23\xd9\x74\x41\xd9\x7c\x60\x40\x07\x00\xd0\x29\x6d\x79\xa2\xc9\xa3\x9d\x17\xe3\x18\x5e\xeb\x86\xb9\x79\xb2\x74\x4f\x3d\x6f\xb4\x01\x0e\x21\xbc\x95\xac\x52\xa5\x4f\x5e\x91\x65\x91\x53\xef\xd8\x84\x80\xfd\x7b\x3a\x2f\x46\x66\x23\x3b\xb5\x6a\x75\x6e\x51\x4a\x5a\x85\x7b\x74\x64\x4d\x1d\x1f\x37\xbf\x03\x03\x61\x6b\x25\xa8\xd5\x7e\x81\xc1\xe5\x10\xc8\x05\x7b\xa0\x59\x9a\x40\x1d\x5d\x08\x04\x4e\x61\xa3\x6c\x1b\xa0\x35\xa4\x51\x13\x73\xf3\x79\xd0\xda\xec\x44\xd3\x50\x51\xe7\xdf\x54\xb9\x0f\xfd\xb8\x4b\x07\x40\x97\x1a\x40\x9b\xe6\xb6\xe5\xf5\xb3\xdb\xb3\xd6\xf9\x34\x39\xe5\x8c\xa1\x91\xb3\xaa\xc4\xab\xe0\x1a\xc3\x26\x17\x00\xcf\x3f\xeb\x5b\x47\x7d\xbb\xe7\xee\x3d\xe8\x55\x80\x5b\x07\x7d\x9b\x18\x03\x78\x78\xa4\xe8\xde\xa3\x7a\xb4\x30\xb7\x63\xf8\x93\xbf\x79\xeb\x86\x3f\x96\xf7\xfe\xeb\x97\xbe\x4f\xef\xb8\xd9\x83\x71\xc7\x45\xf0\xb5\x7a\x4f\xec\xbc\x7f\x77\xe4\x68\x9e\xda\xfd\xee\xa7\xcd\xae\x40\xf5\x0d\xa2\x63\xe2\x12\x27\xbd\x34\x8b\x76\x7c\x19\x75\xce\x71\xdd\xaf\x52\x19\x6c\xbd\xd6\xb7\x37\x6b\x27\x3b\xc3\xa2\xba\x66\xb6\xaf\x46\x3b\x06\xd0\x3c\xb5\x22\x6f\xae\x2f\x5c\xbd\xe4\xd5\x13\x02\xb5\x91\x54\x9b\xfa\x77\xbd\xad\xb3\x75\x89\x93\xde\xbb\x83\xba\xd9\x74\x3b\x1c\xde\x9e\x68\x06\x0b\xe1\x12\x27\xa6\x00\x3a\x54\x86\xe7\x7e\x4b\x7d\xf8\xca\xdf\xce\x57\xf8\x43\x79\xef\xff\x78\x48\x55\x6c\x8f\xa2\x73\x0e\xc8\x1e\x20\xe1\x28\x19\x51\xb0\xa0\x0f\x08\x94\x25\xc0\x10\x93\x8d\x49\xa3\x3b\xae\x6e\xce\x89\xfd\xb1\xb5\x3e\x01\xd6\x71\xb0\x35\x55\xae\xcb\xa8\x3b\x75\x3e\x21\xb9\x77\xca\xac\x87\x4c\x3b\x92\xff\x74\x08\x0d\x5b\xbc\x6f\x78\xa9\x8d\x11\x86\x13\x72\x88\xc1\xb6\xd4\xeb\xc3\x70\x12\x8c\xb3\x74\x32\x66\x38\x39\xf1\x0c\xd3\x09\x67\x0a\xf8\x03\x0a\x91\x26\x08\xf3\x8c\x4f\x68\xa6\xbb\x7f\x4a\x27\x19\xee\x78\x15\x38\x69\x38\x3d\xd1\xfd\xbf\x27\x10\x54\x0e\xfb\x42\x35\xf1\x5d\x09\x5b\x54\xbb\xaa\xcd\x96\x9b\x05\x4b\xc2\xd7\xe5\xbd\x0e\xde\xbf\xab\x82\xbf\xf7\x9c\xf1\xf8\x6f\xf6\x53\xc3\x47\x9a\xe7\x29\x9b\x7f\xbe\xf9\x10\x33\x9c\x04\x5f\x65\xb0\xa4\xb9\xf3\xdf\x00\x00\x00\xff\xff\xff\xb9\xe0\xdf\xdf\x1a\x00\x00")

func nebJsBytes() ([]byte, error) {
	return bindataRead(
		_nebJs,
		"neb.js",
	)
}

func nebJs() (*asset, error) {
	bytes, err := nebJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "neb.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"neb.js": nebJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"neb.js": &bintree{nebJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
