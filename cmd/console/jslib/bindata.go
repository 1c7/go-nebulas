// Code generated by go-bindata.
// sources:
// neb.js
// DO NOT EDIT!

package jslib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nebJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x6d\x6f\xdb\x38\x12\xfe\x6c\xfd\x8a\x09\x0f\x48\x24\x44\x90\x93\x6e\x77\xb1\x90\x4e\x58\x74\xb7\xbd\x6b\x0e\x6d\x12\xa4\x29\x6e\x81\x20\x28\x68\x6b\x6c\xab\x2b\x93\x3a\x92\x8a\x1b\x78\xf5\xdf\x0f\x14\xa9\x37\x5b\x8e\x9d\xe0\x8a\x03\x36\x5f\xe4\xf0\xe5\x99\x67\x9e\x19\x0e\x47\x12\xf8\x9f\x22\x15\x18\xbb\xb3\x82\x4d\x55\xca\x19\xa0\xab\x7c\xe6\x0b\x6f\xdd\x8c\x48\x97\xfb\x85\xb7\x4e\x67\xee\x11\xbb\xe3\xf7\xe6\x97\xaa\x7e\x3d\x50\x01\x34\x56\x8f\x39\xf2\x19\xd4\x58\x31\xa9\xb7\x92\xe3\x63\x3b\x18\xe9\x3d\xc5\xf1\x31\xf5\x04\xaa\x42\x30\xa0\x2e\xf7\x8f\xce\x3c\x3d\x9e\xd6\x63\xa9\x1d\xd3\xa8\xb3\x98\xe1\x0a\xde\x09\xc1\x85\x4b\x7e\xa3\x8c\x71\x05\xb3\x94\x25\xb0\xe4\x49\x91\x21\x9c\x90\x53\x7e\x4a\x4e\x88\x17\xa9\x85\xe0\x2b\x98\x05\x53\x9e\x60\x4c\x3e\x5e\xbd\xfd\xfc\xe1\xdd\x97\xcb\xab\xdb\x2f\xff\xb8\xfa\x7c\xf9\x96\xf8\xb3\x52\xe3\x65\xb1\xe6\x1e\xaf\xf1\x5b\xce\x85\x92\xe1\xba\x2c\x23\xed\xc3\xdd\xd9\x7d\x30\xa5\x59\xe6\x66\x81\x9d\xf2\x6b\xf6\x2e\x1a\x07\x59\x5c\x2d\x3c\xbf\xbf\xc3\xfb\xc8\x52\x95\x2e\xfb\x85\x85\xe8\x95\x7e\xe6\xb7\x3b\xd1\x37\xda\x95\x76\x95\x36\x59\x4f\x56\x2c\xd2\x83\xb4\x9a\x71\xe1\xea\xd5\x3c\x3e\x8b\xf8\xdf\x45\x90\x21\x9b\xab\x45\xc4\x4f\x4f\x3d\xe9\x0a\x2d\x7c\x43\xa3\xf4\xdc\xf5\x79\x78\xd7\x50\xb6\x10\xbe\x51\xc9\xb7\xb6\xbd\xb5\xe3\x90\x42\x22\x48\x25\xd2\xa9\x22\x91\xe3\x68\xfc\x37\xc9\x32\x65\x10\x43\x13\x69\x97\xe1\xc4\x83\xb5\x33\x52\x8b\x54\x06\x1a\x0b\xa5\x7a\x4f\x59\x92\xa1\x80\x18\x18\x4e\x36\x06\x23\xa7\x8c\x1c\xa7\xc2\x09\x72\xc1\x15\xd7\xee\x05\x0c\x57\x6f\xa6\x53\x5e\x30\xd5\x03\xcf\xa9\x94\xf9\x42\x50\x89\x95\x0d\xcd\x20\xa7\x82\x2e\x25\xc4\xb0\x26\xed\x2c\x09\xa1\xfd\xa7\x8c\x9c\x91\x75\xb6\x4b\xca\x25\x73\x54\xc4\x07\x32\x7e\x38\x1f\xb7\xf6\x88\x6f\x21\xbd\x61\x66\x05\xcb\xf8\xf4\x8f\x21\x72\x34\x49\x04\x4a\xe9\xc3\xd3\x2c\xed\x32\x12\x42\xbd\xc1\x19\xc1\xb3\xb9\xe7\x5c\x36\xe4\x0d\xa5\x7d\xc4\xf7\xd0\x3e\x88\xea\x41\x74\x0e\x21\x23\xd3\x39\xbb\x15\x94\x49\x6a\x58\x74\x09\xcd\x04\x5f\xfa\xa0\xb8\x0f\x0f\x34\x2b\xd0\x07\xc6\xd9\x14\x7d\x90\xbc\x10\xfa\x49\xc5\x7c\x90\xad\xde\x47\x42\xa8\xb6\x3b\x23\xa2\x38\x09\x35\x8a\x33\x22\x15\x0e\x09\x2d\x9e\x33\x22\x15\x22\x09\x2d\xb2\x33\x22\x06\x9b\x84\xb5\x11\x67\x44\xb4\x19\xed\xb9\x98\x4b\x67\x74\x90\xe3\xda\xa9\xbd\x8e\x23\x4b\x3a\x8e\xff\x3b\x55\x8b\xeb\x26\xda\xcf\x96\x61\x5f\xae\x7d\x3f\x49\xf4\xbf\x3b\x72\xf6\x40\xb5\xd4\x2e\x15\xf6\x49\x68\xd1\x7a\x62\x2d\x51\x2d\x78\xe2\x03\xcd\xd3\x66\xb7\xd6\x63\x80\x85\xad\x3b\x0d\xa9\xa1\xad\xc6\xb0\xa9\x80\x75\xf5\x85\xd8\x54\xbb\xc8\x29\xfd\x75\x79\xef\xbf\x7a\x71\xcd\xbc\xbe\xf8\x5f\x54\xcc\xeb\x8b\x8e\x26\x73\x54\x97\x38\xf9\xa4\xa8\xea\x27\xd1\x2e\x11\x36\x8a\xdf\x64\x2c\xf5\x56\xe2\x0d\x61\x33\x9e\xe0\x05\x9b\xf1\x17\x00\xf3\x04\xc7\x29\x9b\xf1\x61\x60\x6a\xaa\x91\x7c\x3e\x70\xbd\x73\x18\x77\xa2\x2b\xd0\xdb\x62\x99\xf7\x80\xab\x1d\x43\x87\xc4\x94\xfd\xb0\x7a\x1c\x94\xb9\x15\xfe\x38\x29\x96\xf9\x56\xaa\x6e\x06\xc5\x16\xdc\xed\xc0\x1c\x52\x75\x9f\x53\x74\xad\x22\x36\x8e\x4f\xd2\xda\x28\x41\x7f\x8d\xda\xdb\xa9\x26\x4f\x7b\xaf\x3b\xb5\x1d\x2e\x5b\x5f\xf5\xd4\x4b\x3c\xdd\x72\xac\xe9\xcb\x42\x83\xf9\x22\xc7\x34\xdf\xfd\xf1\xbc\xa1\xab\x5d\x21\x4d\xa8\xa2\x43\x8e\xe8\x71\x12\x82\x7e\x1c\x44\x44\xd0\xd5\xc1\x22\xcf\x51\xfd\xaa\x0f\xc9\xaf\x8f\xef\xa9\x5c\xf4\xe8\x2c\xa8\x5c\x0c\xd1\xd1\xe3\x24\x04\xfd\x38\x88\x4e\xdf\xc4\x5e\x3a\x1d\x75\x6e\x70\x8a\x69\xae\xbe\x17\xab\x6d\x4b\x4f\x93\xfb\x3f\x5e\x67\xd7\x17\xf5\x65\xf6\xc3\x4b\x2e\xb3\xf1\x18\x26\x82\xaf\x24\x0a\x27\x9d\x81\x6b\xdf\x4b\x56\x29\x4b\xf8\x0a\x8e\xe2\x18\x48\xc1\x12\x9c\xa5\x0c\x13\x02\xc7\xc7\x76\x26\xf8\xfd\xe3\x87\xf7\x4a\xe5\x37\x86\xb0\xf6\x0b\xa0\x3f\x06\xf1\xf0\xda\x08\xc6\x63\xf8\x2a\x17\x29\x53\x90\xce\x19\x17\x18\x42\x96\x32\xd4\x4c\xf4\x5d\xe3\x94\x80\x99\xc4\x61\x44\xeb\x96\x4b\xbe\x2d\xb3\x85\x52\xb9\x15\x8c\x78\x87\x1a\x29\xcd\xf5\xfd\xfb\xfb\x9b\x57\x3d\xb8\x85\x78\x45\xbc\x08\xcc\x6c\xdf\x66\x27\xc1\xb8\x54\x3e\xa8\x74\x89\xbc\x50\xed\x75\xaf\x87\x21\x86\xea\xf1\xe7\x9f\x40\x34\xb1\x70\xac\x5b\x68\x9a\xe9\xc1\xf0\xe7\xb3\x9f\xcf\x48\x64\x57\xdb\xed\x10\xd7\x40\x7a\xcf\x99\x89\x6e\xc7\x70\x27\xb9\xbe\x30\x5c\x0d\xd1\xe9\x65\x09\x95\x8f\x6c\xda\x64\xbf\xd5\x25\x72\x46\x3a\xa8\xed\xdc\xa8\x4d\x54\xfd\x5e\xad\x65\x70\xbd\xa8\x1d\xef\xb2\xeb\x90\x8d\x9c\x51\x13\x95\x2d\x8c\x9e\xf0\x15\x5a\x69\x48\x2c\x21\x06\xf2\xcf\x77\xb7\xc4\xd2\x30\x7c\x03\xc5\x3f\xe7\x39\x8a\xdf\xa8\x44\xd7\x83\x58\xa7\xd8\xf5\xd5\xa7\x5b\x62\x08\x56\x9b\xaa\xff\x5b\xa0\x42\x64\x35\xa1\x4a\xe4\x53\xed\x72\x75\x92\x0d\x69\x9e\x23\x73\x97\xbe\x5e\x57\x0b\xd1\x9e\xf3\x46\x8a\xdd\x02\x1f\x70\x7a\x1f\x33\x4e\x93\x4d\x79\x6b\x52\x9d\x00\xf5\xf7\xcd\x68\x26\x51\x73\x51\xe2\xb1\xf2\x4e\xcb\x60\xc1\x2a\xcf\x9b\xb3\xa5\x93\xa0\x3b\x41\xac\x1c\x8d\x8f\xfa\x82\x30\xa1\xea\x44\xa2\x3f\xfb\xaf\x4f\x57\x97\x81\x3e\xd9\x6c\x9e\xce\x1e\x6b\x3b\x9e\xd9\xa4\x23\x38\xa5\x6a\xba\x00\x17\x85\xe0\xc2\xc0\x9b\x8f\x26\xd5\x40\x25\x77\xed\x9e\x2c\xb2\xfa\xb8\x69\x78\x81\x32\xe7\x4c\xe2\x2d\x7e\x53\x1d\x6f\x9a\x75\x95\xe5\x9c\x0a\x89\xae\x19\xab\xb2\xa0\xb1\xd7\xb3\x65\xed\x34\xd1\xd1\xcb\x9f\x0a\x4e\x15\xcf\xbd\xe9\x6f\x9d\xf5\x41\x5f\xb5\x13\x3a\xfd\xe3\xd9\xb1\x52\xa2\x40\xaf\x9b\x54\x4c\x20\x4d\x1e\xab\x5e\x6c\xba\xa0\x6c\x3e\xd0\x94\x03\x00\xe8\x90\xb6\x3a\xd1\xe4\xd1\xf6\x89\x71\x0c\xaf\x75\xc1\xdc\x3c\x59\xba\xa6\x9e\x37\xbb\x01\x0e\x11\xbc\x5d\x59\x85\x4a\x9f\xbc\x22\xcb\x22\xa7\x9e\xb1\x01\x01\xfb\xf7\x74\x5c\xcc\x9a\x8d\xe8\xd4\x5b\xab\x73\x8b\x52\xd2\xca\xdd\xa3\x23\x0b\x75\x7c\xdc\xfc\x0e\x0c\x85\xad\x91\xa0\xde\xf6\x0b\x0c\x0e\x87\x40\x2e\xd8\x03\xcd\xd2\x04\x6a\xef\x42\x20\x70\x0a\x1b\x69\xdb\x10\xad\x29\x8d\x1a\x9f\x9b\x2f\x81\x16\xb3\xe3\x4d\x23\x45\x1d\x7f\x93\xe5\x3e\xf4\xfd\x2e\x1d\x00\x9d\x6a\x00\x6d\x98\xdb\x92\xd7\x8f\x6e\x0f\xad\xf3\x15\x72\xca\x19\x43\xb3\xce\x6e\x25\x5e\x45\xd7\x00\x9b\x58\x00\x3c\xff\xac\x6f\x1d\xf5\xed\x9a\xbb\xf7\xa0\x57\x0e\x6e\x1d\xf4\x6d\x61\x0c\xe1\xe1\x96\xa2\x7b\x8f\xea\xd6\xc2\xdc\x8e\xe1\x4f\xfe\xe6\xad\x1b\xfe\x58\xde\xfb\xaf\x5f\xfa\x0a\xbd\xe3\x66\x0f\xc6\x1d\x13\xc1\xd7\xea\xf5\xb0\xf3\xca\xdd\x59\x47\xf3\xd4\xce\x77\xbf\x62\x76\x17\x54\x1f\x1d\x3a\x10\x97\x38\xe9\x85\x59\xb4\xed\xcb\xa8\x73\x8e\xeb\x7a\x35\xf4\x2a\xdf\xde\xac\x9d\xe8\xec\x7a\xeb\x5f\xc1\xf6\xd5\x68\xdb\x00\x9a\xa7\x76\xc9\x9b\xeb\x0b\x57\x0f\x79\x75\x87\x40\xad\x27\xd5\xa4\xfe\x5d\x4f\xeb\x68\x5d\xe2\xa4\xf7\xda\xa0\x6e\x36\xcd\x0e\xbb\xb7\xc7\x9b\xc1\x44\xb8\xc4\x89\x49\x80\x8e\x94\xe1\xb9\xdf\x4a\x1f\xbe\xf2\xb7\xe3\x15\xfe\x50\xde\xfb\x3f\x1e\x92\x15\xdb\xad\xe8\x9c\x03\xb2\x07\x48\x38\x4a\x46\x14\x2c\xe8\x03\x02\x65\x09\x30\xc4\x64\xa3\xd3\xe8\xb6\xab\x9b\x7d\x62\xbf\x6d\xad\x4f\x80\x35\x1c\x6c\x75\x95\xeb\x32\xea\x76\x9d\x4f\xac\xdc\xdb\x65\xd6\x4d\xa6\x6d\xc9\x7f\x3a\x44\x86\x2d\xdd\x37\xac\xd4\x60\x84\xe1\x84\x1c\x02\xd8\xa6\x7a\x7d\x18\x4e\x82\x71\x96\x4e\xc6\x0c\x27\x27\x9e\x51\x3a\xe1\x4c\x01\x7f\x40\x21\xd2\x04\x61\x9e\xf1\x09\xcd\x74\xf5\x4f\xe9\x24\xc3\x1d\xaf\x02\x27\x8d\xa6\x27\xba\xfe\xf7\x16\x04\x95\xc1\xfe\xa2\x5a\xf8\xee\x0a\x9b\x54\xbb\xb2\xcd\xa6\x9b\x25\x4b\xc2\xd7\xe5\xbd\x76\xde\xbf\xab\x9c\xbf\xf7\x9c\xf1\xf8\x6f\xf6\x1b\xc3\x47\x9a\xe7\x29\x9b\x7f\xbe\xf9\x10\x33\x9c\x04\x5f\x65\xb0\xa4\xb9\xf3\xdf\x00\x00\x00\xff\xff\x7c\xd3\xc5\xe0\xca\x1a\x00\x00")

func nebJsBytes() ([]byte, error) {
	return bindataRead(
		_nebJs,
		"neb.js",
	)
}

func nebJs() (*asset, error) {
	bytes, err := nebJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "neb.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"neb.js": nebJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"neb.js": &bintree{nebJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
