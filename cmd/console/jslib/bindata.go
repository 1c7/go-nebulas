// Code generated by go-bindata.
// sources:
// neb.js
// DO NOT EDIT!

package jslib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nebJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x6d\x6f\xdb\x38\x12\xfe\x6c\xfd\x8a\x09\x0f\x48\x24\x44\x90\x93\x6e\x77\xb1\x90\x4e\x58\x14\xdb\xde\x35\x87\x36\x09\xda\x14\x58\x20\x30\x0a\xca\x1a\xdb\xea\xca\xa4\x8e\xa4\x92\x06\xae\xfe\xfb\x81\x2f\x7a\xb3\x9d\xd4\x0d\x0a\x5c\xbf\xc4\x25\x67\x9e\x79\xe6\x99\x21\x35\x14\xf8\xdf\xba\x10\x98\xfa\x8b\x9a\xcd\x55\xc1\x19\xa0\xaf\x42\x16\x8a\x60\xd3\xad\x48\x9f\x87\x75\xb0\x29\x16\xfe\x11\xbb\xe5\x33\xfb\x4b\x99\x5f\x77\x54\x00\x4d\xd5\x43\x85\x7c\x01\x2d\x56\x4a\x5a\x57\x72\x7c\xec\x16\x13\xed\x53\x1f\x1f\xd3\x40\xa0\xaa\x05\x03\xea\xf3\xf0\xe8\x2c\xd0\xeb\x45\xbb\x56\xb8\x35\x8d\xba\x48\x19\xde\xc3\x1b\x21\xb8\xf0\xc9\x9f\x94\x31\xae\x60\x51\xb0\x1c\xd6\x3c\xaf\x4b\x84\x13\x72\xca\x4f\xc9\x09\x09\x12\xb5\x12\xfc\x1e\x16\xd1\x9c\xe7\x98\x92\xf7\x57\xaf\x3f\xbd\x7b\xf3\xf9\xf2\xea\xe6\xf3\xbf\xae\x3e\x5d\xbe\x26\xe1\xa2\xd1\x78\x65\xaa\xb9\xa7\x1b\xfc\x5a\x71\xa1\x64\xbc\x69\x9a\x44\xe7\x70\x7b\x36\x8b\xe6\xb4\x2c\xfd\x32\x72\x5b\x61\xcb\xde\x47\x9b\x20\x4b\x8d\xe1\xf9\xec\x16\x67\x89\xa3\x2a\x7d\xf6\x07\x8b\x31\x68\xc2\x32\xec\x3d\x31\xb4\xda\x35\xce\x4a\x87\x6c\x37\x0d\x8b\xe2\x20\xad\x16\x5c\xf8\xda\x9a\xa7\x67\x09\xff\xa7\x88\x4a\x64\x4b\xb5\x4a\xf8\xe9\x69\x20\x7d\xa1\x85\xef\x68\x34\x81\xbf\x39\x8f\x6f\x3b\xca\x0e\x22\xb4\x2a\x85\x2e\x76\xb0\xf1\x3c\x52\x4b\x04\xa9\x44\x31\x57\x24\xf1\x3c\x8d\xff\x2a\x5f\x17\x0c\x52\xe8\x2a\xed\x33\xcc\x02\xd8\x78\x13\xb5\x2a\x64\xf4\x59\x83\xa1\x54\x6f\x29\xcb\x4b\x14\x90\x02\xc3\x2c\x1a\x2f\x26\x5e\x93\x78\x9e\x01\x8a\x2a\xc1\x15\xd7\xf9\x75\x9e\x23\xec\x35\xaa\x15\xcf\x43\xa0\x55\x11\x42\x45\x05\x5d\x4b\x13\xcb\xa5\xb2\x2f\x64\x1b\x6c\xaf\xaf\x0d\x6d\x13\x6d\x45\x86\xd4\x26\x95\x78\x4d\xb8\x69\x66\xe1\x8b\x67\x4b\x73\x7d\xf1\x53\x84\xb9\xbe\x18\xc8\xb2\x44\x75\x89\xd9\x47\x45\x15\x8e\xc0\x1f\x95\xc1\x27\x4b\x54\x24\x04\x32\xbd\x3b\x9f\x32\xcc\xa6\x52\xfb\x92\x60\x1f\x38\x9d\xcf\x79\xcd\x8c\x04\x3f\x8a\xdc\xba\xee\x07\xce\x4a\x3e\xff\xfb\x75\xbd\xae\x46\xc8\xc6\xc3\xc0\x6b\xb9\x6c\x49\x20\x85\x0d\x31\x1b\x24\x36\x7f\x9a\xe4\xb1\xe8\x15\x97\x5d\x78\x13\x60\x9a\xd7\xeb\x8a\x6c\x15\x77\x47\xbe\x57\x96\xe9\xae\x84\x34\xcf\x05\x4a\xb9\x8f\x90\xdb\x22\xb1\xfb\x71\x18\x29\xa7\x89\x53\xfc\x49\x5e\x12\x59\x7e\x23\x28\x93\xd4\x92\x19\xf2\x5a\x08\xbe\x0e\x41\xf1\x10\xee\x68\x59\x63\x08\x8c\xb3\x39\x86\x20\x79\x2d\xf4\x5f\x6d\x19\x02\x15\xcb\xbd\xd4\xb5\x37\x89\xc1\x80\x78\x13\xa2\x38\x89\x35\x96\x37\x21\x06\x8d\xc4\x0e\xd5\x9b\x10\x83\x4b\x62\x87\xef\x4d\x88\x8d\x40\xe2\x36\x94\x37\xe9\xaf\x9a\xd8\xc6\xf5\x26\x44\x47\x26\xb1\x21\xe0\x4d\x0e\x53\x46\xf5\xa9\x3e\xad\x8b\xbe\x56\x1f\x11\xc3\xa9\xf0\xdc\xec\x77\x92\xfd\x39\x99\x69\xc2\x4f\xa7\xf4\x7f\xbd\xd8\xae\x2f\xda\x6b\xed\x97\xe7\x5c\x6b\xd3\x29\x64\x82\xdf\x4b\x14\x5e\xb1\x00\xdf\x7d\x88\xee\x0b\x96\xf3\x7b\x38\x4a\x53\x20\x35\xcb\x71\x51\x30\xcc\x09\x1c\x1f\xbb\x9d\xe8\xaf\xf7\xef\xde\x2a\x55\x7d\xb0\x84\x75\x62\x00\xe3\x35\x48\xf7\xdb\x26\x30\x9d\xc2\x17\xb9\x2a\x98\x82\x62\xc9\xb8\xc0\x18\xca\x82\xa1\x66\xc2\x78\x8e\x5e\x03\x58\x4a\xdc\x8f\xe8\xd2\xf2\xc9\xd7\x75\xb9\x52\xaa\x72\x82\x91\xe0\xd0\x20\x8d\xbd\xc8\xff\x7a\xfb\xe1\xc5\x08\x6e\x25\x5e\x90\x20\x01\xbb\x3b\x8e\xd9\x97\x74\xc5\xa5\x0a\x41\x2b\x19\xaa\x62\x8d\xbc\x56\xfd\xed\xaf\xf7\x20\x05\xf3\xe7\xdb\x37\x20\x9a\x5d\x3c\x9d\x96\x7c\x4e\x4b\xbd\x48\x12\x67\xa8\xdd\x21\x35\x28\xc6\xf0\xf7\xb3\xdf\xcf\xba\x4d\x07\x0b\x29\xb4\xbf\xbe\x7d\x83\x33\x5b\xfa\x01\xab\x61\xef\x31\xbc\xdf\xc7\x75\xd4\x42\x54\x3e\xb0\x79\x77\x98\x9c\x68\x89\x37\xd1\x15\xef\xf7\x26\x7d\x1b\xeb\x29\x4b\x6b\xe4\x07\x49\xbf\x3e\x64\x37\x20\x9b\x78\x93\xae\x64\x3b\x18\xa3\xaa\x18\xb4\xc6\x92\x58\x43\x0a\xe4\xdf\x6f\x6e\x88\xa3\x61\xf9\x46\x8a\x7f\xaa\x2a\x14\x7f\x52\x89\x7e\x00\xa9\xee\xbf\xeb\xab\x8f\x37\xc4\x12\x34\x4e\xe6\xff\x3d\x50\x2d\xca\x96\x90\x11\xff\x14\x48\x4c\xe0\x14\x7a\xb1\x4f\xb5\x08\xe6\xa8\xdb\x34\x78\x85\xcc\x5f\x87\xda\xb3\x95\xa6\xbf\x08\x3a\x71\x1e\x97\xfc\x80\xd3\xfe\x50\x72\x9a\x6f\x0b\xde\xd2\x1c\x94\x6c\xec\xb7\xa0\xa5\x44\xcd\x45\x89\x07\x93\xaf\x16\xc6\x81\x19\x2d\xba\xa3\xa8\xdb\x62\xb8\x41\x9c\x40\x5d\x8e\xfa\xeb\x63\x8b\x37\xa8\xcd\x78\xf7\x3f\x1f\xaf\x2e\x23\x7d\x11\xb0\x65\xb1\x78\x68\xe3\x04\xd6\x49\xd7\x74\x4e\xd5\x7c\x05\x3e\xea\x69\xdb\xc2\xdb\xa1\xda\x2c\x98\x02\xb4\xe9\xc9\xba\x6c\x4f\xa7\x86\x17\x28\x2b\xce\x24\xde\xe0\x57\x35\xc8\xa6\xb3\x33\x91\x2b\x2a\x24\xfa\x76\xcd\xf4\x45\x17\x6f\x14\xcb\xc5\xe9\xaa\xa3\xcd\x9f\x2a\x8e\xa9\xe7\x77\x0f\x84\x4b\x36\x04\x7d\xb9\x67\x74\xfe\xf7\x0f\xd7\x4a\x89\x1a\x83\x61\x53\x31\x81\x34\x7f\x30\x83\xc1\x7c\x45\xd9\x72\xcf\x30\x07\x00\xa0\x4b\xda\xeb\x44\xf3\x07\x37\xb5\xa4\x29\xbc\xd4\xf7\xeb\xf6\x59\xd3\x57\xf0\x79\xe7\x0d\x70\x88\xe0\xbd\xa5\x29\x95\x3e\x8b\x75\x59\x26\x5e\xbb\xe3\x0a\x02\xee\xdf\xd3\x75\xb1\x36\x5b\xd5\x69\x5d\xcd\x49\x46\x29\xa9\x49\xf7\xe8\xc8\x41\x1d\x1f\x77\xbf\x23\x4b\x61\x67\x25\x6a\xdd\xfe\x80\xbd\xcb\x31\x90\x0b\x76\x47\xcb\x22\x87\x36\xbb\x18\xf4\xb9\xde\x6a\xdb\x8e\x68\x4b\x69\xd2\xe5\xdc\xbd\x14\x1d\xe6\x20\x9b\x4e\x8a\xb6\xfe\xb6\xcb\x43\x18\xe7\xdd\x78\x00\xba\xd5\x00\xfa\x32\xf7\x97\xe0\xb8\xba\x23\xb4\xc1\x2b\x75\xce\x19\x43\x6b\xe7\x5c\x49\x60\xe8\x5a\x60\x5b\x0b\x80\x1f\x3f\xeb\x3b\x47\x7d\xf7\x16\xfe\xee\x41\x37\x09\xee\x1c\xf4\x5d\x61\x2c\xe1\xfd\x13\xc8\xf0\xb3\xab\x27\x11\xfb\x31\x8d\x7f\x0b\xb7\x3f\xd2\xf1\xaf\xcd\x2c\x7c\xf9\xdc\xb7\xd7\x23\x83\x40\x34\x1d\x84\x88\xbe\x98\xd7\xca\xe0\xad\x36\xb0\xa3\x55\xe1\xf6\x87\xaf\xdc\xa1\x81\x79\xaf\x0e\x20\x2e\x31\x1b\x95\x59\xf4\xd3\xce\x64\x70\x8e\xdb\xfb\xaa\x90\xd1\xce\x13\xb0\xff\xd6\x0e\xaa\xb3\xdf\x54\xf7\xcc\xee\xc7\xd2\x0d\x06\xb4\x2a\x9c\xc9\xab\xeb\x0b\x5f\x2f\x05\xed\xcc\x40\x5d\x26\x66\x53\xff\x6e\xb7\x75\xb5\x2e\x31\x1b\xbd\x49\xd4\x87\xed\xb0\xfb\xd3\xfb\x4e\x36\x7b\x1b\xe1\x12\x33\xdb\x00\x03\x29\xe3\xf3\xb0\x97\x3e\x7e\x11\xee\xd6\x2b\xfe\xa5\x99\x85\xbf\x1e\xd2\x15\xbb\x93\xeb\x92\x03\xb2\x3b\xc8\x39\x4a\x46\x14\xac\xe8\x1d\x02\x65\x39\x30\xc4\x7c\x6b\xf6\x18\x4e\xb7\xdb\x63\xe5\x78\xca\x6d\x4f\x80\x0b\x1c\xed\x0c\xa1\x9b\x26\x19\x0e\xa9\x4f\x58\x7e\x77\x28\x6d\x67\x52\x37\xc1\xff\x76\x88\x0c\x3b\xba\x6f\x45\x69\xc1\x08\xc3\x8c\x1c\x02\xd8\xb7\x7a\x7b\x18\x4e\xa2\x69\x59\x64\x53\x86\xd9\x49\x60\x95\xce\x39\x53\xc0\xef\x50\x88\x22\x47\x58\x96\x3c\xa3\xa5\xbe\xfd\x0b\x9a\x95\xf8\xc8\xcb\xe1\xa4\xd3\xf4\x44\xdf\xff\x23\x83\xc8\x04\x1c\x1b\xb5\xc2\x0f\x2d\x5c\x53\x3d\xd6\x6d\xae\xdd\x1c\x59\x12\xbf\x6c\x66\x3a\xf9\xf0\xd6\x24\x3f\x0b\xbc\xe9\xf4\x1f\xee\xa9\xfb\x9e\x56\x55\xc1\x96\x9f\x3e\xbc\x4b\x19\x66\xd1\x17\x19\xad\x69\xe5\xfd\x2f\x00\x00\xff\xff\x55\x7f\x0e\xfb\xea\x14\x00\x00")

func nebJsBytes() ([]byte, error) {
	return bindataRead(
		_nebJs,
		"neb.js",
	)
}

func nebJs() (*asset, error) {
	bytes, err := nebJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "neb.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"neb.js": nebJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"neb.js": &bintree{nebJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
