// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api_rpc.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	api_rpc.proto

It has these top-level messages:
	SubscribeRequest
	ChangeNetworkIDRequest
	ChangeNetworkIDResponse
	SubscribeResponse
	NonParamsRequest
	NodeInfoResponse
	StatisticsNodeInfoResponse
	RouteTable
	GetNebStateResponse
	AccountsResponse
	GetAccountStateRequest
	GetAccountStateResponse
	GetDynastyResponse
	GetDelegateVotersRequest
	GetDelegateVotersResponse
	TransactionRequest
	ContractRequest
	CandidateRequest
	DelegateRequest
	SendRawTransactionRequest
	SendTransactionResponse
	GetBlockByHashRequest
	GetTransactionByHashRequest
	BlockDumpRequest
	BlockDumpResponse
	TransactionReceiptResponse
	NewAccountRequest
	NewAccountResponse
	UnlockAccountRequest
	UnlockAccountResponse
	LockAccountRequest
	LockAccountResponse
	SignTransactionResponse
	SendTransactionPassphraseRequest
	SendTransactionPassphraseResponse
	GasPriceResponse
	EstimateGasResponse
	EventsResponse
	Event
*/
package rpcpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import corepb "github.com/nebulasio/go-nebulas/core/pb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Request message of Subscribe rpc
type SubscribeRequest struct {
	Topic []string `protobuf:"bytes,1,rep,name=topic" json:"topic,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{0} }

func (m *SubscribeRequest) GetTopic() []string {
	if m != nil {
		return m.Topic
	}
	return nil
}

// Request message of change networkID.
type ChangeNetworkIDRequest struct {
	NetworkId uint32 `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (m *ChangeNetworkIDRequest) Reset()                    { *m = ChangeNetworkIDRequest{} }
func (m *ChangeNetworkIDRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangeNetworkIDRequest) ProtoMessage()               {}
func (*ChangeNetworkIDRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{1} }

func (m *ChangeNetworkIDRequest) GetNetworkId() uint32 {
	if m != nil {
		return m.NetworkId
	}
	return 0
}

// Response message of change networkID.
type ChangeNetworkIDResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ChangeNetworkIDResponse) Reset()                    { *m = ChangeNetworkIDResponse{} }
func (m *ChangeNetworkIDResponse) String() string            { return proto.CompactTextString(m) }
func (*ChangeNetworkIDResponse) ProtoMessage()               {}
func (*ChangeNetworkIDResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{2} }

func (m *ChangeNetworkIDResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// Request message of Subscribe rpc
type SubscribeResponse struct {
	MsgType string `protobuf:"bytes,1,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	Data    string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{3} }

func (m *SubscribeResponse) GetMsgType() string {
	if m != nil {
		return m.MsgType
	}
	return ""
}

func (m *SubscribeResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// Request message of non params.
type NonParamsRequest struct {
}

func (m *NonParamsRequest) Reset()                    { *m = NonParamsRequest{} }
func (m *NonParamsRequest) String() string            { return proto.CompactTextString(m) }
func (*NonParamsRequest) ProtoMessage()               {}
func (*NonParamsRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{4} }

// Response message of node info.
type NodeInfoResponse struct {
	// the node ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the block chainID.
	ChainId uint32 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// the node version.
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// Number of peers currenly connected.
	PeerCount uint32 `protobuf:"varint,4,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
	// the node synchronized status.
	Synchronized bool `protobuf:"varint,5,opt,name=synchronized,proto3" json:"synchronized,omitempty"`
	// the node route table bucket size.
	BucketSize int32 `protobuf:"varint,6,opt,name=bucket_size,json=bucketSize,proto3" json:"bucket_size,omitempty"`
	// the node relay cache size.
	RelayCacheSize int32 `protobuf:"varint,7,opt,name=relay_cache_size,json=relayCacheSize,proto3" json:"relay_cache_size,omitempty"`
	// the node stream store size.
	StreamStoreSize int32 `protobuf:"varint,8,opt,name=stream_store_size,json=streamStoreSize,proto3" json:"stream_store_size,omitempty"`
	// the node stream store extend size.
	StreamStoreExtendSize int32 `protobuf:"varint,9,opt,name=stream_store_extend_size,json=streamStoreExtendSize,proto3" json:"stream_store_extend_size,omitempty"`
	// the network protocol version.
	ProtocolVersion string        `protobuf:"bytes,10,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	RouteTable      []*RouteTable `protobuf:"bytes,11,rep,name=route_table,json=routeTable" json:"route_table,omitempty"`
}

func (m *NodeInfoResponse) Reset()                    { *m = NodeInfoResponse{} }
func (m *NodeInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeInfoResponse) ProtoMessage()               {}
func (*NodeInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{5} }

func (m *NodeInfoResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeInfoResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *NodeInfoResponse) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *NodeInfoResponse) GetPeerCount() uint32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

func (m *NodeInfoResponse) GetSynchronized() bool {
	if m != nil {
		return m.Synchronized
	}
	return false
}

func (m *NodeInfoResponse) GetBucketSize() int32 {
	if m != nil {
		return m.BucketSize
	}
	return 0
}

func (m *NodeInfoResponse) GetRelayCacheSize() int32 {
	if m != nil {
		return m.RelayCacheSize
	}
	return 0
}

func (m *NodeInfoResponse) GetStreamStoreSize() int32 {
	if m != nil {
		return m.StreamStoreSize
	}
	return 0
}

func (m *NodeInfoResponse) GetStreamStoreExtendSize() int32 {
	if m != nil {
		return m.StreamStoreExtendSize
	}
	return 0
}

func (m *NodeInfoResponse) GetProtocolVersion() string {
	if m != nil {
		return m.ProtocolVersion
	}
	return ""
}

func (m *NodeInfoResponse) GetRouteTable() []*RouteTable {
	if m != nil {
		return m.RouteTable
	}
	return nil
}

type StatisticsNodeInfoResponse struct {
	NodeID    string `protobuf:"bytes,1,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	Height    uint64 `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	Hash      string `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	PeerCount uint32 `protobuf:"varint,4,opt,name=PeerCount,proto3" json:"PeerCount,omitempty"`
}

func (m *StatisticsNodeInfoResponse) Reset()                    { *m = StatisticsNodeInfoResponse{} }
func (m *StatisticsNodeInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*StatisticsNodeInfoResponse) ProtoMessage()               {}
func (*StatisticsNodeInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{6} }

func (m *StatisticsNodeInfoResponse) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *StatisticsNodeInfoResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StatisticsNodeInfoResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *StatisticsNodeInfoResponse) GetPeerCount() uint32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

type RouteTable struct {
	Id      string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address []string `protobuf:"bytes,2,rep,name=address" json:"address,omitempty"`
}

func (m *RouteTable) Reset()                    { *m = RouteTable{} }
func (m *RouteTable) String() string            { return proto.CompactTextString(m) }
func (*RouteTable) ProtoMessage()               {}
func (*RouteTable) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{7} }

func (m *RouteTable) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RouteTable) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

// Response message of GetNebState rpc.
type GetNebStateResponse struct {
	// Block chain id
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Current neb tail hash
	Tail string `protobuf:"bytes,2,opt,name=tail,proto3" json:"tail,omitempty"`
	// Neb coinbase
	Coinbase string `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Number of peers currenly connected
	PeerCount uint32 `protobuf:"varint,4,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
	// Neb mine status, minging is true ,otherwise false
	IsMining bool `protobuf:"varint,5,opt,name=is_mining,json=isMining,proto3" json:"is_mining,omitempty"`
	// The current neb protocol version.
	ProtocolVersion string `protobuf:"bytes,6,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	// The peer sync status.
	Synchronized bool `protobuf:"varint,7,opt,name=synchronized,proto3" json:"synchronized,omitempty"`
}

func (m *GetNebStateResponse) Reset()                    { *m = GetNebStateResponse{} }
func (m *GetNebStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNebStateResponse) ProtoMessage()               {}
func (*GetNebStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{8} }

func (m *GetNebStateResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GetNebStateResponse) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *GetNebStateResponse) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *GetNebStateResponse) GetPeerCount() uint32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

func (m *GetNebStateResponse) GetIsMining() bool {
	if m != nil {
		return m.IsMining
	}
	return false
}

func (m *GetNebStateResponse) GetProtocolVersion() string {
	if m != nil {
		return m.ProtocolVersion
	}
	return ""
}

func (m *GetNebStateResponse) GetSynchronized() bool {
	if m != nil {
		return m.Synchronized
	}
	return false
}

// Response message of Accounts rpc.
type AccountsResponse struct {
	// Account list
	Addresses []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *AccountsResponse) Reset()                    { *m = AccountsResponse{} }
func (m *AccountsResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountsResponse) ProtoMessage()               {}
func (*AccountsResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{9} }

func (m *AccountsResponse) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// Request message of GetAccountState rpc.
type GetAccountStateRequest struct {
	// Hex string of the account addresss.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Hex string block number, or one of "latest", "earliest" or "pending". If not specified, use "latest".
	Block string `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *GetAccountStateRequest) Reset()                    { *m = GetAccountStateRequest{} }
func (m *GetAccountStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateRequest) ProtoMessage()               {}
func (*GetAccountStateRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{10} }

func (m *GetAccountStateRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAccountStateRequest) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

// Response message of GetAccountState rpc.
type GetAccountStateResponse struct {
	// Current balance in unit of 1/(10^18) nas.
	Balance string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// Current transaction count.
	Nonce string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *GetAccountStateResponse) Reset()                    { *m = GetAccountStateResponse{} }
func (m *GetAccountStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateResponse) ProtoMessage()               {}
func (*GetAccountStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{11} }

func (m *GetAccountStateResponse) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *GetAccountStateResponse) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

// Response message of GetDynastyRequest rpc
type GetDynastyResponse struct {
	Delegatees []string `protobuf:"bytes,1,rep,name=delegatees" json:"delegatees,omitempty"`
}

func (m *GetDynastyResponse) Reset()                    { *m = GetDynastyResponse{} }
func (m *GetDynastyResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDynastyResponse) ProtoMessage()               {}
func (*GetDynastyResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{12} }

func (m *GetDynastyResponse) GetDelegatees() []string {
	if m != nil {
		return m.Delegatees
	}
	return nil
}

// Response message of GetDelegateVoters rpc
type GetDelegateVotersRequest struct {
	Delegatee string `protobuf:"bytes,1,opt,name=delegatee,proto3" json:"delegatee,omitempty"`
}

func (m *GetDelegateVotersRequest) Reset()                    { *m = GetDelegateVotersRequest{} }
func (m *GetDelegateVotersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDelegateVotersRequest) ProtoMessage()               {}
func (*GetDelegateVotersRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{13} }

func (m *GetDelegateVotersRequest) GetDelegatee() string {
	if m != nil {
		return m.Delegatee
	}
	return ""
}

// Response message of GetDelegateVoters rpc
type GetDelegateVotersResponse struct {
	Voters []string `protobuf:"bytes,1,rep,name=voters" json:"voters,omitempty"`
}

func (m *GetDelegateVotersResponse) Reset()                    { *m = GetDelegateVotersResponse{} }
func (m *GetDelegateVotersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDelegateVotersResponse) ProtoMessage()               {}
func (*GetDelegateVotersResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{14} }

func (m *GetDelegateVotersResponse) GetVoters() []string {
	if m != nil {
		return m.Voters
	}
	return nil
}

// Request message of SendTransaction rpc.
type TransactionRequest struct {
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// gasPrice sending with this transaction.
	GasPrice string `protobuf:"bytes,5,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// gasLimit sending with this transaction.
	GasLimit string `protobuf:"bytes,6,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// contract sending with this transaction
	Contract *ContractRequest `protobuf:"bytes,7,opt,name=contract" json:"contract,omitempty"`
	// candidate application sending with this transaction.
	Candidate *CandidateRequest `protobuf:"bytes,8,opt,name=candidate" json:"candidate,omitempty"`
	// delegate vote sending with this transaction.
	Delegate *DelegateRequest `protobuf:"bytes,9,opt,name=delegate" json:"delegate,omitempty"`
}

func (m *TransactionRequest) Reset()                    { *m = TransactionRequest{} }
func (m *TransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*TransactionRequest) ProtoMessage()               {}
func (*TransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{15} }

func (m *TransactionRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransactionRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TransactionRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactionRequest) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func (m *TransactionRequest) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

func (m *TransactionRequest) GetContract() *ContractRequest {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *TransactionRequest) GetCandidate() *CandidateRequest {
	if m != nil {
		return m.Candidate
	}
	return nil
}

func (m *TransactionRequest) GetDelegate() *DelegateRequest {
	if m != nil {
		return m.Delegate
	}
	return nil
}

type ContractRequest struct {
	// contract source code.
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// contract source type, support javascript and typescript
	SourceType string `protobuf:"bytes,2,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// call contract function name
	Function string `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	// the params of contract.
	Args string `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty"`
}

func (m *ContractRequest) Reset()                    { *m = ContractRequest{} }
func (m *ContractRequest) String() string            { return proto.CompactTextString(m) }
func (*ContractRequest) ProtoMessage()               {}
func (*ContractRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{16} }

func (m *ContractRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ContractRequest) GetSourceType() string {
	if m != nil {
		return m.SourceType
	}
	return ""
}

func (m *ContractRequest) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *ContractRequest) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

type CandidateRequest struct {
	// candidate action.
	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *CandidateRequest) Reset()                    { *m = CandidateRequest{} }
func (m *CandidateRequest) String() string            { return proto.CompactTextString(m) }
func (*CandidateRequest) ProtoMessage()               {}
func (*CandidateRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{17} }

func (m *CandidateRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type DelegateRequest struct {
	// delegate action.
	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	// delegatee.
	Delegatee string `protobuf:"bytes,2,opt,name=delegatee,proto3" json:"delegatee,omitempty"`
}

func (m *DelegateRequest) Reset()                    { *m = DelegateRequest{} }
func (m *DelegateRequest) String() string            { return proto.CompactTextString(m) }
func (*DelegateRequest) ProtoMessage()               {}
func (*DelegateRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{18} }

func (m *DelegateRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *DelegateRequest) GetDelegatee() string {
	if m != nil {
		return m.Delegatee
	}
	return ""
}

// Request message of SendRawTransactionRequest rpc.
type SendRawTransactionRequest struct {
	// Signed data of transaction
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SendRawTransactionRequest) Reset()                    { *m = SendRawTransactionRequest{} }
func (m *SendRawTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRawTransactionRequest) ProtoMessage()               {}
func (*SendRawTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{19} }

func (m *SendRawTransactionRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Response message of SendTransaction rpc.
type SendTransactionResponse struct {
	// Hex string of transaction hash.
	Txhash          string `protobuf:"bytes,1,opt,name=txhash,proto3" json:"txhash,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Result          bool   `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *SendTransactionResponse) Reset()                    { *m = SendTransactionResponse{} }
func (m *SendTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionResponse) ProtoMessage()               {}
func (*SendTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{20} }

func (m *SendTransactionResponse) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

func (m *SendTransactionResponse) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *SendTransactionResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// Request message of GetBlockByHash rpc.
type GetBlockByHashRequest struct {
	// Hex string of block hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetBlockByHashRequest) Reset()                    { *m = GetBlockByHashRequest{} }
func (m *GetBlockByHashRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockByHashRequest) ProtoMessage()               {}
func (*GetBlockByHashRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{21} }

func (m *GetBlockByHashRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// Request message of GetTransactionByHash rpc.
type GetTransactionByHashRequest struct {
	// Hex string of transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetTransactionByHashRequest) Reset()         { *m = GetTransactionByHashRequest{} }
func (m *GetTransactionByHashRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionByHashRequest) ProtoMessage()    {}
func (*GetTransactionByHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorApiRpc, []int{22}
}

func (m *GetTransactionByHashRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// Request message of BlockDump.
type BlockDumpRequest struct {
	// the count of blocks to dump before current tail.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *BlockDumpRequest) Reset()                    { *m = BlockDumpRequest{} }
func (m *BlockDumpRequest) String() string            { return proto.CompactTextString(m) }
func (*BlockDumpRequest) ProtoMessage()               {}
func (*BlockDumpRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{23} }

func (m *BlockDumpRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// Response message of BlockDump.
type BlockDumpResponse struct {
	// block dump info.
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BlockDumpResponse) Reset()                    { *m = BlockDumpResponse{} }
func (m *BlockDumpResponse) String() string            { return proto.CompactTextString(m) }
func (*BlockDumpResponse) ProtoMessage()               {}
func (*BlockDumpResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{24} }

func (m *BlockDumpResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// Response message of TransactionReceipt.
type TransactionReceiptResponse struct {
	// Hex string of tx hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Transaction nonce.
	Nonce           uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Timestamp       int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data            string `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	ChainId         uint32 `protobuf:"varint,7,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ContractAddress string `protobuf:"bytes,8,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *TransactionReceiptResponse) Reset()         { *m = TransactionReceiptResponse{} }
func (m *TransactionReceiptResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionReceiptResponse) ProtoMessage()    {}
func (*TransactionReceiptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorApiRpc, []int{25}
}

func (m *TransactionReceiptResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TransactionReceiptResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransactionReceiptResponse) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionReceiptResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactionReceiptResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TransactionReceiptResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *TransactionReceiptResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *TransactionReceiptResponse) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type NewAccountRequest struct {
	Passphrase string `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *NewAccountRequest) Reset()                    { *m = NewAccountRequest{} }
func (m *NewAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*NewAccountRequest) ProtoMessage()               {}
func (*NewAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{26} }

func (m *NewAccountRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type NewAccountResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *NewAccountResponse) Reset()                    { *m = NewAccountResponse{} }
func (m *NewAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*NewAccountResponse) ProtoMessage()               {}
func (*NewAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{27} }

func (m *NewAccountResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type UnlockAccountRequest struct {
	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Passphrase string `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *UnlockAccountRequest) Reset()                    { *m = UnlockAccountRequest{} }
func (m *UnlockAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*UnlockAccountRequest) ProtoMessage()               {}
func (*UnlockAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{28} }

func (m *UnlockAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UnlockAccountRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type UnlockAccountResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UnlockAccountResponse) Reset()                    { *m = UnlockAccountResponse{} }
func (m *UnlockAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*UnlockAccountResponse) ProtoMessage()               {}
func (*UnlockAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{29} }

func (m *UnlockAccountResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type LockAccountRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *LockAccountRequest) Reset()                    { *m = LockAccountRequest{} }
func (m *LockAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*LockAccountRequest) ProtoMessage()               {}
func (*LockAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{30} }

func (m *LockAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type LockAccountResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *LockAccountResponse) Reset()                    { *m = LockAccountResponse{} }
func (m *LockAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*LockAccountResponse) ProtoMessage()               {}
func (*LockAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{31} }

func (m *LockAccountResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type SignTransactionResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SignTransactionResponse) Reset()                    { *m = SignTransactionResponse{} }
func (m *SignTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SignTransactionResponse) ProtoMessage()               {}
func (*SignTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{32} }

func (m *SignTransactionResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SendTransactionPassphraseRequest struct {
	// transaction struct
	Transaction *TransactionRequest `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
	// from account passphrase
	Passphrase string `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *SendTransactionPassphraseRequest) Reset()         { *m = SendTransactionPassphraseRequest{} }
func (m *SendTransactionPassphraseRequest) String() string { return proto.CompactTextString(m) }
func (*SendTransactionPassphraseRequest) ProtoMessage()    {}
func (*SendTransactionPassphraseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorApiRpc, []int{33}
}

func (m *SendTransactionPassphraseRequest) GetTransaction() *TransactionRequest {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *SendTransactionPassphraseRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type SendTransactionPassphraseResponse struct {
	// Hex string of transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *SendTransactionPassphraseResponse) Reset()         { *m = SendTransactionPassphraseResponse{} }
func (m *SendTransactionPassphraseResponse) String() string { return proto.CompactTextString(m) }
func (*SendTransactionPassphraseResponse) ProtoMessage()    {}
func (*SendTransactionPassphraseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorApiRpc, []int{34}
}

func (m *SendTransactionPassphraseResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type GasPriceResponse struct {
	GasPrice string `protobuf:"bytes,1,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
}

func (m *GasPriceResponse) Reset()                    { *m = GasPriceResponse{} }
func (m *GasPriceResponse) String() string            { return proto.CompactTextString(m) }
func (*GasPriceResponse) ProtoMessage()               {}
func (*GasPriceResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{35} }

func (m *GasPriceResponse) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

type EstimateGasResponse struct {
	EstimateGas string `protobuf:"bytes,1,opt,name=estimate_gas,json=estimateGas,proto3" json:"estimate_gas,omitempty"`
}

func (m *EstimateGasResponse) Reset()                    { *m = EstimateGasResponse{} }
func (m *EstimateGasResponse) String() string            { return proto.CompactTextString(m) }
func (*EstimateGasResponse) ProtoMessage()               {}
func (*EstimateGasResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{36} }

func (m *EstimateGasResponse) GetEstimateGas() string {
	if m != nil {
		return m.EstimateGas
	}
	return ""
}

type EventsResponse struct {
	Events []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *EventsResponse) Reset()                    { *m = EventsResponse{} }
func (m *EventsResponse) String() string            { return proto.CompactTextString(m) }
func (*EventsResponse) ProtoMessage()               {}
func (*EventsResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{37} }

func (m *EventsResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type Event struct {
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{38} }

func (m *Event) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Event) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "rpcpb.SubscribeRequest")
	proto.RegisterType((*ChangeNetworkIDRequest)(nil), "rpcpb.ChangeNetworkIDRequest")
	proto.RegisterType((*ChangeNetworkIDResponse)(nil), "rpcpb.ChangeNetworkIDResponse")
	proto.RegisterType((*SubscribeResponse)(nil), "rpcpb.SubscribeResponse")
	proto.RegisterType((*NonParamsRequest)(nil), "rpcpb.NonParamsRequest")
	proto.RegisterType((*NodeInfoResponse)(nil), "rpcpb.NodeInfoResponse")
	proto.RegisterType((*StatisticsNodeInfoResponse)(nil), "rpcpb.StatisticsNodeInfoResponse")
	proto.RegisterType((*RouteTable)(nil), "rpcpb.RouteTable")
	proto.RegisterType((*GetNebStateResponse)(nil), "rpcpb.GetNebStateResponse")
	proto.RegisterType((*AccountsResponse)(nil), "rpcpb.AccountsResponse")
	proto.RegisterType((*GetAccountStateRequest)(nil), "rpcpb.GetAccountStateRequest")
	proto.RegisterType((*GetAccountStateResponse)(nil), "rpcpb.GetAccountStateResponse")
	proto.RegisterType((*GetDynastyResponse)(nil), "rpcpb.GetDynastyResponse")
	proto.RegisterType((*GetDelegateVotersRequest)(nil), "rpcpb.GetDelegateVotersRequest")
	proto.RegisterType((*GetDelegateVotersResponse)(nil), "rpcpb.GetDelegateVotersResponse")
	proto.RegisterType((*TransactionRequest)(nil), "rpcpb.TransactionRequest")
	proto.RegisterType((*ContractRequest)(nil), "rpcpb.ContractRequest")
	proto.RegisterType((*CandidateRequest)(nil), "rpcpb.CandidateRequest")
	proto.RegisterType((*DelegateRequest)(nil), "rpcpb.DelegateRequest")
	proto.RegisterType((*SendRawTransactionRequest)(nil), "rpcpb.SendRawTransactionRequest")
	proto.RegisterType((*SendTransactionResponse)(nil), "rpcpb.SendTransactionResponse")
	proto.RegisterType((*GetBlockByHashRequest)(nil), "rpcpb.GetBlockByHashRequest")
	proto.RegisterType((*GetTransactionByHashRequest)(nil), "rpcpb.GetTransactionByHashRequest")
	proto.RegisterType((*BlockDumpRequest)(nil), "rpcpb.BlockDumpRequest")
	proto.RegisterType((*BlockDumpResponse)(nil), "rpcpb.BlockDumpResponse")
	proto.RegisterType((*TransactionReceiptResponse)(nil), "rpcpb.TransactionReceiptResponse")
	proto.RegisterType((*NewAccountRequest)(nil), "rpcpb.NewAccountRequest")
	proto.RegisterType((*NewAccountResponse)(nil), "rpcpb.NewAccountResponse")
	proto.RegisterType((*UnlockAccountRequest)(nil), "rpcpb.UnlockAccountRequest")
	proto.RegisterType((*UnlockAccountResponse)(nil), "rpcpb.UnlockAccountResponse")
	proto.RegisterType((*LockAccountRequest)(nil), "rpcpb.LockAccountRequest")
	proto.RegisterType((*LockAccountResponse)(nil), "rpcpb.LockAccountResponse")
	proto.RegisterType((*SignTransactionResponse)(nil), "rpcpb.SignTransactionResponse")
	proto.RegisterType((*SendTransactionPassphraseRequest)(nil), "rpcpb.SendTransactionPassphraseRequest")
	proto.RegisterType((*SendTransactionPassphraseResponse)(nil), "rpcpb.SendTransactionPassphraseResponse")
	proto.RegisterType((*GasPriceResponse)(nil), "rpcpb.GasPriceResponse")
	proto.RegisterType((*EstimateGasResponse)(nil), "rpcpb.EstimateGasResponse")
	proto.RegisterType((*EventsResponse)(nil), "rpcpb.EventsResponse")
	proto.RegisterType((*Event)(nil), "rpcpb.Event")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiService service

type ApiServiceClient interface {
	// Return the state of the neb.
	GetNebState(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GetNebStateResponse, error)
	// Return the p2p node info.
	NodeInfo(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error)
	// Return the dump info of blockchain.
	BlockDump(ctx context.Context, in *BlockDumpRequest, opts ...grpc.CallOption) (*BlockDumpResponse, error)
	// Accounts return account list.
	Accounts(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*AccountsResponse, error)
	// Return the state of the account.
	GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error)
	// Verify, sign, and send the transaction.
	SendTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	// Call smart contract.
	Call(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	// Submit the signed transaction.
	SendRawTransaction(ctx context.Context, in *SendRawTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	// Get block header info by the block hash.
	GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*corepb.Block, error)
	// Get transactionReceipt info by tansaction hash.
	GetTransactionReceipt(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*TransactionReceiptResponse, error)
	// Subscribe message
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error)
	// Get GasPrice
	GetGasPrice(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GasPriceResponse, error)
	// EstimateGas
	EstimateGas(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*EstimateGasResponse, error)
	GetEventsByHash(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*EventsResponse, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetNebState(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GetNebStateResponse, error) {
	out := new(GetNebStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetNebState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) NodeInfo(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	out := new(NodeInfoResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/NodeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BlockDump(ctx context.Context, in *BlockDumpRequest, opts ...grpc.CallOption) (*BlockDumpResponse, error) {
	out := new(BlockDumpResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/BlockDump", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Accounts(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*AccountsResponse, error) {
	out := new(AccountsResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/Accounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error) {
	out := new(GetAccountStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetAccountState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Call(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/Call", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendRawTransaction(ctx context.Context, in *SendRawTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/SendRawTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*corepb.Block, error) {
	out := new(corepb.Block)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetBlockByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTransactionReceipt(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*TransactionReceiptResponse, error) {
	out := new(TransactionReceiptResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetTransactionReceipt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ApiService_serviceDesc.Streams[0], c.cc, "/rpcpb.ApiService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type apiServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *apiServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) GetGasPrice(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GasPriceResponse, error) {
	out := new(GasPriceResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetGasPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) EstimateGas(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*EstimateGasResponse, error) {
	out := new(EstimateGasResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/EstimateGas", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetEventsByHash(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetEventsByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiService service

type ApiServiceServer interface {
	// Return the state of the neb.
	GetNebState(context.Context, *NonParamsRequest) (*GetNebStateResponse, error)
	// Return the p2p node info.
	NodeInfo(context.Context, *NonParamsRequest) (*NodeInfoResponse, error)
	// Return the dump info of blockchain.
	BlockDump(context.Context, *BlockDumpRequest) (*BlockDumpResponse, error)
	// Accounts return account list.
	Accounts(context.Context, *NonParamsRequest) (*AccountsResponse, error)
	// Return the state of the account.
	GetAccountState(context.Context, *GetAccountStateRequest) (*GetAccountStateResponse, error)
	// Verify, sign, and send the transaction.
	SendTransaction(context.Context, *TransactionRequest) (*SendTransactionResponse, error)
	// Call smart contract.
	Call(context.Context, *TransactionRequest) (*SendTransactionResponse, error)
	// Submit the signed transaction.
	SendRawTransaction(context.Context, *SendRawTransactionRequest) (*SendTransactionResponse, error)
	// Get block header info by the block hash.
	GetBlockByHash(context.Context, *GetBlockByHashRequest) (*corepb.Block, error)
	// Get transactionReceipt info by tansaction hash.
	GetTransactionReceipt(context.Context, *GetTransactionByHashRequest) (*TransactionReceiptResponse, error)
	// Subscribe message
	Subscribe(*SubscribeRequest, ApiService_SubscribeServer) error
	// Get GasPrice
	GetGasPrice(context.Context, *NonParamsRequest) (*GasPriceResponse, error)
	// EstimateGas
	EstimateGas(context.Context, *TransactionRequest) (*EstimateGasResponse, error)
	GetEventsByHash(context.Context, *GetTransactionByHashRequest) (*EventsResponse, error)
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_GetNebState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetNebState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetNebState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetNebState(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_NodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).NodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/NodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).NodeInfo(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BlockDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BlockDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/BlockDump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BlockDump(ctx, req.(*BlockDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/Accounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Accounts(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetAccountState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccountState(ctx, req.(*GetAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Call(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/SendRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendRawTransaction(ctx, req.(*SendRawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockByHash(ctx, req.(*GetBlockByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTransactionReceipt(ctx, req.(*GetTransactionByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).Subscribe(m, &apiServiceSubscribeServer{stream})
}

type ApiService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type apiServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *apiServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiService_GetGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetGasPrice(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_EstimateGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).EstimateGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/EstimateGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).EstimateGas(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetEventsByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetEventsByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetEventsByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetEventsByHash(ctx, req.(*GetTransactionByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNebState",
			Handler:    _ApiService_GetNebState_Handler,
		},
		{
			MethodName: "NodeInfo",
			Handler:    _ApiService_NodeInfo_Handler,
		},
		{
			MethodName: "BlockDump",
			Handler:    _ApiService_BlockDump_Handler,
		},
		{
			MethodName: "Accounts",
			Handler:    _ApiService_Accounts_Handler,
		},
		{
			MethodName: "GetAccountState",
			Handler:    _ApiService_GetAccountState_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _ApiService_SendTransaction_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _ApiService_Call_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _ApiService_SendRawTransaction_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _ApiService_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _ApiService_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "GetGasPrice",
			Handler:    _ApiService_GetGasPrice_Handler,
		},
		{
			MethodName: "EstimateGas",
			Handler:    _ApiService_EstimateGas_Handler,
		},
		{
			MethodName: "GetEventsByHash",
			Handler:    _ApiService_GetEventsByHash_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ApiService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api_rpc.proto",
}

// Client API for AdminService service

type AdminServiceClient interface {
	// NewAccount create a new account with passphrase
	NewAccount(ctx context.Context, in *NewAccountRequest, opts ...grpc.CallOption) (*NewAccountResponse, error)
	// UnlockAccount unlock account with passphrase
	UnlockAccount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*UnlockAccountResponse, error)
	// LockAccount lock account
	LockAccount(ctx context.Context, in *LockAccountRequest, opts ...grpc.CallOption) (*LockAccountResponse, error)
	// Sign sign transaction
	SignTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error)
	// SendTransactionWithPassphrase send transaction with passphrase
	SendTransactionWithPassphrase(ctx context.Context, in *SendTransactionPassphraseRequest, opts ...grpc.CallOption) (*SendTransactionPassphraseResponse, error)
	StatisticsNodeInfo(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*StatisticsNodeInfoResponse, error)
	GetDynasty(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GetDynastyResponse, error)
	GetDelegateVoters(ctx context.Context, in *GetDelegateVotersRequest, opts ...grpc.CallOption) (*GetDelegateVotersResponse, error)
	ChangeNetworkID(ctx context.Context, in *ChangeNetworkIDRequest, opts ...grpc.CallOption) (*ChangeNetworkIDResponse, error)
}

type adminServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminServiceClient(cc *grpc.ClientConn) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) NewAccount(ctx context.Context, in *NewAccountRequest, opts ...grpc.CallOption) (*NewAccountResponse, error) {
	out := new(NewAccountResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/NewAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UnlockAccount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*UnlockAccountResponse, error) {
	out := new(UnlockAccountResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/UnlockAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) LockAccount(ctx context.Context, in *LockAccountRequest, opts ...grpc.CallOption) (*LockAccountResponse, error) {
	out := new(LockAccountResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/LockAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SignTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error) {
	out := new(SignTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/SignTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SendTransactionWithPassphrase(ctx context.Context, in *SendTransactionPassphraseRequest, opts ...grpc.CallOption) (*SendTransactionPassphraseResponse, error) {
	out := new(SendTransactionPassphraseResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/SendTransactionWithPassphrase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) StatisticsNodeInfo(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*StatisticsNodeInfoResponse, error) {
	out := new(StatisticsNodeInfoResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/StatisticsNodeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDynasty(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GetDynastyResponse, error) {
	out := new(GetDynastyResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/GetDynasty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDelegateVoters(ctx context.Context, in *GetDelegateVotersRequest, opts ...grpc.CallOption) (*GetDelegateVotersResponse, error) {
	out := new(GetDelegateVotersResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/GetDelegateVoters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ChangeNetworkID(ctx context.Context, in *ChangeNetworkIDRequest, opts ...grpc.CallOption) (*ChangeNetworkIDResponse, error) {
	out := new(ChangeNetworkIDResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/ChangeNetworkID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminService service

type AdminServiceServer interface {
	// NewAccount create a new account with passphrase
	NewAccount(context.Context, *NewAccountRequest) (*NewAccountResponse, error)
	// UnlockAccount unlock account with passphrase
	UnlockAccount(context.Context, *UnlockAccountRequest) (*UnlockAccountResponse, error)
	// LockAccount lock account
	LockAccount(context.Context, *LockAccountRequest) (*LockAccountResponse, error)
	// Sign sign transaction
	SignTransaction(context.Context, *TransactionRequest) (*SignTransactionResponse, error)
	// SendTransactionWithPassphrase send transaction with passphrase
	SendTransactionWithPassphrase(context.Context, *SendTransactionPassphraseRequest) (*SendTransactionPassphraseResponse, error)
	StatisticsNodeInfo(context.Context, *NonParamsRequest) (*StatisticsNodeInfoResponse, error)
	GetDynasty(context.Context, *NonParamsRequest) (*GetDynastyResponse, error)
	GetDelegateVoters(context.Context, *GetDelegateVotersRequest) (*GetDelegateVotersResponse, error)
	ChangeNetworkID(context.Context, *ChangeNetworkIDRequest) (*ChangeNetworkIDResponse, error)
}

func RegisterAdminServiceServer(s *grpc.Server, srv AdminServiceServer) {
	s.RegisterService(&_AdminService_serviceDesc, srv)
}

func _AdminService_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).NewAccount(ctx, req.(*NewAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UnlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UnlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/UnlockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UnlockAccount(ctx, req.(*UnlockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_LockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).LockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/LockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).LockAccount(ctx, req.(*LockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SignTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SendTransactionWithPassphrase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionPassphraseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SendTransactionWithPassphrase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/SendTransactionWithPassphrase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SendTransactionWithPassphrase(ctx, req.(*SendTransactionPassphraseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_StatisticsNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).StatisticsNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/StatisticsNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).StatisticsNodeInfo(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDynasty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDynasty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/GetDynasty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDynasty(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDelegateVoters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateVotersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDelegateVoters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/GetDelegateVoters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDelegateVoters(ctx, req.(*GetDelegateVotersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ChangeNetworkID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeNetworkIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ChangeNetworkID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/ChangeNetworkID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ChangeNetworkID(ctx, req.(*ChangeNetworkIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewAccount",
			Handler:    _AdminService_NewAccount_Handler,
		},
		{
			MethodName: "UnlockAccount",
			Handler:    _AdminService_UnlockAccount_Handler,
		},
		{
			MethodName: "LockAccount",
			Handler:    _AdminService_LockAccount_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _AdminService_SignTransaction_Handler,
		},
		{
			MethodName: "SendTransactionWithPassphrase",
			Handler:    _AdminService_SendTransactionWithPassphrase_Handler,
		},
		{
			MethodName: "StatisticsNodeInfo",
			Handler:    _AdminService_StatisticsNodeInfo_Handler,
		},
		{
			MethodName: "GetDynasty",
			Handler:    _AdminService_GetDynasty_Handler,
		},
		{
			MethodName: "GetDelegateVoters",
			Handler:    _AdminService_GetDelegateVoters_Handler,
		},
		{
			MethodName: "ChangeNetworkID",
			Handler:    _AdminService_ChangeNetworkID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_rpc.proto",
}

func init() { proto.RegisterFile("api_rpc.proto", fileDescriptorApiRpc) }

var fileDescriptorApiRpc = []byte{
	// 1987 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xcd, 0x6e, 0x1b, 0xc9,
	0x11, 0x06, 0xa9, 0x3f, 0xb2, 0xa8, 0xdf, 0xb6, 0x25, 0x91, 0xb4, 0x24, 0xcb, 0xed, 0x0d, 0x96,
	0xab, 0xc0, 0xe2, 0x9a, 0x4e, 0xd6, 0x0b, 0xe7, 0x64, 0xcb, 0x86, 0x2c, 0xc0, 0x11, 0x84, 0x91,
	0xb3, 0x7b, 0x58, 0x2c, 0x88, 0xe6, 0x4c, 0x7b, 0x38, 0x30, 0x39, 0x33, 0x3b, 0xdd, 0x94, 0x56,
	0x0a, 0x90, 0x00, 0xb9, 0xe5, 0x9c, 0x37, 0xc8, 0x21, 0x40, 0x1e, 0x22, 0x87, 0x3c, 0x43, 0x9e,
	0x20, 0x40, 0x6e, 0x79, 0x89, 0xa0, 0x6b, 0xba, 0xe7, 0x9f, 0xab, 0x35, 0x72, 0x9b, 0xaa, 0xae,
	0xae, 0xaf, 0xba, 0xba, 0xfe, 0xa6, 0x61, 0x8d, 0x85, 0xde, 0x30, 0x0a, 0xed, 0xe3, 0x30, 0x0a,
	0x64, 0x40, 0x96, 0xa2, 0xd0, 0x0e, 0x47, 0xdd, 0x3d, 0x37, 0x08, 0xdc, 0x09, 0xef, 0xb3, 0xd0,
	0xeb, 0x33, 0xdf, 0x0f, 0x24, 0x93, 0x5e, 0xe0, 0x8b, 0x58, 0xa8, 0xfb, 0xcc, 0xf5, 0xe4, 0x78,
	0x36, 0x3a, 0xb6, 0x83, 0x69, 0xdf, 0xe7, 0xa3, 0xd9, 0x84, 0x09, 0x2f, 0xe8, 0xbb, 0xc1, 0x13,
	0x4d, 0xf4, 0xed, 0x20, 0xe2, 0xfd, 0x70, 0xd4, 0x1f, 0x4d, 0x02, 0xfb, 0x63, 0xbc, 0x89, 0xf6,
	0x60, 0xf3, 0x72, 0x36, 0x12, 0x76, 0xe4, 0x8d, 0xb8, 0xc5, 0x7f, 0x98, 0x71, 0x21, 0xc9, 0x7d,
	0x58, 0x92, 0x41, 0xe8, 0xd9, 0xed, 0xda, 0xe1, 0x42, 0xaf, 0x69, 0xc5, 0x04, 0x7d, 0x0e, 0x3b,
	0x27, 0x63, 0xe6, 0xbb, 0xfc, 0x9c, 0xcb, 0xeb, 0x20, 0xfa, 0x78, 0xf6, 0xda, 0xc8, 0xef, 0x03,
	0xf8, 0x31, 0x6f, 0xe8, 0x39, 0xed, 0xda, 0x61, 0xad, 0xb7, 0x66, 0x35, 0x35, 0xe7, 0xcc, 0xa1,
	0x4f, 0x61, 0xb7, 0xb4, 0x51, 0x84, 0x81, 0x2f, 0x38, 0xd9, 0x81, 0xe5, 0x88, 0x8b, 0xd9, 0x44,
	0xe2, 0xae, 0x86, 0xa5, 0x29, 0xfa, 0x0a, 0xb6, 0x32, 0x56, 0x69, 0xe1, 0x0e, 0x34, 0xa6, 0xc2,
	0x1d, 0xca, 0x9b, 0x90, 0xa3, 0x78, 0xd3, 0x5a, 0x99, 0x0a, 0xf7, 0xfd, 0x4d, 0xc8, 0x09, 0x81,
	0x45, 0x87, 0x49, 0xd6, 0xae, 0x23, 0x1b, 0xbf, 0x29, 0x81, 0xcd, 0xf3, 0xc0, 0xbf, 0x60, 0x11,
	0x9b, 0x0a, 0x6d, 0x29, 0xfd, 0xfb, 0x82, 0x62, 0x3a, 0xfc, 0xcc, 0xff, 0x10, 0x24, 0x7a, 0xd7,
	0xa1, 0xae, 0xcd, 0x6e, 0x5a, 0x75, 0xcf, 0x51, 0x38, 0xf6, 0x98, 0x79, 0xbe, 0x3a, 0x4c, 0x1d,
	0x0f, 0xb3, 0x82, 0xf4, 0x99, 0x43, 0xda, 0xb0, 0x72, 0xc5, 0x23, 0xe1, 0x05, 0x7e, 0x7b, 0x21,
	0x5e, 0xd1, 0xa4, 0xf2, 0x41, 0xc8, 0x79, 0x34, 0xb4, 0x83, 0x99, 0x2f, 0xdb, 0x8b, 0xb1, 0x0f,
	0x14, 0xe7, 0x44, 0x31, 0x08, 0x85, 0x55, 0x71, 0xe3, 0xdb, 0xe3, 0x28, 0xf0, 0xbd, 0x5b, 0xee,
	0xb4, 0x97, 0xf0, 0xb8, 0x39, 0x1e, 0x79, 0x08, 0xad, 0xd1, 0xcc, 0xfe, 0xc8, 0xe5, 0x50, 0x78,
	0xb7, 0xbc, 0xbd, 0x7c, 0x58, 0xeb, 0x2d, 0x59, 0x10, 0xb3, 0x2e, 0xbd, 0x5b, 0x4e, 0x7a, 0xb0,
	0x19, 0xf1, 0x09, 0xbb, 0x19, 0xda, 0xcc, 0x1e, 0xf3, 0x58, 0x6a, 0x05, 0xa5, 0xd6, 0x91, 0x7f,
	0xa2, 0xd8, 0x28, 0x79, 0x04, 0x5b, 0x42, 0x46, 0x9c, 0x4d, 0x87, 0x42, 0x06, 0x91, 0x16, 0x6d,
	0xa0, 0xe8, 0x46, 0xbc, 0x70, 0xa9, 0xf8, 0x28, 0xfb, 0x1c, 0xda, 0x39, 0x59, 0xfe, 0xa3, 0xe4,
	0xbe, 0x13, 0x6f, 0x69, 0xe2, 0x96, 0xed, 0xcc, 0x96, 0x37, 0xb8, 0x8a, 0x1b, 0xbf, 0x80, 0x4d,
	0x8c, 0x21, 0x3b, 0x98, 0x0c, 0x8d, 0x57, 0x00, 0xbd, 0xb8, 0x61, 0xf8, 0xdf, 0x68, 0xef, 0x0c,
	0xa0, 0x15, 0x05, 0x33, 0xc9, 0x87, 0x92, 0x8d, 0x26, 0xbc, 0xdd, 0x3a, 0x5c, 0xe8, 0xb5, 0x06,
	0x5b, 0xc7, 0x18, 0xd5, 0xc7, 0x96, 0x5a, 0x79, 0xaf, 0x16, 0x2c, 0x88, 0x92, 0x6f, 0xfa, 0x07,
	0xe8, 0x5e, 0xaa, 0x00, 0x17, 0xd2, 0xb3, 0x45, 0xe9, 0xd2, 0x76, 0x60, 0x19, 0x79, 0xaf, 0xf5,
	0xc5, 0x69, 0x4a, 0xf1, 0xdf, 0x72, 0xcf, 0x1d, 0x4b, 0xbc, 0xba, 0x45, 0x4b, 0x53, 0x2a, 0x42,
	0xde, 0x32, 0x31, 0xc6, 0x6b, 0x6b, 0x5a, 0xf8, 0x4d, 0xf6, 0xa0, 0x79, 0x61, 0x6e, 0xc8, 0x5c,
	0x59, 0xc2, 0xa0, 0x5f, 0x01, 0xa4, 0x96, 0x95, 0x82, 0xa4, 0x0d, 0x2b, 0xcc, 0x71, 0x22, 0x2e,
	0x44, 0xbb, 0x8e, 0x59, 0x62, 0x48, 0xfa, 0xdf, 0x1a, 0xdc, 0x3b, 0xe5, 0xf2, 0x9c, 0x8f, 0x94,
	0xf9, 0xb9, 0xf0, 0x4d, 0xc2, 0xaa, 0x96, 0x0f, 0x2b, 0x02, 0x8b, 0x92, 0x79, 0x13, 0x13, 0xbe,
	0xea, 0x9b, 0x74, 0xa1, 0x61, 0x07, 0x9e, 0x3f, 0x62, 0x82, 0x6b, 0xa3, 0x13, 0xfa, 0xae, 0x60,
	0x7b, 0x00, 0x4d, 0x4f, 0x0c, 0xa7, 0x9e, 0xef, 0xf9, 0xae, 0x8e, 0xb4, 0x86, 0x27, 0x7e, 0x8b,
	0x74, 0xe5, 0xad, 0x2d, 0x57, 0xdf, 0x5a, 0x31, 0x68, 0x57, 0xca, 0x41, 0x4b, 0xbf, 0x84, 0xcd,
	0x97, 0x36, 0xda, 0x21, 0x92, 0x93, 0xee, 0x41, 0x53, 0x3b, 0x83, 0x0b, 0x5d, 0x43, 0x52, 0x06,
	0x7d, 0x0b, 0x3b, 0xa7, 0x5c, 0xea, 0x4d, 0xda, 0x45, 0x71, 0x1d, 0xc9, 0xf8, 0x54, 0xe7, 0xb7,
	0x26, 0x55, 0x45, 0xc2, 0xa2, 0xa5, 0x3d, 0x14, 0x13, 0xf4, 0x0c, 0x76, 0x4b, 0x9a, 0xb4, 0x09,
	0x6d, 0x58, 0x19, 0xb1, 0x09, 0xf3, 0xed, 0xa4, 0x54, 0x68, 0x52, 0xa9, 0xf2, 0x03, 0xc5, 0xd7,
	0xaa, 0x90, 0xa0, 0xbf, 0x02, 0x72, 0xca, 0xe5, 0xeb, 0x1b, 0x9f, 0x09, 0x79, 0x93, 0x68, 0x39,
	0x00, 0x70, 0xf8, 0x84, 0xbb, 0x4c, 0xf2, 0xe4, 0x24, 0x19, 0x0e, 0xfd, 0x1a, 0xda, 0x6a, 0x97,
	0x66, 0x7c, 0x13, 0x48, 0x1e, 0x99, 0x52, 0xa3, 0x9c, 0x90, 0x48, 0x6a, 0x1b, 0x52, 0x06, 0x7d,
	0x06, 0x9d, 0x8a, 0x9d, 0x69, 0x6c, 0x5f, 0x21, 0x47, 0x43, 0x6a, 0x8a, 0xfe, 0xa3, 0x0e, 0xe4,
	0x7d, 0xc4, 0x7c, 0xc1, 0x6c, 0x55, 0xf7, 0x0d, 0x12, 0x81, 0xc5, 0x0f, 0x51, 0x30, 0xd5, 0x20,
	0xf8, 0xad, 0xc2, 0x55, 0x06, 0xfa, 0x88, 0x75, 0x19, 0xa8, 0x53, 0x5f, 0xb1, 0xc9, 0xcc, 0x84,
	0x52, 0x4c, 0xa4, 0xbe, 0x58, 0xc4, 0x5c, 0x89, 0x09, 0x15, 0x3e, 0x2e, 0x13, 0xc3, 0x30, 0xf2,
	0x6c, 0x8e, 0xe1, 0xd3, 0xb4, 0x1a, 0x2e, 0x13, 0x17, 0x8a, 0x36, 0x8b, 0x13, 0x6f, 0xea, 0x49,
	0x1d, 0x37, 0x6a, 0xf1, 0x9d, 0xa2, 0xc9, 0x40, 0xc5, 0xac, 0x2f, 0x23, 0x66, 0x4b, 0x0c, 0x96,
	0xd6, 0x60, 0x47, 0xe7, 0xf8, 0x89, 0x66, 0x6b, 0x9b, 0xad, 0x44, 0x8e, 0xfc, 0x1a, 0x9a, 0x36,
	0xf3, 0x1d, 0xcf, 0x61, 0x32, 0x2e, 0x51, 0xad, 0xc1, 0xae, 0xd9, 0x64, 0xf8, 0x66, 0x57, 0x2a,
	0xa9, 0xa0, 0x8c, 0x37, 0xb1, 0x4a, 0xa5, 0x50, 0xc6, 0xa9, 0x09, 0x94, 0x91, 0xa3, 0xb7, 0xb0,
	0x51, 0xb0, 0x43, 0xb9, 0x5a, 0x04, 0xb3, 0x28, 0x09, 0x13, 0x4d, 0xa9, 0x5a, 0x1c, 0x7f, 0xc5,
	0xed, 0x26, 0x76, 0x24, 0xc4, 0x2c, 0xec, 0x38, 0x5d, 0x68, 0x7c, 0x98, 0xf9, 0x78, 0x0f, 0x26,
	0x3d, 0x0d, 0xad, 0x2e, 0x84, 0x45, 0xae, 0x40, 0xaf, 0x36, 0x2d, 0xfc, 0xa6, 0x47, 0xb0, 0x59,
	0x3c, 0x8e, 0x02, 0x8f, 0x6f, 0xd2, 0x80, 0xc7, 0x14, 0x3d, 0x85, 0x8d, 0xc2, 0x21, 0xe6, 0x89,
	0xe6, 0xa3, 0xac, 0x5e, 0x8c, 0xb2, 0x3e, 0x74, 0x2e, 0xb9, 0xef, 0x58, 0xec, 0xba, 0x3a, 0x6c,
	0xb0, 0x67, 0x2a, 0x85, 0xab, 0xba, 0x67, 0x4a, 0xd8, 0x55, 0x1b, 0x72, 0xd2, 0x69, 0x50, 0xca,
	0x1f, 0xc7, 0xaa, 0x84, 0x6a, 0x0b, 0x62, 0x4a, 0xd5, 0x13, 0x73, 0x97, 0xc3, 0xb4, 0x22, 0x62,
	0x3d, 0x31, 0xfc, 0x97, 0x3a, 0x8b, 0xd3, 0x6e, 0xbf, 0x90, 0xeb, 0xf6, 0xbf, 0x84, 0xed, 0x53,
	0x2e, 0x5f, 0xa9, 0x9c, 0x7e, 0x75, 0xa3, 0x2a, 0x73, 0xc6, 0xc4, 0x0c, 0x22, 0x7e, 0xd3, 0xa7,
	0xf0, 0xe0, 0x94, 0xcb, 0x8c, 0x85, 0x77, 0x6f, 0xe9, 0xc1, 0x26, 0x2a, 0x7f, 0x3d, 0x9b, 0x86,
	0x99, 0x19, 0x27, 0xae, 0x9e, 0x35, 0x6c, 0x71, 0x31, 0x41, 0x3f, 0x87, 0xad, 0x8c, 0xa4, 0x3e,
	0x79, 0xd6, 0x51, 0x66, 0xb8, 0xf8, 0x77, 0x0d, 0xba, 0x39, 0x2f, 0xd9, 0xdc, 0x0b, 0x65, 0x76,
	0x4b, 0xd1, 0x8a, 0x24, 0x4d, 0xeb, 0xa5, 0x34, 0x5d, 0xc8, 0xa6, 0x69, 0x45, 0x42, 0xee, 0x41,
	0x53, 0x7a, 0x53, 0x2e, 0x24, 0x9b, 0x86, 0x98, 0x90, 0x0b, 0x56, 0xca, 0x48, 0xcc, 0x5b, 0x4e,
	0xcd, 0x53, 0xe5, 0x4f, 0xf7, 0x16, 0xcc, 0xc3, 0x4c, 0xab, 0xa9, 0xba, 0xae, 0x46, 0xe5, 0x75,
	0xd1, 0x67, 0xb0, 0x75, 0xce, 0xaf, 0x75, 0x79, 0x35, 0x7e, 0x3b, 0x00, 0x08, 0x99, 0x10, 0xe1,
	0x38, 0x52, 0x8d, 0x29, 0x3e, 0x5f, 0x86, 0x43, 0x8f, 0x81, 0x64, 0x37, 0xa5, 0xe5, 0xb8, 0xba,
	0xb2, 0xd3, 0x0b, 0xb8, 0xff, 0x3b, 0x5f, 0xb9, 0xbc, 0x80, 0x33, 0xbf, 0x17, 0xe4, 0x2d, 0xa8,
	0x97, 0x2c, 0xe8, 0xc3, 0x76, 0x41, 0xe3, 0x1d, 0xc3, 0xe6, 0x31, 0x90, 0x77, 0x9f, 0x60, 0x00,
	0x7d, 0x02, 0xf7, 0xde, 0x7d, 0x82, 0xfa, 0x27, 0xb0, 0x7b, 0xe9, 0xb9, 0x7e, 0x55, 0x4e, 0x55,
	0xa5, 0xe0, 0x1f, 0xe1, 0xb0, 0x90, 0x82, 0x17, 0xc9, 0xd9, 0x8c, 0x6d, 0xbf, 0x81, 0x96, 0x4c,
	0xd7, 0x71, 0x7b, 0x6b, 0xd0, 0xd1, 0xf5, 0xaf, 0x9c, 0xea, 0x56, 0x56, 0xfa, 0x4e, 0xff, 0x3d,
	0x87, 0x47, 0x3f, 0x61, 0xc0, 0xfc, 0x00, 0xa7, 0x7d, 0xd8, 0x3c, 0xd5, 0x6d, 0x22, 0x91, 0xcb,
	0xf5, 0x92, 0x5a, 0xbe, 0x97, 0xd0, 0xaf, 0xe1, 0xde, 0x1b, 0x21, 0xbd, 0x29, 0x93, 0xfc, 0x94,
	0xa5, 0xed, 0xef, 0x11, 0xac, 0x72, 0xcd, 0x1e, 0xba, 0xcc, 0xb8, 0xbf, 0xc5, 0x53, 0x51, 0xfa,
	0x15, 0xac, 0xbf, 0xb9, 0xe2, 0xd9, 0x99, 0xe3, 0x33, 0x58, 0xe6, 0xc8, 0xc1, 0x9e, 0xd9, 0x1a,
	0xac, 0x6a, 0x6f, 0xa0, 0x98, 0xa5, 0xd7, 0xe8, 0x53, 0x58, 0x42, 0x46, 0xf6, 0x17, 0xa7, 0x96,
	0xfc, 0xe2, 0x54, 0xfd, 0x46, 0x0c, 0xfe, 0xd9, 0x02, 0x78, 0x19, 0x7a, 0x97, 0x3c, 0xba, 0x52,
	0xfd, 0xef, 0x7b, 0x68, 0x65, 0x86, 0x3b, 0x62, 0x5a, 0x55, 0xf1, 0x4f, 0xa3, 0xdb, 0xd5, 0x0b,
	0x15, 0x93, 0x20, 0xed, 0xfc, 0xe9, 0x5f, 0xff, 0xf9, 0x4b, 0xfd, 0x1e, 0xd9, 0xea, 0x5f, 0x3d,
	0xed, 0xcf, 0x04, 0x8f, 0xd4, 0xef, 0x9a, 0x40, 0x7d, 0xdf, 0x42, 0xc3, 0x8c, 0xba, 0xf3, 0x75,
	0xa7, 0x0b, 0xf9, 0xa1, 0xb8, 0x4a, 0x71, 0xe0, 0x70, 0x4f, 0x29, 0xfb, 0x1e, 0x9a, 0x49, 0x65,
	0x4b, 0x34, 0x17, 0xab, 0x62, 0xb7, 0x5d, 0x5e, 0xd0, 0xaa, 0xf7, 0x51, 0xf5, 0x2e, 0x25, 0x89,
	0x6a, 0x9c, 0xc1, 0x9c, 0xd9, 0x34, 0x7c, 0x51, 0x3b, 0x52, 0x76, 0x9b, 0x31, 0xf0, 0x6e, 0xbb,
	0x8b, 0x03, 0x63, 0x85, 0xdd, 0xcc, 0x28, 0x8b, 0x60, 0xa3, 0x30, 0xe3, 0x91, 0xfd, 0xd4, 0xb5,
	0x15, 0x53, 0x64, 0xf7, 0x60, 0xde, 0xb2, 0x06, 0x3b, 0x44, 0xb0, 0x2e, 0xdd, 0x2e, 0x81, 0x29,
	0x31, 0x75, 0x98, 0x29, 0x6c, 0x14, 0x32, 0x80, 0xcc, 0x4f, 0xae, 0x04, 0x6f, 0x4e, 0xe3, 0xa4,
	0x0f, 0x11, 0xaf, 0x43, 0xef, 0x27, 0x78, 0x99, 0x6c, 0x54, 0x70, 0xdf, 0xc1, 0xe2, 0x09, 0x9b,
	0x4c, 0xfe, 0x1f, 0x8c, 0x36, 0x62, 0x10, 0xba, 0x96, 0x60, 0xd8, 0x6c, 0x32, 0x51, 0xca, 0x6f,
	0x81, 0x94, 0x47, 0x00, 0x72, 0x98, 0xd1, 0x57, 0x39, 0x1d, 0xdc, 0x89, 0x48, 0x11, 0x71, 0x8f,
	0xee, 0x26, 0x88, 0x11, 0xbb, 0x2e, 0x1c, 0x8c, 0xc1, 0x7a, 0xbe, 0xaf, 0x93, 0xbd, 0xf4, 0x6e,
	0xca, 0xed, 0xbe, 0xbb, 0x76, 0x6c, 0x07, 0x11, 0x37, 0xe1, 0x57, 0x01, 0xe1, 0xe6, 0xb6, 0x29,
	0x88, 0x3f, 0xd7, 0x70, 0x76, 0x28, 0xb7, 0x62, 0x42, 0x53, 0xa8, 0x79, 0xc3, 0x42, 0xf7, 0x51,
	0x95, 0xc7, 0x73, 0x9d, 0x9c, 0x7e, 0x81, 0x46, 0x3c, 0xa6, 0x07, 0x59, 0x23, 0xca, 0xf2, 0xca,
	0x96, 0x21, 0x34, 0x93, 0x47, 0x8b, 0x24, 0x09, 0x8a, 0x8f, 0x2b, 0x49, 0x8a, 0x95, 0xde, 0x37,
	0x2a, 0x52, 0x4c, 0x18, 0x99, 0x17, 0xb5, 0xa3, 0x2f, 0x6b, 0xba, 0xf6, 0x98, 0x1a, 0x7b, 0x77,
	0x9e, 0x15, 0xab, 0x31, 0xdd, 0x43, 0x84, 0x1d, 0x72, 0x3f, 0x7b, 0x98, 0x44, 0x1f, 0x87, 0x56,
	0xa6, 0x1c, 0xff, 0x54, 0x38, 0x9a, 0xe2, 0x56, 0x51, 0xbd, 0x2b, 0xc2, 0x3d, 0x53, 0xb8, 0x95,
	0x9b, 0x7e, 0xc0, 0x8c, 0x8e, 0xcb, 0xb7, 0x0e, 0x8b, 0x9f, 0x73, 0x57, 0xdb, 0xd9, 0x82, 0x9e,
	0xc2, 0x3d, 0x46, 0xb8, 0x7d, 0xda, 0xce, 0x1e, 0x29, 0xab, 0xfc, 0x45, 0xed, 0x68, 0xf0, 0xb7,
	0x06, 0xac, 0xbe, 0x74, 0xa6, 0x9e, 0x6f, 0xaa, 0xb8, 0x0d, 0x90, 0x4e, 0x29, 0xc4, 0x5c, 0x49,
	0x69, 0xda, 0xe9, 0x76, 0x2a, 0x56, 0xaa, 0xca, 0x08, 0x53, 0xca, 0x4d, 0x1d, 0xe9, 0xfb, 0xfc,
	0x5a, 0x1d, 0x34, 0x80, 0xb5, 0xdc, 0x20, 0x42, 0x1e, 0x68, 0x6d, 0x55, 0x03, 0x4f, 0x77, 0xaf,
	0x7a, 0xb1, 0xea, 0x98, 0x79, 0xb4, 0x19, 0x6e, 0x50, 0x80, 0x2e, 0xb4, 0x32, 0x83, 0x49, 0x72,
	0x81, 0xe5, 0xe1, 0x26, 0xb9, 0xc0, 0x8a, 0x39, 0x86, 0x3e, 0x42, 0xa8, 0x07, 0x74, 0xa7, 0x0c,
	0x95, 0x02, 0x6d, 0x14, 0x46, 0x9a, 0x9f, 0x55, 0xbc, 0xaa, 0xa7, 0x20, 0x53, 0xfd, 0xe9, 0x7a,
	0x0a, 0x28, 0x3c, 0x17, 0x2b, 0xc8, 0x5f, 0x6b, 0xb0, 0x5f, 0xa8, 0x40, 0xdf, 0x7a, 0x72, 0x9c,
	0x0e, 0x24, 0xe4, 0xf3, 0xea, 0x3a, 0x55, 0x9a, 0x99, 0xba, 0xbd, 0xbb, 0x05, 0xb5, 0x3d, 0xc7,
	0x68, 0x4f, 0x8f, 0x3e, 0x4e, 0xed, 0x91, 0xf3, 0xf0, 0x95, 0x91, 0xd7, 0x40, 0xca, 0x0f, 0x55,
	0xf3, 0xb3, 0xd3, 0x14, 0x9d, 0xf9, 0x8f, 0x5b, 0xf4, 0x17, 0x68, 0xc1, 0x43, 0xb2, 0x9f, 0xf1,
	0x48, 0x22, 0x8d, 0x3d, 0x1d, 0x21, 0xbe, 0x03, 0x48, 0x1f, 0x2d, 0xe6, 0x03, 0x76, 0xd2, 0xec,
	0x2a, 0x3c, 0x70, 0xe4, 0x1b, 0x6f, 0x0c, 0xe4, 0x68, 0x75, 0xbf, 0x87, 0xad, 0xd2, 0x0b, 0x05,
	0x79, 0x98, 0x51, 0x55, 0xf5, 0xea, 0xd1, 0x3d, 0x9c, 0x2f, 0x30, 0x3f, 0x92, 0x9d, 0x9c, 0xa4,
	0x72, 0xe9, 0x15, 0x6c, 0x14, 0x9e, 0x8c, 0x93, 0xae, 0x5f, 0xfd, 0x06, 0x9d, 0x04, 0xd9, 0x9c,
	0x97, 0x66, 0xfa, 0x19, 0xc2, 0x1e, 0xd0, 0x4e, 0x0a, 0x6b, 0xe7, 0x45, 0x5f, 0xd4, 0x8e, 0x46,
	0xcb, 0xf8, 0x04, 0xf6, 0xec, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xed, 0x9b, 0xa1, 0xe3, 0x7f,
	0x17, 0x00, 0x00,
}
