// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api_rpc.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	api_rpc.proto

It has these top-level messages:
	GetNebStateRequest
	NodeInfoRequest
	NodeInfoResponse
	StatisticsNodeInfoResponse
	RouteTable
	GetNebStateResponse
	AccountsRequest
	AccountsResponse
	GetAccountStateRequest
	GetAccountStateResponse
	SendTransactionRequest
	CallRequest
	SendRawTransactionRequest
	SendTransactionResponse
	GetBlockByHashRequest
	GetTransactionByHashRequest
	BlockDumpRequest
	BlockDumpResponse
	TransactionReceiptResponse
*/
package rpcpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import corepb "github.com/nebulasio/go-nebulas/core/pb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Request message of GetNebState rpc.
type GetNebStateRequest struct {
}

func (m *GetNebStateRequest) Reset()                    { *m = GetNebStateRequest{} }
func (m *GetNebStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNebStateRequest) ProtoMessage()               {}
func (*GetNebStateRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{0} }

// Request message of NodeInfo rpc.
type NodeInfoRequest struct {
}

func (m *NodeInfoRequest) Reset()                    { *m = NodeInfoRequest{} }
func (m *NodeInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeInfoRequest) ProtoMessage()               {}
func (*NodeInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{1} }

// Response message of node info.
type NodeInfoResponse struct {
	// the node ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the block chainID.
	ChainId uint32 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// the node version.
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// Number of peers currenly connected.
	PeerCount int32 `protobuf:"varint,4,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
	// the node synchronized status.
	Synchronized bool `protobuf:"varint,5,opt,name=synchronized,proto3" json:"synchronized,omitempty"`
	// the node route table bucket size.
	BucketSize int32 `protobuf:"varint,6,opt,name=bucket_size,json=bucketSize,proto3" json:"bucket_size,omitempty"`
	// the node relay cache size.
	RelayCacheSize int32 `protobuf:"varint,7,opt,name=relay_cache_size,json=relayCacheSize,proto3" json:"relay_cache_size,omitempty"`
	// the node stream store size.
	StreamStoreSize int32 `protobuf:"varint,8,opt,name=stream_store_size,json=streamStoreSize,proto3" json:"stream_store_size,omitempty"`
	// the node stream store extend size.
	StreamStoreExtendSize int32 `protobuf:"varint,9,opt,name=stream_store_extend_size,json=streamStoreExtendSize,proto3" json:"stream_store_extend_size,omitempty"`
	// the network protocol version.
	ProtocolVersion string        `protobuf:"bytes,10,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	RouteTable      []*RouteTable `protobuf:"bytes,11,rep,name=route_table,json=routeTable" json:"route_table,omitempty"`
}

func (m *NodeInfoResponse) Reset()                    { *m = NodeInfoResponse{} }
func (m *NodeInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeInfoResponse) ProtoMessage()               {}
func (*NodeInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{2} }

func (m *NodeInfoResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeInfoResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *NodeInfoResponse) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *NodeInfoResponse) GetPeerCount() int32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

func (m *NodeInfoResponse) GetSynchronized() bool {
	if m != nil {
		return m.Synchronized
	}
	return false
}

func (m *NodeInfoResponse) GetBucketSize() int32 {
	if m != nil {
		return m.BucketSize
	}
	return 0
}

func (m *NodeInfoResponse) GetRelayCacheSize() int32 {
	if m != nil {
		return m.RelayCacheSize
	}
	return 0
}

func (m *NodeInfoResponse) GetStreamStoreSize() int32 {
	if m != nil {
		return m.StreamStoreSize
	}
	return 0
}

func (m *NodeInfoResponse) GetStreamStoreExtendSize() int32 {
	if m != nil {
		return m.StreamStoreExtendSize
	}
	return 0
}

func (m *NodeInfoResponse) GetProtocolVersion() string {
	if m != nil {
		return m.ProtocolVersion
	}
	return ""
}

func (m *NodeInfoResponse) GetRouteTable() []*RouteTable {
	if m != nil {
		return m.RouteTable
	}
	return nil
}

type StatisticsNodeInfoResponse struct {
	NodeID    string `protobuf:"bytes,1,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	Height    uint64 `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	Hash      string `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	PeerCount uint32 `protobuf:"varint,4,opt,name=PeerCount,proto3" json:"PeerCount,omitempty"`
}

func (m *StatisticsNodeInfoResponse) Reset()                    { *m = StatisticsNodeInfoResponse{} }
func (m *StatisticsNodeInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*StatisticsNodeInfoResponse) ProtoMessage()               {}
func (*StatisticsNodeInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{3} }

func (m *StatisticsNodeInfoResponse) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *StatisticsNodeInfoResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StatisticsNodeInfoResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *StatisticsNodeInfoResponse) GetPeerCount() uint32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

type RouteTable struct {
	Id      string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address []string `protobuf:"bytes,2,rep,name=address" json:"address,omitempty"`
}

func (m *RouteTable) Reset()                    { *m = RouteTable{} }
func (m *RouteTable) String() string            { return proto.CompactTextString(m) }
func (*RouteTable) ProtoMessage()               {}
func (*RouteTable) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{4} }

func (m *RouteTable) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RouteTable) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

// Response message of GetNebState rpc.
type GetNebStateResponse struct {
	// Block chain id
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Current neb tail hash
	Tail string `protobuf:"bytes,2,opt,name=tail,proto3" json:"tail,omitempty"`
	// Neb coinbase
	Coinbase string `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Number of peers currenly connected
	PeerCount uint32 `protobuf:"varint,4,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
	// Neb mine status, minging is true ,otherwise false
	IsMining bool `protobuf:"varint,5,opt,name=is_mining,json=isMining,proto3" json:"is_mining,omitempty"`
	// The current neb protocol version.
	ProtocolVersion string `protobuf:"bytes,6,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	// The peer sync status.
	Synchronized bool `protobuf:"varint,7,opt,name=synchronized,proto3" json:"synchronized,omitempty"`
}

func (m *GetNebStateResponse) Reset()                    { *m = GetNebStateResponse{} }
func (m *GetNebStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNebStateResponse) ProtoMessage()               {}
func (*GetNebStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{5} }

func (m *GetNebStateResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GetNebStateResponse) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *GetNebStateResponse) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *GetNebStateResponse) GetPeerCount() uint32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

func (m *GetNebStateResponse) GetIsMining() bool {
	if m != nil {
		return m.IsMining
	}
	return false
}

func (m *GetNebStateResponse) GetProtocolVersion() string {
	if m != nil {
		return m.ProtocolVersion
	}
	return ""
}

func (m *GetNebStateResponse) GetSynchronized() bool {
	if m != nil {
		return m.Synchronized
	}
	return false
}

// Request message of Accounts rpc.
type AccountsRequest struct {
}

func (m *AccountsRequest) Reset()                    { *m = AccountsRequest{} }
func (m *AccountsRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountsRequest) ProtoMessage()               {}
func (*AccountsRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{6} }

// Response message of Accounts rpc.
type AccountsResponse struct {
	// Account list
	Addresses []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *AccountsResponse) Reset()                    { *m = AccountsResponse{} }
func (m *AccountsResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountsResponse) ProtoMessage()               {}
func (*AccountsResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{7} }

func (m *AccountsResponse) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// Request message of GetAccountState rpc.
type GetAccountStateRequest struct {
	// Hex string of the account addresss.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Hex string block number, or one of "latest", "earliest" or "pending". If not specified, use "latest".
	Block string `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *GetAccountStateRequest) Reset()                    { *m = GetAccountStateRequest{} }
func (m *GetAccountStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateRequest) ProtoMessage()               {}
func (*GetAccountStateRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{8} }

func (m *GetAccountStateRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAccountStateRequest) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

// Response message of GetAccountState rpc.
type GetAccountStateResponse struct {
	// Current balance in unit of 1/(10^18) nas.
	Balance string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// Current transaction count.
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *GetAccountStateResponse) Reset()                    { *m = GetAccountStateResponse{} }
func (m *GetAccountStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateResponse) ProtoMessage()               {}
func (*GetAccountStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{9} }

func (m *GetAccountStateResponse) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *GetAccountStateResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// Request message of SendTransaction rpc.
type SendTransactionRequest struct {
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// contract source code.
	Source string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	// the params of contract.
	Args string `protobuf:"bytes,6,opt,name=args,proto3" json:"args,omitempty"`
	// gasPrice sending with this transaction.
	GasPrice string `protobuf:"bytes,7,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// gasLimit sending with this transaction.
	GasLimit string `protobuf:"bytes,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
}

func (m *SendTransactionRequest) Reset()                    { *m = SendTransactionRequest{} }
func (m *SendTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionRequest) ProtoMessage()               {}
func (*SendTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{10} }

func (m *SendTransactionRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *SendTransactionRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *SendTransactionRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SendTransactionRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SendTransactionRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SendTransactionRequest) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *SendTransactionRequest) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func (m *SendTransactionRequest) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

type CallRequest struct {
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// call contract function name
	Function string `protobuf:"bytes,4,opt,name=function,proto3" json:"function,omitempty"`
	// the params of contract.
	Args string `protobuf:"bytes,5,opt,name=args,proto3" json:"args,omitempty"`
	// gasPrice sending with this transaction.
	GasPrice string `protobuf:"bytes,6,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// gasLimit sending with this transaction.
	GasLimit string `protobuf:"bytes,7,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
}

func (m *CallRequest) Reset()                    { *m = CallRequest{} }
func (m *CallRequest) String() string            { return proto.CompactTextString(m) }
func (*CallRequest) ProtoMessage()               {}
func (*CallRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{11} }

func (m *CallRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CallRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *CallRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *CallRequest) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *CallRequest) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *CallRequest) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func (m *CallRequest) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

// Request message of SendRawTransactionRequest rpc.
type SendRawTransactionRequest struct {
	// Signed data of transaction
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SendRawTransactionRequest) Reset()                    { *m = SendRawTransactionRequest{} }
func (m *SendRawTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRawTransactionRequest) ProtoMessage()               {}
func (*SendRawTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{12} }

func (m *SendRawTransactionRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// Response message of SendTransaction rpc.
type SendTransactionResponse struct {
	// Hex string of transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *SendTransactionResponse) Reset()                    { *m = SendTransactionResponse{} }
func (m *SendTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionResponse) ProtoMessage()               {}
func (*SendTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{13} }

func (m *SendTransactionResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// Request message of GetBlockByHash rpc.
type GetBlockByHashRequest struct {
	// Hex string of block hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetBlockByHashRequest) Reset()                    { *m = GetBlockByHashRequest{} }
func (m *GetBlockByHashRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockByHashRequest) ProtoMessage()               {}
func (*GetBlockByHashRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{14} }

func (m *GetBlockByHashRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// Request message of GetTransactionByHash rpc.
type GetTransactionByHashRequest struct {
	// Hex string of transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetTransactionByHashRequest) Reset()         { *m = GetTransactionByHashRequest{} }
func (m *GetTransactionByHashRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionByHashRequest) ProtoMessage()    {}
func (*GetTransactionByHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorApiRpc, []int{15}
}

func (m *GetTransactionByHashRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// Request message of BlockDump.
type BlockDumpRequest struct {
	// the count of blocks to dump before current tail.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *BlockDumpRequest) Reset()                    { *m = BlockDumpRequest{} }
func (m *BlockDumpRequest) String() string            { return proto.CompactTextString(m) }
func (*BlockDumpRequest) ProtoMessage()               {}
func (*BlockDumpRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{16} }

func (m *BlockDumpRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// Response message of BlockDump.
type BlockDumpResponse struct {
	// block dump info.
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BlockDumpResponse) Reset()                    { *m = BlockDumpResponse{} }
func (m *BlockDumpResponse) String() string            { return proto.CompactTextString(m) }
func (*BlockDumpResponse) ProtoMessage()               {}
func (*BlockDumpResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiRpc, []int{17} }

func (m *BlockDumpResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// Response message of TransactionReceipt.
type TransactionReceiptResponse struct {
	// Hex string of tx hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Transaction nonce.
	Nonce           uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Timestamp       int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data            string `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	ChainId         uint32 `protobuf:"varint,7,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ContractAddress string `protobuf:"bytes,8,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *TransactionReceiptResponse) Reset()         { *m = TransactionReceiptResponse{} }
func (m *TransactionReceiptResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionReceiptResponse) ProtoMessage()    {}
func (*TransactionReceiptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorApiRpc, []int{18}
}

func (m *TransactionReceiptResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TransactionReceiptResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransactionReceiptResponse) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionReceiptResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactionReceiptResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TransactionReceiptResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *TransactionReceiptResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *TransactionReceiptResponse) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*GetNebStateRequest)(nil), "rpcpb.GetNebStateRequest")
	proto.RegisterType((*NodeInfoRequest)(nil), "rpcpb.NodeInfoRequest")
	proto.RegisterType((*NodeInfoResponse)(nil), "rpcpb.NodeInfoResponse")
	proto.RegisterType((*StatisticsNodeInfoResponse)(nil), "rpcpb.StatisticsNodeInfoResponse")
	proto.RegisterType((*RouteTable)(nil), "rpcpb.RouteTable")
	proto.RegisterType((*GetNebStateResponse)(nil), "rpcpb.GetNebStateResponse")
	proto.RegisterType((*AccountsRequest)(nil), "rpcpb.AccountsRequest")
	proto.RegisterType((*AccountsResponse)(nil), "rpcpb.AccountsResponse")
	proto.RegisterType((*GetAccountStateRequest)(nil), "rpcpb.GetAccountStateRequest")
	proto.RegisterType((*GetAccountStateResponse)(nil), "rpcpb.GetAccountStateResponse")
	proto.RegisterType((*SendTransactionRequest)(nil), "rpcpb.SendTransactionRequest")
	proto.RegisterType((*CallRequest)(nil), "rpcpb.CallRequest")
	proto.RegisterType((*SendRawTransactionRequest)(nil), "rpcpb.SendRawTransactionRequest")
	proto.RegisterType((*SendTransactionResponse)(nil), "rpcpb.SendTransactionResponse")
	proto.RegisterType((*GetBlockByHashRequest)(nil), "rpcpb.GetBlockByHashRequest")
	proto.RegisterType((*GetTransactionByHashRequest)(nil), "rpcpb.GetTransactionByHashRequest")
	proto.RegisterType((*BlockDumpRequest)(nil), "rpcpb.BlockDumpRequest")
	proto.RegisterType((*BlockDumpResponse)(nil), "rpcpb.BlockDumpResponse")
	proto.RegisterType((*TransactionReceiptResponse)(nil), "rpcpb.TransactionReceiptResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for APIService service

type APIServiceClient interface {
	// Return the state of the neb.
	GetNebState(ctx context.Context, in *GetNebStateRequest, opts ...grpc.CallOption) (*GetNebStateResponse, error)
	// Return the p2p node info.
	NodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error)
	// Return the dump info of blockchain.
	BlockDump(ctx context.Context, in *BlockDumpRequest, opts ...grpc.CallOption) (*BlockDumpResponse, error)
	// Accounts return account list.
	Accounts(ctx context.Context, in *AccountsRequest, opts ...grpc.CallOption) (*AccountsResponse, error)
	// Return the state of the account.
	GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error)
	// Verify, sign, and send the transaction.
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	// Call smart contract.
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	// Submit the signed transaction.
	SendRawTransaction(ctx context.Context, in *SendRawTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	// Get block header info by the block hash.
	GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*corepb.Block, error)
	// Get transactionReceipt info by tansaction hash.
	GetTransactionReceipt(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*TransactionReceiptResponse, error)
	StatisticsNodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*StatisticsNodeInfoResponse, error)
}

type aPIServiceClient struct {
	cc *grpc.ClientConn
}

func NewAPIServiceClient(cc *grpc.ClientConn) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) GetNebState(ctx context.Context, in *GetNebStateRequest, opts ...grpc.CallOption) (*GetNebStateResponse, error) {
	out := new(GetNebStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/GetNebState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) NodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	out := new(NodeInfoResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/NodeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) BlockDump(ctx context.Context, in *BlockDumpRequest, opts ...grpc.CallOption) (*BlockDumpResponse, error) {
	out := new(BlockDumpResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/BlockDump", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Accounts(ctx context.Context, in *AccountsRequest, opts ...grpc.CallOption) (*AccountsResponse, error) {
	out := new(AccountsResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/Accounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error) {
	out := new(GetAccountStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/GetAccountState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/Call", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SendRawTransaction(ctx context.Context, in *SendRawTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/SendRawTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*corepb.Block, error) {
	out := new(corepb.Block)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/GetBlockByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetTransactionReceipt(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*TransactionReceiptResponse, error) {
	out := new(TransactionReceiptResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/GetTransactionReceipt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) StatisticsNodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*StatisticsNodeInfoResponse, error) {
	out := new(StatisticsNodeInfoResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/StatisticsNodeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for APIService service

type APIServiceServer interface {
	// Return the state of the neb.
	GetNebState(context.Context, *GetNebStateRequest) (*GetNebStateResponse, error)
	// Return the p2p node info.
	NodeInfo(context.Context, *NodeInfoRequest) (*NodeInfoResponse, error)
	// Return the dump info of blockchain.
	BlockDump(context.Context, *BlockDumpRequest) (*BlockDumpResponse, error)
	// Accounts return account list.
	Accounts(context.Context, *AccountsRequest) (*AccountsResponse, error)
	// Return the state of the account.
	GetAccountState(context.Context, *GetAccountStateRequest) (*GetAccountStateResponse, error)
	// Verify, sign, and send the transaction.
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
	// Call smart contract.
	Call(context.Context, *CallRequest) (*SendTransactionResponse, error)
	// Submit the signed transaction.
	SendRawTransaction(context.Context, *SendRawTransactionRequest) (*SendTransactionResponse, error)
	// Get block header info by the block hash.
	GetBlockByHash(context.Context, *GetBlockByHashRequest) (*corepb.Block, error)
	// Get transactionReceipt info by tansaction hash.
	GetTransactionReceipt(context.Context, *GetTransactionByHashRequest) (*TransactionReceiptResponse, error)
	StatisticsNodeInfo(context.Context, *NodeInfoRequest) (*StatisticsNodeInfoResponse, error)
}

func RegisterAPIServiceServer(s *grpc.Server, srv APIServiceServer) {
	s.RegisterService(&_APIService_serviceDesc, srv)
}

func _APIService_GetNebState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNebStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetNebState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/GetNebState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetNebState(ctx, req.(*GetNebStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_NodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).NodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/NodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).NodeInfo(ctx, req.(*NodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_BlockDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).BlockDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/BlockDump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).BlockDump(ctx, req.(*BlockDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/Accounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Accounts(ctx, req.(*AccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/GetAccountState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetAccountState(ctx, req.(*GetAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/SendRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SendRawTransaction(ctx, req.(*SendRawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetBlockByHash(ctx, req.(*GetBlockByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetTransactionReceipt(ctx, req.(*GetTransactionByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_StatisticsNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).StatisticsNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/StatisticsNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).StatisticsNodeInfo(ctx, req.(*NodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _APIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNebState",
			Handler:    _APIService_GetNebState_Handler,
		},
		{
			MethodName: "NodeInfo",
			Handler:    _APIService_NodeInfo_Handler,
		},
		{
			MethodName: "BlockDump",
			Handler:    _APIService_BlockDump_Handler,
		},
		{
			MethodName: "Accounts",
			Handler:    _APIService_Accounts_Handler,
		},
		{
			MethodName: "GetAccountState",
			Handler:    _APIService_GetAccountState_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _APIService_SendTransaction_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _APIService_Call_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _APIService_SendRawTransaction_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _APIService_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _APIService_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "StatisticsNodeInfo",
			Handler:    _APIService_StatisticsNodeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_rpc.proto",
}

func init() { proto.RegisterFile("api_rpc.proto", fileDescriptorApiRpc) }

var fileDescriptorApiRpc = []byte{
	// 1257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdf, 0x8e, 0xdb, 0xc4,
	0x17, 0x96, 0x93, 0xec, 0x26, 0x3e, 0xdb, 0x6c, 0x76, 0xa7, 0xdb, 0x5d, 0xc7, 0x4d, 0xdb, 0xfc,
	0x46, 0x3f, 0x89, 0xb4, 0xa8, 0x6b, 0xda, 0x4a, 0x20, 0x71, 0xd7, 0x3f, 0x68, 0xbb, 0x12, 0x94,
	0xe2, 0xad, 0x90, 0x10, 0x48, 0xd1, 0xc4, 0x9e, 0x26, 0xa3, 0x3a, 0x1e, 0xe3, 0x19, 0x6f, 0x69,
	0x2f, 0xb8, 0x40, 0xbc, 0x01, 0x4f, 0xc1, 0x25, 0x2f, 0xc2, 0x0d, 0x4f, 0x80, 0xc4, 0x05, 0x12,
	0x2f, 0x81, 0x66, 0x3c, 0xfe, 0x93, 0x38, 0x69, 0xc5, 0xdd, 0x9c, 0x33, 0x67, 0xbe, 0x73, 0xe6,
	0x7c, 0x67, 0x3e, 0x1b, 0xfa, 0x24, 0x61, 0xd3, 0x34, 0x09, 0x4e, 0x93, 0x94, 0x4b, 0x8e, 0x76,
	0xd2, 0x24, 0x48, 0x66, 0xee, 0x68, 0xce, 0xf9, 0x3c, 0xa2, 0x1e, 0x49, 0x98, 0x47, 0xe2, 0x98,
	0x4b, 0x22, 0x19, 0x8f, 0x45, 0x1e, 0xe4, 0x3e, 0x98, 0x33, 0xb9, 0xc8, 0x66, 0xa7, 0x01, 0x5f,
	0x7a, 0x31, 0x9d, 0x65, 0x11, 0x11, 0x8c, 0x7b, 0x73, 0x7e, 0xd7, 0x18, 0x5e, 0xc0, 0x53, 0xea,
	0x25, 0x33, 0x6f, 0x16, 0xf1, 0xe0, 0x55, 0x7e, 0x08, 0x1f, 0x01, 0x3a, 0xa3, 0xf2, 0x19, 0x9d,
	0x5d, 0x48, 0x22, 0xa9, 0x4f, 0xbf, 0xcf, 0xa8, 0x90, 0xf8, 0x10, 0x06, 0xcf, 0x78, 0x48, 0xcf,
	0xe3, 0x97, 0xbc, 0x70, 0xfd, 0xda, 0x86, 0x83, 0xca, 0x27, 0x12, 0x1e, 0x0b, 0x8a, 0xf6, 0xa1,
	0xc5, 0x42, 0xc7, 0x1a, 0x5b, 0x13, 0xdb, 0x6f, 0xb1, 0x10, 0x0d, 0xa1, 0x17, 0x2c, 0x08, 0x8b,
	0xa7, 0x2c, 0x74, 0x5a, 0x63, 0x6b, 0xd2, 0xf7, 0xbb, 0xda, 0x3e, 0x0f, 0x91, 0x03, 0xdd, 0x4b,
	0x9a, 0x0a, 0xc6, 0x63, 0xa7, 0x9d, 0xef, 0x18, 0x13, 0xdd, 0x00, 0x48, 0x28, 0x4d, 0xa7, 0x01,
	0xcf, 0x62, 0xe9, 0x74, 0xc6, 0xd6, 0x64, 0xc7, 0xb7, 0x95, 0xe7, 0xb1, 0x72, 0x20, 0x0c, 0x57,
	0xc4, 0x9b, 0x38, 0x58, 0xa4, 0x3c, 0x66, 0x6f, 0x69, 0xe8, 0xec, 0x8c, 0xad, 0x49, 0xcf, 0x5f,
	0xf1, 0xa1, 0x5b, 0xb0, 0x37, 0xcb, 0x82, 0x57, 0x54, 0x4e, 0x05, 0x7b, 0x4b, 0x9d, 0x5d, 0x8d,
	0x01, 0xb9, 0xeb, 0x82, 0xbd, 0xa5, 0x68, 0x02, 0x07, 0x29, 0x8d, 0xc8, 0x9b, 0x69, 0x40, 0x82,
	0x05, 0xcd, 0xa3, 0xba, 0x3a, 0x6a, 0x5f, 0xfb, 0x1f, 0x2b, 0xb7, 0x8e, 0xbc, 0x03, 0x87, 0x42,
	0xa6, 0x94, 0x2c, 0xa7, 0x42, 0xf2, 0xd4, 0x84, 0xf6, 0x74, 0xe8, 0x20, 0xdf, 0xb8, 0x50, 0x7e,
	0x1d, 0xfb, 0x09, 0x38, 0x2b, 0xb1, 0xf4, 0x07, 0x49, 0xe3, 0x30, 0x3f, 0x62, 0xeb, 0x23, 0xd7,
	0x6a, 0x47, 0x3e, 0xd3, 0xbb, 0xfa, 0xe0, 0x6d, 0x38, 0xd0, 0xed, 0x0f, 0x78, 0x34, 0x2d, 0xba,
	0x02, 0xba, 0x8b, 0x83, 0xc2, 0xff, 0xb5, 0xe9, 0xce, 0x7d, 0xd8, 0x4b, 0x79, 0x26, 0xe9, 0x54,
	0x92, 0x59, 0x44, 0x9d, 0xbd, 0x71, 0x7b, 0xb2, 0x77, 0xff, 0xf0, 0x54, 0x0f, 0xc4, 0xa9, 0xaf,
	0x76, 0x5e, 0xa8, 0x0d, 0x1f, 0xd2, 0x72, 0x8d, 0x7f, 0x04, 0x57, 0xd1, 0xc9, 0x84, 0x64, 0x81,
	0x68, 0x90, 0x76, 0x0c, 0xbb, 0xda, 0xf7, 0xc4, 0x10, 0x67, 0x2c, 0xe5, 0x7f, 0x4a, 0xd9, 0x7c,
	0x21, 0x35, 0x75, 0x1d, 0xdf, 0x58, 0x08, 0x41, 0xe7, 0x29, 0x11, 0x0b, 0x4d, 0x9b, 0xed, 0xeb,
	0x35, 0x1a, 0x81, 0xfd, 0xbc, 0x60, 0x48, 0x53, 0xd6, 0xf7, 0x2b, 0x07, 0xfe, 0x18, 0xa0, 0xaa,
	0xac, 0x31, 0x24, 0x0e, 0x74, 0x49, 0x18, 0xa6, 0x54, 0x08, 0xa7, 0x35, 0x6e, 0x4f, 0x6c, 0xbf,
	0x30, 0xf1, 0x3f, 0x16, 0x5c, 0x5d, 0x99, 0x46, 0x53, 0x71, 0x7d, 0xac, 0xac, 0xd5, 0xb1, 0x42,
	0xd0, 0x91, 0x84, 0x45, 0xba, 0x64, 0xdb, 0xd7, 0x6b, 0xe4, 0x42, 0x2f, 0xe0, 0x2c, 0x9e, 0x11,
	0x41, 0x4d, 0xd1, 0xa5, 0xbd, 0x61, 0xd8, 0xfa, 0xf5, 0x61, 0xbb, 0x0e, 0x36, 0x13, 0xd3, 0x25,
	0x8b, 0x59, 0x3c, 0x37, 0x93, 0xd6, 0x63, 0xe2, 0x0b, 0x6d, 0x6f, 0x64, 0x6d, 0x77, 0x33, 0x6b,
	0xeb, 0x43, 0xdb, 0x6d, 0x0e, 0xad, 0x7a, 0x64, 0x0f, 0x03, 0x5d, 0x87, 0x28, 0x1e, 0xd9, 0x47,
	0x70, 0x50, 0xb9, 0xcc, 0xe5, 0x47, 0x60, 0x9b, 0xfe, 0x50, 0xe1, 0x58, 0xba, 0x61, 0x95, 0x03,
	0x3f, 0x85, 0xe3, 0x33, 0x2a, 0xcd, 0xa1, 0xfa, 0x1b, 0xae, 0xb7, 0x39, 0xef, 0x7d, 0x61, 0xa2,
	0x23, 0xd8, 0xd1, 0x12, 0x60, 0x9a, 0x96, 0x1b, 0xf8, 0x1c, 0x4e, 0x1a, 0x48, 0xa6, 0x04, 0x07,
	0xba, 0x33, 0x12, 0x91, 0x38, 0xa0, 0x05, 0x94, 0x31, 0x15, 0x54, 0xcc, 0x95, 0x3f, 0x1f, 0x99,
	0xdc, 0xc0, 0xbf, 0x5b, 0x70, 0x7c, 0x41, 0xe3, 0xf0, 0x45, 0x4a, 0x62, 0x41, 0x02, 0x25, 0x52,
	0x45, 0x55, 0x08, 0x3a, 0x2f, 0x53, 0xbe, 0x34, 0x38, 0x7a, 0xad, 0x06, 0x44, 0x72, 0x53, 0x4c,
	0x4b, 0x72, 0x05, 0x7a, 0x49, 0xa2, 0xac, 0x20, 0x2f, 0x37, 0xaa, 0x54, 0x9d, 0x5a, 0x2a, 0x35,
	0xb4, 0x82, 0x67, 0x69, 0x40, 0x35, 0x5b, 0xb6, 0x6f, 0x2c, 0x95, 0x87, 0xa4, 0x73, 0x61, 0xf8,
	0xd1, 0x6b, 0x45, 0xee, 0x9c, 0x88, 0x69, 0x92, 0xb2, 0x20, 0x7f, 0xfd, 0xb6, 0xdf, 0x9b, 0x13,
	0xf1, 0x5c, 0xd9, 0xc5, 0x66, 0xc4, 0x96, 0x4c, 0xea, 0xf7, 0x9e, 0x6f, 0x7e, 0xae, 0x6c, 0xfc,
	0x9b, 0x05, 0x7b, 0x8f, 0x49, 0x14, 0xfd, 0xc7, 0x5b, 0xe4, 0xf5, 0xb6, 0xeb, 0xf5, 0xba, 0xd0,
	0x7b, 0x99, 0xc5, 0xba, 0x25, 0xfa, 0x22, 0xb6, 0x5f, 0xda, 0x65, 0xcd, 0x3b, 0xdb, 0x6a, 0xde,
	0x7d, 0x57, 0xcd, 0xdd, 0xb5, 0x9a, 0x3d, 0x18, 0x2a, 0x0e, 0x7c, 0xf2, 0x7a, 0x33, 0x0d, 0x21,
	0x91, 0xa4, 0xb8, 0x80, 0x5a, 0xe3, 0xbb, 0x70, 0xd2, 0x20, 0xcd, 0x0c, 0x00, 0x82, 0xce, 0x42,
	0x49, 0x80, 0x09, 0x57, 0x6b, 0xfc, 0x21, 0x5c, 0x3b, 0xa3, 0xf2, 0x91, 0x9a, 0x9d, 0x47, 0x6f,
	0x94, 0x28, 0xd4, 0xb0, 0x1b, 0xc1, 0xf7, 0xe0, 0xfa, 0x19, 0x95, 0x35, 0xe8, 0xf7, 0x1f, 0x99,
	0xc0, 0x81, 0x06, 0x7f, 0x92, 0x2d, 0x93, 0x22, 0xee, 0x08, 0x76, 0xf2, 0x87, 0x6b, 0x69, 0x75,
	0xcd, 0x0d, 0xfc, 0x01, 0x1c, 0xd6, 0x22, 0xab, 0x92, 0x1b, 0x37, 0xfc, 0xd3, 0x02, 0x77, 0xe5,
	0x7a, 0x01, 0x65, 0x89, 0x7c, 0xd7, 0x2d, 0x4b, 0xa6, 0x5b, 0x0d, 0xa6, 0xdb, 0x4d, 0xa6, 0x57,
	0x26, 0x73, 0x04, 0xb6, 0x64, 0x4b, 0x2a, 0x24, 0x59, 0x26, 0x9a, 0xd2, 0xb6, 0x5f, 0x39, 0xca,
	0xf2, 0x76, 0xab, 0xf2, 0xd4, 0x33, 0x33, 0xb2, 0xa6, 0xc9, 0xac, 0xa9, 0xdc, 0x6d, 0x38, 0x08,
	0x78, 0x2c, 0x53, 0x12, 0xc8, 0x69, 0xf1, 0xa8, 0xf3, 0x19, 0x1d, 0x14, 0xfe, 0x87, 0xb9, 0xfb,
	0xfe, 0xdf, 0x3d, 0x80, 0x87, 0xcf, 0xcf, 0x2f, 0x68, 0x7a, 0xa9, 0x46, 0xe4, 0x5b, 0xd8, 0xab,
	0x29, 0x2a, 0x1a, 0x9a, 0x0f, 0x47, 0xf3, 0x9b, 0xef, 0xba, 0x9b, 0xb6, 0xf2, 0xce, 0xe0, 0x6b,
	0x3f, 0xfd, 0xf1, 0xd7, 0x2f, 0xad, 0x01, 0xea, 0x7b, 0x97, 0xf7, 0xd4, 0xbf, 0x85, 0x27, 0x34,
	0x9a, 0x0f, 0xbd, 0xe2, 0xeb, 0x82, 0x8e, 0xcd, 0xf1, 0xb5, 0xff, 0x06, 0xf7, 0xa4, 0xe1, 0xdf,
	0x88, 0xc9, 0x43, 0xea, 0x31, 0x85, 0xf3, 0x0d, 0xd8, 0x25, 0x99, 0xa8, 0x38, 0xbc, 0x3e, 0x08,
	0xae, 0xd3, 0xdc, 0x30, 0xb0, 0x43, 0x0d, 0x7b, 0x15, 0xef, 0x2b, 0x58, 0xad, 0x6c, 0x5e, 0x98,
	0x2d, 0x93, 0x4f, 0xad, 0x3b, 0xe8, 0x2b, 0xe8, 0x15, 0xea, 0x5a, 0x96, 0xbb, 0xa6, 0xc0, 0x65,
	0xb9, 0xeb, 0x32, 0x8c, 0x8f, 0x34, 0xee, 0x3e, 0xba, 0xa2, 0x70, 0x49, 0x01, 0x13, 0xc3, 0x60,
	0x4d, 0x34, 0xd1, 0x8d, 0xaa, 0x8f, 0x1b, 0x64, 0xd9, 0xbd, 0xb9, 0x6d, 0xdb, 0xe4, 0x19, 0xe9,
	0x3c, 0xc7, 0xf8, 0xb0, 0x96, 0x27, 0x6f, 0xb7, 0xba, 0x42, 0x04, 0x83, 0xb5, 0x37, 0x5a, 0xe6,
	0xdb, 0x2c, 0xb8, 0x65, 0xbe, 0x2d, 0x4f, 0x1b, 0xbb, 0x3a, 0xdf, 0x11, 0x1e, 0xa8, 0x7c, 0xb2,
	0x0a, 0x50, 0xd9, 0xbe, 0x84, 0x8e, 0x52, 0x3d, 0x84, 0x0c, 0x46, 0x4d, 0x02, 0xdf, 0x8b, 0x7b,
	0x55, 0xe3, 0xf6, 0x71, 0x4f, 0xe1, 0x06, 0x24, 0x8a, 0x14, 0x60, 0x06, 0xa8, 0xa9, 0x49, 0x68,
	0x5c, 0x83, 0xda, 0x28, 0x57, 0xef, 0x4d, 0x76, 0x43, 0x27, 0x3b, 0xc1, 0x48, 0x25, 0x4b, 0xc9,
	0xeb, 0xb5, 0x7b, 0x7c, 0x07, 0xfb, 0xab, 0x52, 0x85, 0x46, 0x15, 0x0b, 0x4d, 0x05, 0x73, 0xfb,
	0xa7, 0xea, 0x57, 0xb9, 0x18, 0xaf, 0x55, 0xf4, 0xf9, 0xca, 0x09, 0x85, 0xfe, 0xb3, 0xa5, 0x95,
	0xb0, 0x29, 0x2c, 0x08, 0x57, 0x59, 0xb6, 0x49, 0x9f, 0xfb, 0x3f, 0x13, 0xb3, 0x5d, 0x97, 0xf0,
	0xff, 0x75, 0xfe, 0x9b, 0x78, 0x68, 0xf2, 0x37, 0x43, 0x55, 0x19, 0x09, 0xa0, 0xe6, 0x4f, 0xdf,
	0xd6, 0x67, 0x59, 0xa4, 0xdd, 0xfe, 0x9f, 0x88, 0x6f, 0xe9, 0xb4, 0x43, 0x74, 0xa2, 0xd2, 0x8a,
	0x32, 0x4e, 0xbf, 0x55, 0x15, 0x38, 0xdb, 0xd5, 0x7f, 0x3d, 0x0f, 0xfe, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0xc3, 0xe6, 0x34, 0x9e, 0xad, 0x0c, 0x00, 0x00,
}
