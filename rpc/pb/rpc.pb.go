// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	GetNebStateRequest
	GetNebStateResponse
	GetAccountStateRequest
	GetAccountStateResponse
	SendTransactionRequest
	SendTransactionResponse
	SendRawTransactionRequest
*/
package rpcpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Request message of GetNebState rpc.
type GetNebStateRequest struct {
}

func (m *GetNebStateRequest) Reset()                    { *m = GetNebStateRequest{} }
func (m *GetNebStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNebStateRequest) ProtoMessage()               {}
func (*GetNebStateRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

// Response message of GetNebState rpc.
type GetNebStateResponse struct {
	// Block chain id
	ChainID uint32 `protobuf:"varint,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	// Current neb tail hash
	Tail string `protobuf:"bytes,2,opt,name=tail,proto3" json:"tail,omitempty"`
	// Neb coinbase
	Coinbase string `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Number of peers currenly connected
	PeerCount uint32 `protobuf:"varint,4,opt,name=peerCount,proto3" json:"peerCount,omitempty"`
	// Neb mine status, minging is true ,otherwise false
	IsMining bool `protobuf:"varint,5,opt,name=isMining,proto3" json:"isMining,omitempty"`
}

func (m *GetNebStateResponse) Reset()                    { *m = GetNebStateResponse{} }
func (m *GetNebStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNebStateResponse) ProtoMessage()               {}
func (*GetNebStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *GetNebStateResponse) GetChainID() uint32 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *GetNebStateResponse) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *GetNebStateResponse) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *GetNebStateResponse) GetPeerCount() uint32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

func (m *GetNebStateResponse) GetIsMining() bool {
	if m != nil {
		return m.IsMining
	}
	return false
}

// Request message of GetAccountState rpc.
type GetAccountStateRequest struct {
	// Hex string of the account addresss.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Hex string block number, or one of "latest", "earliest" or "pending". If not specified, use "latest".
	Block string `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *GetAccountStateRequest) Reset()                    { *m = GetAccountStateRequest{} }
func (m *GetAccountStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateRequest) ProtoMessage()               {}
func (*GetAccountStateRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

func (m *GetAccountStateRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAccountStateRequest) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

// Response message of GetAccountState rpc.
type GetAccountStateResponse struct {
	// Current balance in unit of 1/(10^18) nas.
	Balance []byte `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// Current transaction count.
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *GetAccountStateResponse) Reset()                    { *m = GetAccountStateResponse{} }
func (m *GetAccountStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateResponse) ProtoMessage()               {}
func (*GetAccountStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

func (m *GetAccountStateResponse) GetBalance() []byte {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *GetAccountStateResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// Request message of SendTransaction rpc.
type SendTransactionRequest struct {
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *SendTransactionRequest) Reset()                    { *m = SendTransactionRequest{} }
func (m *SendTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionRequest) ProtoMessage()               {}
func (*SendTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{4} }

func (m *SendTransactionRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *SendTransactionRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *SendTransactionRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SendTransactionRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// Response message of SendTransaction rpc.
type SendTransactionResponse struct {
	// Hex string of transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *SendTransactionResponse) Reset()                    { *m = SendTransactionResponse{} }
func (m *SendTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionResponse) ProtoMessage()               {}
func (*SendTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{5} }

func (m *SendTransactionResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// Request message of SendRawTransactionRequest rpc.
type SendRawTransactionRequest struct {
	// Signed data of transaction
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SendRawTransactionRequest) Reset()                    { *m = SendRawTransactionRequest{} }
func (m *SendRawTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRawTransactionRequest) ProtoMessage()               {}
func (*SendRawTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{6} }

func (m *SendRawTransactionRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*GetNebStateRequest)(nil), "rpcpb.GetNebStateRequest")
	proto.RegisterType((*GetNebStateResponse)(nil), "rpcpb.GetNebStateResponse")
	proto.RegisterType((*GetAccountStateRequest)(nil), "rpcpb.GetAccountStateRequest")
	proto.RegisterType((*GetAccountStateResponse)(nil), "rpcpb.GetAccountStateResponse")
	proto.RegisterType((*SendTransactionRequest)(nil), "rpcpb.SendTransactionRequest")
	proto.RegisterType((*SendTransactionResponse)(nil), "rpcpb.SendTransactionResponse")
	proto.RegisterType((*SendRawTransactionRequest)(nil), "rpcpb.SendRawTransactionRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for APIService service

type APIServiceClient interface {
	// Return the state of the neb.
	GetNebState(ctx context.Context, in *GetNebStateRequest, opts ...grpc.CallOption) (*GetNebStateResponse, error)
	// Return the state of the account.
	GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error)
	// Verify, sign, and send the transaction.
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	// Submit the signed transaction.
	SendRawTransaction(ctx context.Context, in *SendRawTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
}

type aPIServiceClient struct {
	cc *grpc.ClientConn
}

func NewAPIServiceClient(cc *grpc.ClientConn) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) GetNebState(ctx context.Context, in *GetNebStateRequest, opts ...grpc.CallOption) (*GetNebStateResponse, error) {
	out := new(GetNebStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/GetNebState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error) {
	out := new(GetAccountStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/GetAccountState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SendRawTransaction(ctx context.Context, in *SendRawTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/SendRawTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for APIService service

type APIServiceServer interface {
	// Return the state of the neb.
	GetNebState(context.Context, *GetNebStateRequest) (*GetNebStateResponse, error)
	// Return the state of the account.
	GetAccountState(context.Context, *GetAccountStateRequest) (*GetAccountStateResponse, error)
	// Verify, sign, and send the transaction.
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
	// Submit the signed transaction.
	SendRawTransaction(context.Context, *SendRawTransactionRequest) (*SendTransactionResponse, error)
}

func RegisterAPIServiceServer(s *grpc.Server, srv APIServiceServer) {
	s.RegisterService(&_APIService_serviceDesc, srv)
}

func _APIService_GetNebState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNebStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetNebState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/GetNebState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetNebState(ctx, req.(*GetNebStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/GetAccountState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetAccountState(ctx, req.(*GetAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/SendRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SendRawTransaction(ctx, req.(*SendRawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _APIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNebState",
			Handler:    _APIService_GetNebState_Handler,
		},
		{
			MethodName: "GetAccountState",
			Handler:    _APIService_GetAccountState_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _APIService_SendTransaction_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _APIService_SendRawTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcd, 0x6e, 0xd4, 0x30,
	0x10, 0x6e, 0x96, 0x2c, 0x34, 0x43, 0x01, 0x69, 0xa8, 0xda, 0x34, 0x02, 0x14, 0xf9, 0xb4, 0x17,
	0x16, 0x09, 0x9e, 0xa0, 0x02, 0x51, 0xf6, 0x00, 0x42, 0x5e, 0x0e, 0x5c, 0x1d, 0xc7, 0x10, 0x8b,
	0x60, 0x07, 0xdb, 0x5b, 0x9e, 0x85, 0x17, 0xe3, 0x79, 0x90, 0x9d, 0x5f, 0x9a, 0x54, 0xbd, 0xcd,
	0x37, 0xf6, 0x7c, 0xf3, 0xf9, 0x9b, 0x31, 0x24, 0xa6, 0xe1, 0xdb, 0xc6, 0x68, 0xa7, 0x71, 0x6d,
	0x1a, 0xde, 0x14, 0xe4, 0x14, 0xf0, 0x4a, 0xb8, 0x4f, 0xa2, 0xd8, 0x3b, 0xe6, 0x04, 0x15, 0xbf,
	0x0e, 0xc2, 0x3a, 0xf2, 0x27, 0x82, 0xa7, 0xff, 0xa5, 0x6d, 0xa3, 0x95, 0x15, 0x98, 0xc2, 0x03,
	0x5e, 0x31, 0xa9, 0x76, 0xef, 0xd2, 0x28, 0x8f, 0x36, 0x8f, 0x68, 0x0f, 0x11, 0x21, 0x76, 0x4c,
	0xd6, 0xe9, 0x2a, 0x8f, 0x36, 0x09, 0x0d, 0x31, 0x66, 0x70, 0xcc, 0xb5, 0x54, 0x05, 0xb3, 0x22,
	0xbd, 0x17, 0xf2, 0x03, 0xc6, 0x67, 0x90, 0x34, 0x42, 0x98, 0xb7, 0xfa, 0xa0, 0x5c, 0x1a, 0x07,
	0xae, 0x31, 0xe1, 0x2b, 0xa5, 0xfd, 0x28, 0x95, 0x54, 0xdf, 0xd3, 0x75, 0x1e, 0x6d, 0x8e, 0xe9,
	0x80, 0xc9, 0x07, 0x38, 0xbb, 0x12, 0xee, 0x92, 0x73, 0x7f, 0x73, 0xaa, 0xda, 0xab, 0x63, 0x65,
	0x69, 0x84, 0xb5, 0x41, 0x5d, 0x42, 0x7b, 0x88, 0xa7, 0xb0, 0x2e, 0x6a, 0xcd, 0x7f, 0x74, 0xf2,
	0x5a, 0x40, 0x76, 0x70, 0x3e, 0x63, 0x1a, 0x1f, 0x5a, 0xb0, 0x9a, 0x29, 0x2e, 0x02, 0xd5, 0x09,
	0xed, 0xa1, 0xa7, 0x52, 0xda, 0xe7, 0x3d, 0x55, 0x4c, 0x5b, 0x40, 0x2a, 0x38, 0xdb, 0x0b, 0x55,
	0x7e, 0x31, 0x4c, 0x59, 0xc6, 0x9d, 0xd4, 0xaa, 0x17, 0x85, 0x10, 0x7f, 0x33, 0xfa, 0x67, 0xa7,
	0x28, 0xc4, 0xf8, 0x18, 0x56, 0x4e, 0x77, 0x5a, 0x56, 0x4e, 0x7b, 0xce, 0x6b, 0x56, 0x1f, 0x5a,
	0x97, 0x4e, 0x68, 0x0b, 0xc6, 0x4e, 0xf1, 0xb4, 0xd3, 0x4b, 0x38, 0x9f, 0x75, 0xea, 0x44, 0x23,
	0xc4, 0x15, 0xb3, 0x55, 0xdf, 0xca, 0xc7, 0xe4, 0x15, 0x5c, 0xf8, 0xeb, 0x94, 0xfd, 0x5e, 0xd6,
	0x56, 0x32, 0xc7, 0xba, 0x27, 0x86, 0xf8, 0xf5, 0xdf, 0x15, 0xc0, 0xe5, 0xe7, 0xdd, 0x5e, 0x98,
	0x6b, 0xc9, 0x05, 0xbe, 0x87, 0x87, 0x93, 0x45, 0xc0, 0x8b, 0x6d, 0x58, 0x9b, 0xed, 0x7c, 0x67,
	0xb2, 0x6c, 0xe9, 0xa8, 0x55, 0x46, 0x8e, 0x90, 0xc2, 0x93, 0x1b, 0x5e, 0xe3, 0xf3, 0xb1, 0x60,
	0x61, 0x9a, 0xd9, 0x8b, 0xdb, 0x8e, 0xa7, 0x9c, 0x37, 0xac, 0x18, 0x38, 0x97, 0x87, 0x31, 0x70,
	0xde, 0xe2, 0x20, 0x39, 0xc2, 0xaf, 0x80, 0x73, 0xbf, 0x30, 0x9f, 0xd4, 0x2d, 0x5a, 0x79, 0x37,
	0x73, 0x71, 0x3f, 0xfc, 0xbb, 0x37, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xf7, 0x84, 0xbb,
	0x84, 0x03, 0x00, 0x00,
}
