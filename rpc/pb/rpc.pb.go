// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	GetBalanceRequest
	GetBalanceResponse
	SendTransactionRequest
	SendTransactionResponse
*/
package rpcpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message of GetBalance rpc.
type GetBalanceRequest struct {
	// Hex string of the account addresss.
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// Hex string block number, or one of "latest", "earliest" or "pending". If not specified, use "latest".
	Block string `protobuf:"bytes,2,opt,name=block" json:"block,omitempty"`
}

func (m *GetBalanceRequest) Reset()                    { *m = GetBalanceRequest{} }
func (m *GetBalanceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBalanceRequest) ProtoMessage()               {}
func (*GetBalanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetBalanceRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetBalanceRequest) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

// Response message of GetBalance rpc.
type GetBalanceResponse struct {
	// Current balance in unit of 1/(10^18) nas.
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetBalanceResponse) Reset()                    { *m = GetBalanceResponse{} }
func (m *GetBalanceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBalanceResponse) ProtoMessage()               {}
func (*GetBalanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetBalanceResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// Request message of SendTransaction rpc.
type SendTransactionRequest struct {
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SendTransactionRequest) Reset()                    { *m = SendTransactionRequest{} }
func (m *SendTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionRequest) ProtoMessage()               {}
func (*SendTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SendTransactionRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *SendTransactionRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *SendTransactionRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// Response message of SendTransaction rpc.
type SendTransactionResponse struct {
	// Hex string of transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *SendTransactionResponse) Reset()                    { *m = SendTransactionResponse{} }
func (m *SendTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionResponse) ProtoMessage()               {}
func (*SendTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SendTransactionResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*GetBalanceRequest)(nil), "rpcpb.GetBalanceRequest")
	proto.RegisterType((*GetBalanceResponse)(nil), "rpcpb.GetBalanceResponse")
	proto.RegisterType((*SendTransactionRequest)(nil), "rpcpb.SendTransactionRequest")
	proto.RegisterType((*SendTransactionResponse)(nil), "rpcpb.SendTransactionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for APIService service

type APIServiceClient interface {
	// Returns the balance of the account.
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
}

type aPIServiceClient struct {
	cc *grpc.ClientConn
}

func NewAPIServiceClient(cc *grpc.ClientConn) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/GetBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for APIService service

type APIServiceServer interface {
	// Returns the balance of the account.
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
}

func RegisterAPIServiceServer(s *grpc.Server, srv APIServiceServer) {
	s.RegisterService(&_APIService_serviceDesc, srv)
}

func _APIService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _APIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _APIService_GetBalance_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _APIService_SendTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xdd, 0xb5, 0x55, 0x3a, 0x88, 0xe2, 0x20, 0xba, 0x16, 0x14, 0xc9, 0x49, 0x04, 0xf7,
	0xa0, 0x4f, 0xa0, 0x3d, 0x88, 0x37, 0x49, 0x7d, 0x81, 0x6c, 0x76, 0xa4, 0xc5, 0x35, 0x13, 0x93,
	0xb4, 0x6f, 0xe4, 0x7b, 0x4a, 0xb3, 0x09, 0x2d, 0xb6, 0xde, 0xe6, 0xcf, 0x0c, 0xdf, 0xff, 0x67,
	0x06, 0x46, 0xce, 0xea, 0xda, 0x3a, 0x0e, 0x8c, 0x43, 0x67, 0xb5, 0x6d, 0xc4, 0x04, 0x4e, 0x5f,
	0x28, 0x3c, 0xab, 0x4e, 0x19, 0x4d, 0x92, 0xbe, 0x17, 0xe4, 0x03, 0x56, 0x70, 0xa8, 0xda, 0xd6,
	0x91, 0xf7, 0x55, 0x71, 0x53, 0xdc, 0x8e, 0x64, 0x96, 0x78, 0x06, 0xc3, 0xa6, 0x63, 0xfd, 0x59,
	0x95, 0xf1, 0xbd, 0x17, 0xe2, 0x0e, 0x70, 0x13, 0xe2, 0x2d, 0x1b, 0x4f, 0xab, 0xd9, 0xa5, 0xea,
	0x16, 0x14, 0x19, 0x47, 0xb2, 0x17, 0x42, 0xc2, 0xf9, 0x94, 0x4c, 0xfb, 0xee, 0x94, 0xf1, 0x4a,
	0x87, 0x39, 0x9b, 0xec, 0x8a, 0x30, 0xf8, 0x70, 0xfc, 0x95, 0x2c, 0x63, 0x8d, 0xc7, 0x50, 0x06,
	0x4e, 0x66, 0x65, 0xe0, 0x35, 0x73, 0x7f, 0x93, 0x79, 0x0f, 0x17, 0x5b, 0xcc, 0x14, 0x02, 0x61,
	0x30, 0x53, 0x7e, 0x96, 0xa1, 0xab, 0xfa, 0xe1, 0xa7, 0x00, 0x78, 0x7a, 0x7b, 0x9d, 0x92, 0x5b,
	0xce, 0x35, 0xe1, 0x04, 0x60, 0x9d, 0x1e, 0xab, 0x3a, 0x2e, 0xa6, 0xde, 0xda, 0xca, 0xf8, 0x72,
	0x47, 0xa7, 0x77, 0x11, 0x7b, 0x28, 0xe1, 0xe4, 0x4f, 0x04, 0xbc, 0x4a, 0xf3, 0xbb, 0xbf, 0x3b,
	0xbe, 0xfe, 0xaf, 0x9d, 0x99, 0xcd, 0x41, 0xbc, 0xd4, 0xe3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0f, 0xf4, 0x32, 0xc4, 0xb6, 0x01, 0x00, 0x00,
}
