// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	GetAccountStateRequest
	GetAccountStateResponse
	SendTransactionRequest
	SendTransactionResponse
*/
package rpcpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Request message of GetAccountState rpc.
type GetAccountStateRequest struct {
	// Hex string of the account addresss.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Hex string block number, or one of "latest", "earliest" or "pending". If not specified, use "latest".
	Block string `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *GetAccountStateRequest) Reset()                    { *m = GetAccountStateRequest{} }
func (m *GetAccountStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateRequest) ProtoMessage()               {}
func (*GetAccountStateRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *GetAccountStateRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAccountStateRequest) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

// Response message of GetAccountState rpc.
type GetAccountStateResponse struct {
	// Current balance in unit of 1/(10^18) nas.
	Balance []byte `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// Current transaction count.
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *GetAccountStateResponse) Reset()                    { *m = GetAccountStateResponse{} }
func (m *GetAccountStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateResponse) ProtoMessage()               {}
func (*GetAccountStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *GetAccountStateResponse) GetBalance() []byte {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *GetAccountStateResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// Request message of SendTransaction rpc.
type SendTransactionRequest struct {
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *SendTransactionRequest) Reset()                    { *m = SendTransactionRequest{} }
func (m *SendTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionRequest) ProtoMessage()               {}
func (*SendTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

func (m *SendTransactionRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *SendTransactionRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *SendTransactionRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SendTransactionRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// Response message of SendTransaction rpc.
type SendTransactionResponse struct {
	// Hex string of transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *SendTransactionResponse) Reset()                    { *m = SendTransactionResponse{} }
func (m *SendTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionResponse) ProtoMessage()               {}
func (*SendTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

func (m *SendTransactionResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*GetAccountStateRequest)(nil), "rpcpb.GetAccountStateRequest")
	proto.RegisterType((*GetAccountStateResponse)(nil), "rpcpb.GetAccountStateResponse")
	proto.RegisterType((*SendTransactionRequest)(nil), "rpcpb.SendTransactionRequest")
	proto.RegisterType((*SendTransactionResponse)(nil), "rpcpb.SendTransactionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for APIService service

type APIServiceClient interface {
	// Return the state of the account.
	GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error)
	// Verify, sign, and send the transaction.
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
}

type aPIServiceClient struct {
	cc *grpc.ClientConn
}

func NewAPIServiceClient(cc *grpc.ClientConn) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error) {
	out := new(GetAccountStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/GetAccountState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.APIService/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for APIService service

type APIServiceServer interface {
	// Return the state of the account.
	GetAccountState(context.Context, *GetAccountStateRequest) (*GetAccountStateResponse, error)
	// Verify, sign, and send the transaction.
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
}

func RegisterAPIServiceServer(s *grpc.Server, srv APIServiceServer) {
	s.RegisterService(&_APIService_serviceDesc, srv)
}

func _APIService_GetAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/GetAccountState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetAccountState(ctx, req.(*GetAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.APIService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _APIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountState",
			Handler:    _APIService_GetAccountState_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _APIService_SendTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4d, 0x4e, 0xc3, 0x30,
	0x10, 0x85, 0x9b, 0x90, 0x82, 0x3a, 0x42, 0x20, 0x59, 0xa8, 0x8d, 0x90, 0x40, 0xc8, 0x2b, 0x36,
	0x64, 0x01, 0x27, 0xe8, 0x0a, 0xba, 0x43, 0x0e, 0x17, 0x70, 0x9c, 0x41, 0xa9, 0x08, 0x1e, 0x63,
	0x3b, 0x3d, 0x19, 0x07, 0x44, 0x76, 0x92, 0x52, 0xf5, 0x67, 0x37, 0x6f, 0x2c, 0x7d, 0xef, 0xcd,
	0x33, 0xcc, 0xac, 0x51, 0x85, 0xb1, 0xe4, 0x89, 0x4d, 0xad, 0x51, 0xa6, 0xe2, 0x6f, 0x30, 0x7f,
	0x45, 0xbf, 0x54, 0x8a, 0x3a, 0xed, 0x4b, 0x2f, 0x3d, 0x0a, 0xfc, 0xe9, 0xd0, 0x79, 0x96, 0xc3,
	0x85, 0xac, 0x6b, 0x8b, 0xce, 0xe5, 0xc9, 0x43, 0xf2, 0x38, 0x13, 0xa3, 0x64, 0x37, 0x30, 0xad,
	0x5a, 0x52, 0x5f, 0x79, 0x1a, 0xf7, 0xbd, 0xe0, 0x2b, 0x58, 0x1c, 0x90, 0x9c, 0x21, 0xed, 0x30,
	0xa0, 0x2a, 0xd9, 0x4a, 0xad, 0x30, 0xa2, 0x2e, 0xc5, 0x28, 0x03, 0x4a, 0x53, 0xd8, 0x07, 0x54,
	0x26, 0x7a, 0xc1, 0x1b, 0x98, 0x97, 0xa8, 0xeb, 0x0f, 0x2b, 0xb5, 0x93, 0xca, 0xaf, 0x49, 0x8f,
	0xa1, 0x18, 0x64, 0x9f, 0x96, 0xbe, 0x87, 0x44, 0x71, 0x66, 0x57, 0x90, 0x7a, 0x1a, 0xb2, 0xa4,
	0x9e, 0x02, 0x73, 0x23, 0xdb, 0x0e, 0xf3, 0xb3, 0xe8, 0xd5, 0x8b, 0x7f, 0xa7, 0x6c, 0xd7, 0xe9,
	0x09, 0x16, 0x07, 0x4e, 0x43, 0x68, 0x06, 0x59, 0x23, 0x5d, 0x33, 0x5a, 0x85, 0xf9, 0xf9, 0x37,
	0x01, 0x58, 0xbe, 0xaf, 0x4a, 0xb4, 0x9b, 0xb5, 0x42, 0x26, 0xe0, 0x7a, 0xef, 0x64, 0x76, 0x57,
	0xc4, 0x5e, 0x8b, 0xe3, 0xa5, 0xde, 0xde, 0x9f, 0x7a, 0xee, 0x4d, 0xf9, 0x24, 0x30, 0xf7, 0x12,
	0x6d, 0x99, 0xc7, 0x3b, 0xd9, 0x32, 0x4f, 0x1c, 0xc2, 0x27, 0xd5, 0x79, 0xfc, 0xf2, 0x97, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x26, 0xe2, 0x72, 0x3a, 0xff, 0x01, 0x00, 0x00,
}
