// Copyright (C) 2017 go-nebulas authors
//
// This file is part of the go-nebulas library.
//
// the go-nebulas library is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// the go-nebulas library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with the go-nebulas library.  If not, see <http://www.gnu.org/licenses/>.
//

syntax = "proto3";

package rpcpb;

// RPC Managment interface.
service ManagementService {

    // NewAccount create a new account with passphrase
    rpc NewAccount(NewAccountRequest) returns (NewAccountResponse) {

    }

    // UnlockAccount unlock account with passphrase
    rpc UnlockAccount(UnlockAccountRequest) returns (UnlockAccountResponse) {

    }

    // LockAccount lock account
    rpc LockAccount(LockAccountRequest) returns (LockAccountResponse) {

    }

    // SignTransaction sign transaction
    rpc SignTransaction(SignTransactionRequest) returns (SignTransactionResponse) {

    }

    // sendTransactionWithPassphrase send transaction with passphrase
    rpc sendTransactionWithPassphrase(SendTransactionPassphraseRequest) returns (SendTransactionPassphraseResponse) {

    }

}

message NewAccountRequest {
    string passphrase = 1;
}

message NewAccountResponse {
    string address = 1;
}

message UnlockAccountRequest {
    string address = 1;
    string passphrase = 2;
}

message UnlockAccountResponse {
    bool result = 1;
}

message LockAccountRequest {
    string address = 1;
    string passphrase = 2;
}

message LockAccountResponse {
    bool result = 1;
}

message SignTransactionRequest {
    // Hex string of the sender account addresss.
    string from = 1;

    // Hex string of the receiver account addresss.
    string to = 2;

    // Amount of value sending with this transaction.
    bytes value = 3; // uint128, len=16

    // Transaction nonce.
    uint64 nonce = 4;

    // TODO: gas provided for the transaction.

    // TODO: contract code bytes or hash.
}

message SignTransactionResponse {
    bytes data = 1;
}

message SendTransactionPassphraseRequest {
    // Hex string of the sender account addresss.
    string from = 1;

    // Hex string of the receiver account addresss.
    string to = 2;

    // Amount of value sending with this transaction.
    bytes value = 3; // uint128, len=16

    // Transaction nonce.
    uint64 nonce = 4;

    // from account passphrase
    string passphrase = 5;

    // TODO: gas provided for the transaction.

    // TODO: contract code bytes or hash.
}

message SendTransactionPassphraseResponse {
    // Hex string of transaction hash.
    string hash = 1;
}