// Copyright (C) 2017 go-nebulas authors
//
// This file is part of the go-nebulas library.
//
// the go-nebulas library is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// the go-nebulas library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with the go-nebulas library.  If not, see <http://www.gnu.org/licenses/>.
//

syntax = "proto3";

// TODO: support restful endpoints.
//import "google/api/annotations.proto";

package rpcpb;

// RPC API interface.
service APIService {
	// Return the state of the neb.
	rpc GetNebState (GetNebStateRequest) returns (GetNebStateResponse) {
//		option (google.api.http) = {
//			get: "/v1/account/state"
//		};
	}

	// Return the state of the account.
	rpc GetAccountState (GetAccountStateRequest) returns (GetAccountStateResponse) {
//		option (google.api.http) = {
//            get: "/v1/account/state"
//        };
	}

	// Verify, sign, and send the transaction.
	rpc SendTransaction (SendTransactionRequest) returns (SendTransactionResponse) {
//		option (google.api.http) = {
//            post: "/v1/transaction"
//            body: "*"
//        };
	}
}

// Request message of GetNebState rpc.
message GetNebStateRequest {
}

// Response message of GetNebState rpc.
message GetNebStateResponse {

	// Block chain id
	uint32 chainID = 1;

	// Current neb tail hash
	string tail = 2;

	// Neb coinbase
	string coinbase = 3;

	// Number of peers currenly connected
	uint32 peerCount = 4;

	// Neb mine status, minging is true ,otherwise false
	bool isMining = 5;
}

// Request message of GetAccountState rpc.
message GetAccountStateRequest {
	// Hex string of the account addresss.
	string address = 1;

	// Hex string block number, or one of "latest", "earliest" or "pending". If not specified, use "latest".
	string block = 2;
}

// Response message of GetAccountState rpc.
message GetAccountStateResponse {
	// Current balance in unit of 1/(10^18) nas.
	bytes balance = 1; // uint128, len=16

	// Current transaction count.
	uint64 nonce = 2;
}

// Request message of SendTransaction rpc.
message SendTransactionRequest {
	// Hex string of the sender account addresss.
	string from = 1;

	// Hex string of the receiver account addresss.
	string to = 2;

	// Amount of value sending with this transaction.
	bytes value = 3; // uint128, len=16

	// Transaction nonce.
	uint64 nonce = 4;

	// TODO: gas provided for the transaction.

	// TODO: contract code bytes or hash.
}

// Response message of SendTransaction rpc.
message SendTransactionResponse {
	// Hex string of transaction hash.
	string hash = 1;
}
