// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: block.proto

/*
Package corepb is a generated protocol buffer package.

It is generated from these files:
	block.proto

It has these top-level messages:
	Account
	Data
	Transaction
	DposContext
	BlockHeader
	Block
	NetBlocks
	NetBlock
*/
package corepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Account struct {
	Balance    []byte `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Nonce      uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	VarsHash   []byte `protobuf:"bytes,3,opt,name=vars_hash,json=varsHash,proto3" json:"vars_hash,omitempty"`
	BirthPlace []byte `protobuf:"bytes,4,opt,name=birth_place,json=birthPlace,proto3" json:"birth_place,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{0} }

func (m *Account) GetBalance() []byte {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *Account) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Account) GetVarsHash() []byte {
	if m != nil {
		return m.VarsHash
	}
	return nil
}

func (m *Account) GetBirthPlace() []byte {
	if m != nil {
		return m.BirthPlace
	}
	return nil
}

type Data struct {
	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{1} }

func (m *Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Data) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Transaction struct {
	Hash      []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	From      []byte `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To        []byte `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Value     []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Nonce     uint64 `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Timestamp int64  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data      *Data  `protobuf:"bytes,7,opt,name=data" json:"data,omitempty"`
	ChainId   uint32 `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	GasPrice  []byte `protobuf:"bytes,9,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit  []byte `protobuf:"bytes,10,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Alg       uint32 `protobuf:"varint,11,opt,name=alg,proto3" json:"alg,omitempty"`
	Sign      []byte `protobuf:"bytes,12,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{2} }

func (m *Transaction) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Transaction) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Transaction) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Transaction) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Transaction) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Transaction) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *Transaction) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *Transaction) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *Transaction) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

func (m *Transaction) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type DposContext struct {
	DynastyRoot     []byte `protobuf:"bytes,1,opt,name=dynasty_root,json=dynastyRoot,proto3" json:"dynasty_root,omitempty"`
	NextDynastyRoot []byte `protobuf:"bytes,2,opt,name=next_dynasty_root,json=nextDynastyRoot,proto3" json:"next_dynasty_root,omitempty"`
	DelegateRoot    []byte `protobuf:"bytes,3,opt,name=delegate_root,json=delegateRoot,proto3" json:"delegate_root,omitempty"`
	CandidateRoot   []byte `protobuf:"bytes,4,opt,name=candidate_root,json=candidateRoot,proto3" json:"candidate_root,omitempty"`
	VoteRoot        []byte `protobuf:"bytes,5,opt,name=vote_root,json=voteRoot,proto3" json:"vote_root,omitempty"`
	MintCntRoot     []byte `protobuf:"bytes,6,opt,name=mint_cnt_root,json=mintCntRoot,proto3" json:"mint_cnt_root,omitempty"`
}

func (m *DposContext) Reset()                    { *m = DposContext{} }
func (m *DposContext) String() string            { return proto.CompactTextString(m) }
func (*DposContext) ProtoMessage()               {}
func (*DposContext) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{3} }

func (m *DposContext) GetDynastyRoot() []byte {
	if m != nil {
		return m.DynastyRoot
	}
	return nil
}

func (m *DposContext) GetNextDynastyRoot() []byte {
	if m != nil {
		return m.NextDynastyRoot
	}
	return nil
}

func (m *DposContext) GetDelegateRoot() []byte {
	if m != nil {
		return m.DelegateRoot
	}
	return nil
}

func (m *DposContext) GetCandidateRoot() []byte {
	if m != nil {
		return m.CandidateRoot
	}
	return nil
}

func (m *DposContext) GetVoteRoot() []byte {
	if m != nil {
		return m.VoteRoot
	}
	return nil
}

func (m *DposContext) GetMintCntRoot() []byte {
	if m != nil {
		return m.MintCntRoot
	}
	return nil
}

type BlockHeader struct {
	Hash        []byte       `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash  []byte       `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Nonce       uint64       `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Coinbase    []byte       `protobuf:"bytes,4,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	Timestamp   int64        `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ChainId     uint32       `protobuf:"varint,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Alg         uint32       `protobuf:"varint,7,opt,name=alg,proto3" json:"alg,omitempty"`
	Sign        []byte       `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`
	StateRoot   []byte       `protobuf:"bytes,9,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	TxsRoot     []byte       `protobuf:"bytes,10,opt,name=txs_root,json=txsRoot,proto3" json:"txs_root,omitempty"`
	DposContext *DposContext `protobuf:"bytes,11,opt,name=dpos_context,json=dposContext" json:"dpos_context,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{4} }

func (m *BlockHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockHeader) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *BlockHeader) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BlockHeader) GetCoinbase() []byte {
	if m != nil {
		return m.Coinbase
	}
	return nil
}

func (m *BlockHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeader) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *BlockHeader) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

func (m *BlockHeader) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *BlockHeader) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *BlockHeader) GetTxsRoot() []byte {
	if m != nil {
		return m.TxsRoot
	}
	return nil
}

func (m *BlockHeader) GetDposContext() *DposContext {
	if m != nil {
		return m.DposContext
	}
	return nil
}

type Block struct {
	Header       *BlockHeader   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
	Height       uint64         `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{5} }

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type NetBlocks struct {
	From   string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Batch  uint64   `protobuf:"varint,2,opt,name=batch,proto3" json:"batch,omitempty"`
	Blocks []*Block `protobuf:"bytes,3,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *NetBlocks) Reset()                    { *m = NetBlocks{} }
func (m *NetBlocks) String() string            { return proto.CompactTextString(m) }
func (*NetBlocks) ProtoMessage()               {}
func (*NetBlocks) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{6} }

func (m *NetBlocks) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *NetBlocks) GetBatch() uint64 {
	if m != nil {
		return m.Batch
	}
	return 0
}

func (m *NetBlocks) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type NetBlock struct {
	From  string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Batch uint64 `protobuf:"varint,2,opt,name=batch,proto3" json:"batch,omitempty"`
	Block *Block `protobuf:"bytes,3,opt,name=block" json:"block,omitempty"`
}

func (m *NetBlock) Reset()                    { *m = NetBlock{} }
func (m *NetBlock) String() string            { return proto.CompactTextString(m) }
func (*NetBlock) ProtoMessage()               {}
func (*NetBlock) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{7} }

func (m *NetBlock) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *NetBlock) GetBatch() uint64 {
	if m != nil {
		return m.Batch
	}
	return 0
}

func (m *NetBlock) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func init() {
	proto.RegisterType((*Account)(nil), "corepb.Account")
	proto.RegisterType((*Data)(nil), "corepb.Data")
	proto.RegisterType((*Transaction)(nil), "corepb.Transaction")
	proto.RegisterType((*DposContext)(nil), "corepb.DposContext")
	proto.RegisterType((*BlockHeader)(nil), "corepb.BlockHeader")
	proto.RegisterType((*Block)(nil), "corepb.Block")
	proto.RegisterType((*NetBlocks)(nil), "corepb.NetBlocks")
	proto.RegisterType((*NetBlock)(nil), "corepb.NetBlock")
}

func init() { proto.RegisterFile("block.proto", fileDescriptorBlock) }

var fileDescriptorBlock = []byte{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4b, 0x8b, 0xd4, 0x40,
	0x10, 0x26, 0xf3, 0x9e, 0x4a, 0xd6, 0x47, 0xbb, 0x48, 0xd6, 0x07, 0x1b, 0xb3, 0x08, 0x83, 0xc2,
	0x1e, 0x56, 0xd1, 0xb3, 0xba, 0x87, 0x15, 0x44, 0x96, 0xe0, 0x45, 0x10, 0x42, 0x25, 0x69, 0x27,
	0xc1, 0x4c, 0x3a, 0xa4, 0x6b, 0xd7, 0x99, 0xa3, 0x07, 0xff, 0x8d, 0x7f, 0xc3, 0xff, 0x25, 0x5d,
	0x9d, 0xcc, 0x64, 0x5c, 0x2f, 0xde, 0xfa, 0xab, 0x47, 0x57, 0xd5, 0xf7, 0x75, 0x35, 0xb8, 0x49,
	0xa9, 0xd2, 0x6f, 0xa7, 0x75, 0xa3, 0x48, 0x89, 0x49, 0xaa, 0x1a, 0x59, 0x27, 0xe1, 0x77, 0x98,
	0xbe, 0x49, 0x53, 0x75, 0x55, 0x91, 0xf0, 0x61, 0x9a, 0x60, 0x89, 0x55, 0x2a, 0x7d, 0x27, 0x70,
	0x16, 0x5e, 0xd4, 0x41, 0x71, 0x08, 0xe3, 0x4a, 0x19, 0xfb, 0x20, 0x70, 0x16, 0xa3, 0xc8, 0x02,
	0xf1, 0x10, 0xe6, 0xd7, 0xd8, 0xe8, 0x38, 0x47, 0x9d, 0xfb, 0x43, 0xce, 0x98, 0x19, 0xc3, 0x05,
	0xea, 0x5c, 0x1c, 0x83, 0x9b, 0x14, 0x0d, 0xe5, 0x71, 0x5d, 0x62, 0x2a, 0xfd, 0x11, 0xbb, 0x81,
	0x4d, 0x97, 0xc6, 0x12, 0xbe, 0x84, 0xd1, 0x39, 0x12, 0x0a, 0x01, 0x23, 0xda, 0xd4, 0xb6, 0xe4,
	0x3c, 0xe2, 0xb3, 0xe9, 0xa4, 0xc6, 0x4d, 0xa9, 0x30, 0xe3, 0x8a, 0x5e, 0xd4, 0xc1, 0xf0, 0xd7,
	0x00, 0xdc, 0x4f, 0x0d, 0x56, 0x1a, 0x53, 0x2a, 0x54, 0x65, 0xb2, 0xb9, 0xbc, 0x6d, 0x98, 0xcf,
	0xc6, 0xf6, 0xb5, 0x51, 0xab, 0x36, 0x95, 0xcf, 0xe2, 0x16, 0x0c, 0x48, 0xb5, 0x4d, 0x0e, 0x48,
	0x99, 0x89, 0xae, 0xb1, 0xbc, 0xea, 0x1a, 0xb3, 0x60, 0x37, 0xe7, 0xb8, 0x3f, 0xe7, 0x23, 0x98,
	0x53, 0xb1, 0x92, 0x9a, 0x70, 0x55, 0xfb, 0x93, 0xc0, 0x59, 0x0c, 0xa3, 0x9d, 0x41, 0x04, 0x30,
	0xca, 0x90, 0xd0, 0x9f, 0x06, 0xce, 0xc2, 0x3d, 0xf3, 0x4e, 0x2d, 0xaf, 0xa7, 0x66, 0xb6, 0x88,
	0x3d, 0xe2, 0x08, 0x66, 0x69, 0x8e, 0x45, 0x15, 0x17, 0x99, 0x3f, 0x0b, 0x9c, 0xc5, 0x41, 0x34,
	0x65, 0xfc, 0x3e, 0x33, 0x14, 0x2e, 0x51, 0xc7, 0x75, 0x53, 0xa4, 0xd2, 0x9f, 0x5b, 0x0a, 0x97,
	0xa8, 0x2f, 0x0d, 0xee, 0x9c, 0x65, 0xb1, 0x2a, 0xc8, 0x87, 0xad, 0xf3, 0x83, 0xc1, 0xe2, 0x0e,
	0x0c, 0xb1, 0x5c, 0xfa, 0x2e, 0xdf, 0x67, 0x8e, 0x66, 0x6c, 0x5d, 0x2c, 0x2b, 0xdf, 0xb3, 0x63,
	0x9b, 0x73, 0xf8, 0xc3, 0x01, 0xf7, 0xbc, 0x56, 0xfa, 0x9d, 0xaa, 0x48, 0xae, 0x49, 0x3c, 0x01,
	0x2f, 0xdb, 0x54, 0xa8, 0x69, 0x13, 0x37, 0x4a, 0x51, 0x4b, 0x9b, 0xdb, 0xda, 0x22, 0xa5, 0x48,
	0x3c, 0x83, 0xbb, 0x95, 0x5c, 0x53, 0xbc, 0x17, 0x67, 0xa9, 0xbc, 0x6d, 0x1c, 0xe7, 0xbd, 0xd8,
	0x13, 0x38, 0xc8, 0x64, 0x29, 0x97, 0x48, 0xd2, 0xc6, 0x59, 0x82, 0xbd, 0xce, 0x68, 0x82, 0xc2,
	0xdf, 0x03, 0x70, 0xdf, 0x9a, 0x97, 0x77, 0x21, 0x31, 0x93, 0xcd, 0x3f, 0x25, 0x3b, 0x06, 0xb7,
	0xc6, 0x46, 0x56, 0x64, 0x1f, 0x93, 0x2d, 0x07, 0xd6, 0xc4, 0xcf, 0x69, 0xab, 0xcc, 0xb0, 0xaf,
	0xcc, 0x03, 0x98, 0xa5, 0xaa, 0xa8, 0x12, 0xd4, 0x9d, 0x90, 0x5b, 0xbc, 0xaf, 0xda, 0xf8, 0x6f,
	0xd5, 0xfa, 0x9a, 0x4c, 0xf6, 0x35, 0x69, 0x99, 0x9d, 0xde, 0x64, 0x76, 0xb6, 0x63, 0x56, 0x3c,
	0x06, 0xd0, 0xb4, 0x9d, 0xdb, 0x4a, 0x37, 0x67, 0x0b, 0x33, 0x73, 0x04, 0x33, 0x5a, 0x6b, 0xeb,
	0xb4, 0xd2, 0x4d, 0x69, 0xad, 0xd9, 0xf5, 0x0a, 0xbc, 0xac, 0x56, 0x3a, 0x4e, 0xad, 0x26, 0x2c,
	0xa1, 0x7b, 0x76, 0x6f, 0xfb, 0x70, 0x76, 0x72, 0x45, 0x6e, 0xb6, 0x03, 0xe1, 0x4f, 0x07, 0xc6,
	0xcc, 0xa3, 0x78, 0x0e, 0x93, 0x9c, 0xb9, 0x64, 0x0e, 0x7b, 0xb9, 0x3d, 0x9a, 0xa3, 0x36, 0x44,
	0xbc, 0x06, 0x8f, 0x76, 0x0b, 0xa3, 0xfd, 0x41, 0x30, 0xec, 0xa7, 0xf4, 0x96, 0x29, 0xda, 0x0b,
	0x14, 0xf7, 0x4d, 0x95, 0x62, 0x99, 0x53, 0xcb, 0x79, 0x8b, 0xc2, 0x2f, 0x30, 0xff, 0x28, 0x89,
	0x4b, 0xe9, 0xed, 0xae, 0xb5, 0xdb, 0xcb, 0xbb, 0x76, 0x08, 0xe3, 0x04, 0x29, 0xcd, 0xbb, 0xdf,
	0x82, 0x81, 0x78, 0x0a, 0x13, 0xfe, 0x7f, 0xb4, 0x3f, 0xe4, 0x0e, 0x0e, 0xf6, 0x9a, 0x8e, 0x5a,
	0x67, 0xf8, 0x19, 0x66, 0xdd, 0xed, 0xff, 0x71, 0xf9, 0x09, 0x8c, 0x39, 0x9f, 0x5b, 0xbd, 0x71,
	0xb7, 0xf5, 0x25, 0x13, 0xfe, 0xf9, 0x5e, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x2e, 0xc2,
	0x80, 0x08, 0x05, 0x00, 0x00,
=======
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xd4, 0x3a,
	0x10, 0x56, 0xf6, 0x7f, 0x27, 0x69, 0x7b, 0x8e, 0xcf, 0xd1, 0x51, 0x7a, 0x00, 0x35, 0xa4, 0x42,
	0xac, 0x40, 0xea, 0x45, 0x41, 0x70, 0x0d, 0xf4, 0xa2, 0x48, 0x08, 0x55, 0x11, 0x37, 0x48, 0x48,
	0xd1, 0x6c, 0x62, 0x36, 0x11, 0xd9, 0x38, 0x8a, 0xa7, 0x65, 0xf7, 0x01, 0x78, 0x19, 0xc4, 0x6b,
	0xf0, 0x5e, 0xc8, 0xe3, 0x64, 0x93, 0xa5, 0xbd, 0xe1, 0xce, 0xdf, 0x37, 0x33, 0xf6, 0xcc, 0xf7,
	0xd9, 0x06, 0x77, 0x59, 0xa8, 0xe4, 0xcb, 0x59, 0x55, 0x2b, 0x52, 0x62, 0x92, 0xa8, 0x5a, 0x56,
	0xcb, 0xf0, 0x2b, 0x4c, 0x5f, 0x25, 0x89, 0xba, 0x2e, 0x49, 0xf8, 0x30, 0x5d, 0x62, 0x81, 0x65,
	0x22, 0x7d, 0x27, 0x70, 0x16, 0x5e, 0xd4, 0x42, 0xf1, 0x2f, 0x8c, 0x4b, 0x65, 0xf8, 0x41, 0xe0,
	0x2c, 0x46, 0x91, 0x05, 0xe2, 0x1e, 0xcc, 0x6f, 0xb0, 0xd6, 0x71, 0x86, 0x3a, 0xf3, 0x87, 0x5c,
	0x31, 0x33, 0xc4, 0x25, 0xea, 0x4c, 0x9c, 0x80, 0xbb, 0xcc, 0x6b, 0xca, 0xe2, 0xaa, 0xc0, 0x44,
	0xfa, 0x23, 0x0e, 0x03, 0x53, 0x57, 0x86, 0x09, 0x9f, 0xc3, 0xe8, 0x02, 0x09, 0x85, 0x80, 0x11,
	0x6d, 0x2b, 0x7b, 0xe4, 0x3c, 0xe2, 0xb5, 0xe9, 0xa4, 0xc2, 0x6d, 0xa1, 0x30, 0xe5, 0x13, 0xbd,
	0xa8, 0x85, 0xe1, 0x8f, 0x01, 0xb8, 0x1f, 0x6a, 0x2c, 0x35, 0x26, 0x94, 0xab, 0xd2, 0x54, 0xf3,
	0xf1, 0xb6, 0x61, 0x5e, 0x1b, 0xee, 0x73, 0xad, 0xd6, 0x4d, 0x29, 0xaf, 0xc5, 0x21, 0x0c, 0x48,
	0x35, 0x4d, 0x0e, 0x48, 0x99, 0x89, 0x6e, 0xb0, 0xb8, 0x6e, 0x1b, 0xb3, 0xa0, 0x9b, 0x73, 0xdc,
	0x9f, 0xf3, 0x3e, 0xcc, 0x29, 0x5f, 0x4b, 0x4d, 0xb8, 0xae, 0xfc, 0x49, 0xe0, 0x2c, 0x86, 0x51,
	0x47, 0x88, 0x00, 0x46, 0x29, 0x12, 0xfa, 0xd3, 0xc0, 0x59, 0xb8, 0xe7, 0xde, 0x99, 0xd5, 0xf5,
	0xcc, 0xcc, 0x16, 0x71, 0x44, 0x1c, 0xc3, 0x2c, 0xc9, 0x30, 0x2f, 0xe3, 0x3c, 0xf5, 0x67, 0x81,
	0xb3, 0x38, 0x88, 0xa6, 0x8c, 0xdf, 0xa6, 0x46, 0xc2, 0x15, 0xea, 0xb8, 0xaa, 0xf3, 0x44, 0xfa,
	0x73, 0x2b, 0xe1, 0x0a, 0xf5, 0x95, 0xc1, 0x6d, 0xb0, 0xc8, 0xd7, 0x39, 0xf9, 0xb0, 0x0b, 0xbe,
	0x33, 0x58, 0xfc, 0x05, 0x43, 0x2c, 0x56, 0xbe, 0xcb, 0xfb, 0x99, 0xa5, 0x19, 0x5b, 0xe7, 0xab,
	0xd2, 0xf7, 0xec, 0xd8, 0x66, 0x1d, 0x7e, 0x77, 0xc0, 0xbd, 0xa8, 0x94, 0x7e, 0xa3, 0x4a, 0x92,
	0x1b, 0x12, 0x0f, 0xc1, 0x4b, 0xb7, 0x25, 0x6a, 0xda, 0xc6, 0xb5, 0x52, 0xd4, 0xc8, 0xe6, 0x36,
	0x5c, 0xa4, 0x14, 0x89, 0x27, 0xf0, 0x77, 0x29, 0x37, 0x14, 0xef, 0xe5, 0x59, 0x29, 0x8f, 0x4c,
	0xe0, 0xa2, 0x97, 0x7b, 0x0a, 0x07, 0xa9, 0x2c, 0xe4, 0x0a, 0x49, 0xda, 0x3c, 0x2b, 0xb0, 0xd7,
	0x92, 0x9c, 0xf4, 0x18, 0x8e, 0x12, 0x2c, 0xd3, 0x3c, 0x45, 0x92, 0xda, 0xa6, 0x59, 0xd1, 0x0f,
	0x3b, 0xda, 0x24, 0x86, 0x3f, 0x07, 0xe0, 0xbe, 0x36, 0x57, 0xf4, 0x52, 0x62, 0x2a, 0xeb, 0x3b,
	0xbd, 0x3d, 0x01, 0xb7, 0xc2, 0x5a, 0x96, 0x64, 0x6f, 0x9d, 0xed, 0x0b, 0x2c, 0xc5, 0xf7, 0x6e,
	0x67, 0xe1, 0xb0, 0x6f, 0xe1, 0xff, 0x30, 0x4b, 0x54, 0x5e, 0x2e, 0x51, 0xb7, 0x8e, 0xef, 0xf0,
	0xbe, 0xbd, 0xe3, 0xdf, 0xed, 0xed, 0x9b, 0x37, 0xd9, 0x37, 0xaf, 0xb1, 0x60, 0x7a, 0xdb, 0x82,
	0x59, 0x67, 0x81, 0x78, 0x00, 0xa0, 0x69, 0x27, 0x90, 0xf5, 0x78, 0xce, 0x0c, 0xab, 0x73, 0x0c,
	0x33, 0xda, 0x34, 0xb2, 0x58, 0x8f, 0xa7, 0xb4, 0x61, 0x3d, 0xc4, 0x0b, 0xf0, 0xd2, 0x4a, 0xe9,
	0x38, 0xb1, 0xe6, 0xb1, 0xd7, 0xee, 0xf9, 0x3f, 0xbb, 0x1b, 0xd6, 0xf9, 0x1a, 0xb9, 0x69, 0x07,
	0xc2, 0x6f, 0x0e, 0x8c, 0x59, 0x47, 0xf1, 0x14, 0x26, 0x19, 0x6b, 0xc9, 0x1a, 0xf6, 0x6a, 0x7b,
	0x32, 0x47, 0x4d, 0x8a, 0x78, 0x09, 0x1e, 0x75, 0x2f, 0x4b, 0xfb, 0x83, 0x60, 0xd8, 0x2f, 0xe9,
	0xbd, 0xba, 0x68, 0x2f, 0x51, 0xfc, 0x67, 0x4e, 0xc9, 0x57, 0x19, 0x35, 0x9a, 0x37, 0x28, 0xfc,
	0x04, 0xf3, 0xf7, 0x92, 0xf8, 0x28, 0xbd, 0x7b, 0x94, 0xcd, 0x33, 0xe7, 0x47, 0x79, 0xf7, 0xb7,
	0xf2, 0x08, 0x26, 0xfc, 0x51, 0x69, 0x7f, 0xc8, 0x1d, 0x1c, 0xec, 0x35, 0x1d, 0x35, 0xc1, 0xf0,
	0x23, 0xcc, 0xda, 0xdd, 0xff, 0x60, 0xf3, 0x53, 0x18, 0x73, 0x3d, 0xb7, 0x7a, 0x6b, 0x6f, 0x1b,
	0x5b, 0x4e, 0xf8, 0x8b, 0x7c, 0xf6, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x41, 0x85, 0x0c, 0x8f, 0x31,
	0x05, 0x00, 0x00,
>>>>>>> core: block.go. add candidatesTrie in block header.
=======
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd4, 0x30,
	0x10, 0x56, 0xf6, 0x37, 0x3b, 0xc9, 0x16, 0x30, 0x08, 0xa5, 0xfc, 0xa8, 0x21, 0x55, 0xa5, 0x15,
	0x48, 0x3d, 0x14, 0x04, 0x67, 0xa0, 0x87, 0x22, 0x21, 0x54, 0x45, 0x5c, 0x90, 0x90, 0x22, 0x6f,
	0x62, 0x36, 0x11, 0x59, 0x3b, 0x8a, 0xa7, 0x65, 0xf7, 0x01, 0x78, 0x1b, 0x5e, 0xa3, 0xef, 0x85,
	0x3c, 0x4e, 0xb2, 0x59, 0xda, 0x0b, 0x37, 0xcf, 0x37, 0x33, 0x9e, 0x99, 0xef, 0x1b, 0x1b, 0xbc,
	0x65, 0xa9, 0xd2, 0x9f, 0xa7, 0x55, 0xad, 0x50, 0xb1, 0x49, 0xaa, 0x6a, 0x51, 0x2d, 0xa3, 0x5f,
	0x30, 0x7d, 0x9f, 0xa6, 0xea, 0x4a, 0x22, 0x0b, 0x60, 0xba, 0xe4, 0x25, 0x97, 0xa9, 0x08, 0x9c,
	0xd0, 0x59, 0xf8, 0x71, 0x6b, 0xb2, 0x47, 0x30, 0x96, 0xca, 0xe0, 0x83, 0xd0, 0x59, 0x8c, 0x62,
	0x6b, 0xb0, 0xa7, 0x30, 0xbb, 0xe6, 0xb5, 0x4e, 0x72, 0xae, 0xf3, 0x60, 0x48, 0x19, 0xae, 0x01,
	0x2e, 0xb8, 0xce, 0xd9, 0x11, 0x78, 0xcb, 0xa2, 0xc6, 0x3c, 0xa9, 0x4a, 0x9e, 0x8a, 0x60, 0x44,
	0x6e, 0x20, 0xe8, 0xd2, 0x20, 0xd1, 0x1b, 0x18, 0x9d, 0x73, 0xe4, 0x8c, 0xc1, 0x08, 0xb7, 0x95,
	0x2d, 0x39, 0x8b, 0xe9, 0x6c, 0x3a, 0xa9, 0xf8, 0xb6, 0x54, 0x3c, 0xa3, 0x8a, 0x7e, 0xdc, 0x9a,
	0xd1, 0x9f, 0x01, 0x78, 0x5f, 0x6b, 0x2e, 0x35, 0x4f, 0xb1, 0x50, 0xd2, 0x64, 0x53, 0x79, 0xdb,
	0x30, 0x9d, 0x0d, 0xf6, 0xa3, 0x56, 0xeb, 0x26, 0x95, 0xce, 0xec, 0x00, 0x06, 0xa8, 0x9a, 0x26,
	0x07, 0xa8, 0xcc, 0x44, 0xd7, 0xbc, 0xbc, 0x6a, 0x1b, 0xb3, 0xc6, 0x6e, 0xce, 0x71, 0x7f, 0xce,
	0x67, 0x30, 0xc3, 0x62, 0x2d, 0x34, 0xf2, 0x75, 0x15, 0x4c, 0x42, 0x67, 0x31, 0x8c, 0x77, 0x00,
	0x0b, 0x61, 0x94, 0x71, 0xe4, 0xc1, 0x34, 0x74, 0x16, 0xde, 0x99, 0x7f, 0x6a, 0x79, 0x3d, 0x35,
	0xb3, 0xc5, 0xe4, 0x61, 0x87, 0xe0, 0xa6, 0x39, 0x2f, 0x64, 0x52, 0x64, 0x81, 0x1b, 0x3a, 0x8b,
	0x79, 0x3c, 0x25, 0xfb, 0x53, 0x66, 0x28, 0x5c, 0x71, 0x9d, 0x54, 0x75, 0x91, 0x8a, 0x60, 0x66,
	0x29, 0x5c, 0x71, 0x7d, 0x69, 0xec, 0xd6, 0x59, 0x16, 0xeb, 0x02, 0x03, 0xe8, 0x9c, 0x9f, 0x8d,
	0xcd, 0xee, 0xc3, 0x90, 0x97, 0xab, 0xc0, 0xa3, 0xfb, 0xcc, 0xd1, 0x8c, 0xad, 0x8b, 0x95, 0x0c,
	0x7c, 0x3b, 0xb6, 0x39, 0x47, 0x37, 0x0e, 0x78, 0xe7, 0x95, 0xd2, 0x1f, 0x95, 0x44, 0xb1, 0x41,
	0xf6, 0x02, 0xfc, 0x6c, 0x2b, 0xb9, 0xc6, 0x6d, 0x52, 0x2b, 0x85, 0x0d, 0x6d, 0x5e, 0x83, 0xc5,
	0x4a, 0x21, 0x7b, 0x09, 0x0f, 0xa4, 0xd8, 0x60, 0xb2, 0x17, 0x67, 0xa9, 0xbc, 0x67, 0x1c, 0xe7,
	0xbd, 0xd8, 0x63, 0x98, 0x67, 0xa2, 0x14, 0x2b, 0x8e, 0xc2, 0xc6, 0x59, 0x82, 0xfd, 0x16, 0xa4,
	0xa0, 0x13, 0x38, 0x48, 0xb9, 0xcc, 0x8a, 0xac, 0x8b, 0xb2, 0x9c, 0xcf, 0x3b, 0x94, 0xc2, 0xcc,
	0x36, 0xa9, 0x36, 0x62, 0xdc, 0x6c, 0x93, 0xb2, 0xce, 0xe8, 0x66, 0x00, 0xde, 0x07, 0xb3, 0xbd,
	0x17, 0x82, 0x67, 0xa2, 0xbe, 0x53, 0xf6, 0x23, 0xf0, 0x2a, 0x5e, 0x0b, 0x89, 0x76, 0x21, 0x6d,
	0xcb, 0x60, 0x21, 0x5a, 0xc9, 0x4e, 0xdd, 0x61, 0x5f, 0xdd, 0x27, 0xe0, 0xa6, 0xaa, 0x90, 0x4b,
	0xae, 0xdb, 0x65, 0xe8, 0xec, 0x7d, 0xe5, 0xc7, 0xff, 0x2a, 0xdf, 0xd7, 0x75, 0xb2, 0xaf, 0x6b,
	0xa3, 0xce, 0xf4, 0xb6, 0x3a, 0xee, 0x4e, 0x1d, 0xf6, 0x1c, 0x40, 0x63, 0xc7, 0x8a, 0x95, 0x7f,
	0x46, 0x08, 0x31, 0x72, 0x08, 0x2e, 0x6e, 0xb4, 0x75, 0x5a, 0xf9, 0xa7, 0xb8, 0xd1, 0xe4, 0x7a,
	0x0b, 0x7e, 0x56, 0x29, 0x9d, 0xa4, 0x56, 0x57, 0x5a, 0x03, 0xef, 0xec, 0x61, 0xb7, 0x7c, 0x3b,
	0xc9, 0x63, 0x2f, 0xdb, 0x19, 0xd1, 0x6f, 0x07, 0xc6, 0xc4, 0x23, 0x7b, 0x05, 0x93, 0x9c, 0xb8,
	0x24, 0x0e, 0x7b, 0xb9, 0x3d, 0x9a, 0xe3, 0x26, 0x84, 0xbd, 0x03, 0x1f, 0x77, 0x8f, 0x4e, 0x07,
	0x83, 0x70, 0xd8, 0x4f, 0xe9, 0x3d, 0xc8, 0x78, 0x2f, 0x90, 0x3d, 0x36, 0x55, 0x8a, 0x55, 0x8e,
	0x0d, 0xe7, 0x8d, 0x15, 0x7d, 0x87, 0xd9, 0x17, 0x81, 0x54, 0x4a, 0x77, 0xef, 0xb5, 0xf9, 0x01,
	0xe8, 0xbd, 0xde, 0xfd, 0xe3, 0x9c, 0xc0, 0x84, 0xfe, 0x30, 0x1d, 0x0c, 0xa9, 0x83, 0xf9, 0x5e,
	0xd3, 0x71, 0xe3, 0x8c, 0xbe, 0x81, 0xdb, 0xde, 0xfe, 0x1f, 0x97, 0x1f, 0xc3, 0x98, 0xf2, 0xa9,
	0xd5, 0x5b, 0x77, 0x5b, 0xdf, 0x72, 0x42, 0xbf, 0xe7, 0xeb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xc5, 0xb7, 0x61, 0xf3, 0x4c, 0x05, 0x00, 0x00,
>>>>>>> core: transaction_candidate_payload.go. add login & logout.
=======
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xd4, 0x3c,
	0x10, 0x55, 0xf6, 0x37, 0x3b, 0xc9, 0xf6, 0xfb, 0x30, 0x08, 0xa5, 0xfc, 0xa8, 0x21, 0x55, 0xa5,
	0x15, 0x48, 0xbd, 0x28, 0x08, 0xae, 0xa1, 0xbd, 0x28, 0x12, 0x42, 0x55, 0xc4, 0x0d, 0x12, 0x52,
	0xe4, 0x4d, 0xcc, 0x26, 0x22, 0x6b, 0x47, 0xf1, 0xb4, 0xec, 0x3e, 0x00, 0x6f, 0xc3, 0x6b, 0xf0,
	0x30, 0xbc, 0x05, 0xf2, 0x38, 0xc9, 0x66, 0x69, 0x6f, 0xb8, 0xf3, 0x9c, 0x39, 0xb6, 0x67, 0xce,
	0x1c, 0x1b, 0xbc, 0x65, 0xa9, 0xd2, 0x6f, 0xa7, 0x55, 0xad, 0x50, 0xb1, 0x49, 0xaa, 0x6a, 0x51,
	0x2d, 0xa3, 0xef, 0x30, 0x7d, 0x9b, 0xa6, 0xea, 0x5a, 0x22, 0x0b, 0x60, 0xba, 0xe4, 0x25, 0x97,
	0xa9, 0x08, 0x9c, 0xd0, 0x59, 0xf8, 0x71, 0x1b, 0xb2, 0x07, 0x30, 0x96, 0xca, 0xe0, 0x83, 0xd0,
	0x59, 0x8c, 0x62, 0x1b, 0xb0, 0xc7, 0x30, 0xbb, 0xe1, 0xb5, 0x4e, 0x72, 0xae, 0xf3, 0x60, 0x48,
	0x3b, 0x5c, 0x03, 0x5c, 0x72, 0x9d, 0xb3, 0x23, 0xf0, 0x96, 0x45, 0x8d, 0x79, 0x52, 0x95, 0x3c,
	0x15, 0xc1, 0x88, 0xd2, 0x40, 0xd0, 0x95, 0x41, 0xa2, 0x57, 0x30, 0xba, 0xe0, 0xc8, 0x19, 0x83,
	0x11, 0x6e, 0x2b, 0x7b, 0xe5, 0x2c, 0xa6, 0xb5, 0xa9, 0xa4, 0xe2, 0xdb, 0x52, 0xf1, 0x8c, 0x6e,
	0xf4, 0xe3, 0x36, 0x8c, 0x7e, 0x0e, 0xc0, 0xfb, 0x54, 0x73, 0xa9, 0x79, 0x8a, 0x85, 0x92, 0x66,
	0x37, 0x5d, 0x6f, 0x0b, 0xa6, 0xb5, 0xc1, 0xbe, 0xd6, 0x6a, 0xdd, 0x6c, 0xa5, 0x35, 0x3b, 0x80,
	0x01, 0xaa, 0xa6, 0xc8, 0x01, 0x2a, 0xd3, 0xd1, 0x0d, 0x2f, 0xaf, 0xdb, 0xc2, 0x6c, 0xb0, 0xeb,
	0x73, 0xdc, 0xef, 0xf3, 0x09, 0xcc, 0xb0, 0x58, 0x0b, 0x8d, 0x7c, 0x5d, 0x05, 0x93, 0xd0, 0x59,
	0x0c, 0xe3, 0x1d, 0xc0, 0x42, 0x18, 0x65, 0x1c, 0x79, 0x30, 0x0d, 0x9d, 0x85, 0x77, 0xe6, 0x9f,
	0x5a, 0x5d, 0x4f, 0x4d, 0x6f, 0x31, 0x65, 0xd8, 0x21, 0xb8, 0x69, 0xce, 0x0b, 0x99, 0x14, 0x59,
	0xe0, 0x86, 0xce, 0x62, 0x1e, 0x4f, 0x29, 0x7e, 0x9f, 0x19, 0x09, 0x57, 0x5c, 0x27, 0x55, 0x5d,
	0xa4, 0x22, 0x98, 0x59, 0x09, 0x57, 0x5c, 0x5f, 0x99, 0xb8, 0x4d, 0x96, 0xc5, 0xba, 0xc0, 0x00,
	0xba, 0xe4, 0x07, 0x13, 0xb3, 0xff, 0x61, 0xc8, 0xcb, 0x55, 0xe0, 0xd1, 0x79, 0x66, 0x69, 0xda,
	0xd6, 0xc5, 0x4a, 0x06, 0xbe, 0x6d, 0xdb, 0xac, 0xa3, 0xdf, 0x0e, 0x78, 0x17, 0x95, 0xd2, 0xe7,
	0x4a, 0xa2, 0xd8, 0x20, 0x7b, 0x06, 0x7e, 0xb6, 0x95, 0x5c, 0xe3, 0x36, 0xa9, 0x95, 0xc2, 0x46,
	0x36, 0xaf, 0xc1, 0x62, 0xa5, 0x90, 0x3d, 0x87, 0x7b, 0x52, 0x6c, 0x30, 0xd9, 0xe3, 0x59, 0x29,
	0xff, 0x33, 0x89, 0x8b, 0x1e, 0xf7, 0x18, 0xe6, 0x99, 0x28, 0xc5, 0x8a, 0xa3, 0xb0, 0x3c, 0x2b,
	0xb0, 0xdf, 0x82, 0x44, 0x3a, 0x81, 0x83, 0x94, 0xcb, 0xac, 0xc8, 0x3a, 0x96, 0xd5, 0x7c, 0xde,
	0xa1, 0x44, 0x33, 0x6e, 0x52, 0x2d, 0x63, 0xdc, 0xb8, 0x49, 0x35, 0xc9, 0x08, 0xe6, 0xeb, 0x42,
	0x62, 0x92, 0x4a, 0xb4, 0x84, 0x89, 0x2d, 0xdc, 0x80, 0xe7, 0x12, 0x0d, 0x27, 0xfa, 0x35, 0x00,
	0xef, 0x9d, 0x71, 0xf8, 0xa5, 0xe0, 0x99, 0xa8, 0xef, 0xb4, 0xc6, 0x11, 0x78, 0x15, 0xaf, 0x85,
	0x44, 0x6b, 0x5a, 0xdb, 0x16, 0x58, 0x88, 0x6c, 0xdb, 0x39, 0x60, 0xd8, 0x77, 0xc0, 0x23, 0x70,
	0x53, 0x55, 0xc8, 0x25, 0xd7, 0xad, 0x61, 0xba, 0x78, 0xdf, 0x1d, 0xe3, 0xbf, 0xdd, 0xd1, 0x9f,
	0xfd, 0x64, 0x7f, 0xf6, 0xcd, 0x04, 0xa7, 0xb7, 0x27, 0xe8, 0xee, 0x26, 0xc8, 0x9e, 0x02, 0x68,
	0xec, 0x94, 0xb3, 0x16, 0x99, 0x11, 0x42, 0xc2, 0x1c, 0x82, 0x8b, 0x1b, 0x6d, 0x93, 0xd6, 0x22,
	0x53, 0xdc, 0x68, 0x4a, 0xbd, 0x06, 0x3f, 0xab, 0x94, 0x4e, 0x52, 0x3b, 0x7b, 0xb2, 0x8a, 0x77,
	0x76, 0xbf, 0x33, 0xe8, 0xce, 0x16, 0xb1, 0x97, 0xed, 0x82, 0xe8, 0x87, 0x03, 0x63, 0xd2, 0x91,
	0xbd, 0x80, 0x49, 0x4e, 0x5a, 0x92, 0x86, 0xbd, 0xbd, 0x3d, 0x99, 0xe3, 0x86, 0xc2, 0xde, 0x80,
	0x8f, 0xbb, 0x87, 0xa9, 0x83, 0x41, 0x38, 0xec, 0x6f, 0xe9, 0x3d, 0xda, 0x78, 0x8f, 0xc8, 0x1e,
	0x9a, 0x5b, 0x8a, 0x55, 0x8e, 0x8d, 0xe6, 0x4d, 0x14, 0x7d, 0x81, 0xd9, 0x47, 0x81, 0x74, 0x95,
	0xee, 0xde, 0x74, 0xf3, 0x4b, 0xd0, 0x9b, 0xbe, 0xfb, 0x57, 0x3a, 0x81, 0x09, 0xfd, 0x73, 0x3a,
	0x18, 0x52, 0x05, 0xf3, 0xbd, 0xa2, 0xe3, 0x26, 0x19, 0x7d, 0x06, 0xb7, 0x3d, 0xfd, 0x1f, 0x0e,
	0x3f, 0x86, 0x31, 0xed, 0xa7, 0x52, 0x6f, 0x9d, 0x6d, 0x73, 0xcb, 0x09, 0xfd, 0xb0, 0x2f, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x19, 0x98, 0xd4, 0x70, 0x05, 0x00, 0x00,
>>>>>>> core: dpos_context.go. add kickout dump validators logic.
}
