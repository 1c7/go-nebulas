// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config.proto

/*
Package nebletpb is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	Config
	P2PConfig
	RPCConfig
*/
package nebletpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Neblet global configurations.
type Config struct {
	// P2P network config.
	P2P *P2PConfig `protobuf:"bytes,1,opt,name=p2p" json:"p2p,omitempty"`
	// RPC server config.
	Rpc *RPCConfig `protobuf:"bytes,2,opt,name=rpc" json:"rpc,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

func (m *Config) GetP2P() *P2PConfig {
	if m != nil {
		return m.P2P
	}
	return nil
}

func (m *Config) GetRpc() *RPCConfig {
	if m != nil {
		return m.Rpc
	}
	return nil
}

type P2PConfig struct {
	// P2P seed node addresses.
	Seed string `protobuf:"bytes,1,opt,name=seed,proto3" json:"seed,omitempty"`
	// P2P node port number.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *P2PConfig) Reset()                    { *m = P2PConfig{} }
func (m *P2PConfig) String() string            { return proto.CompactTextString(m) }
func (*P2PConfig) ProtoMessage()               {}
func (*P2PConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{1} }

func (m *P2PConfig) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

func (m *P2PConfig) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type RPCConfig struct {
	// RPC server listening port number.
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *RPCConfig) Reset()                    { *m = RPCConfig{} }
func (m *RPCConfig) String() string            { return proto.CompactTextString(m) }
func (*RPCConfig) ProtoMessage()               {}
func (*RPCConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{2} }

func (m *RPCConfig) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*Config)(nil), "nebletpb.Config")
	proto.RegisterType((*P2PConfig)(nil), "nebletpb.P2PConfig")
	proto.RegisterType((*RPCConfig)(nil), "nebletpb.RPCConfig")
}

func init() { proto.RegisterFile("config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc8, 0x4b, 0x4d, 0xca, 0x49, 0x2d,
	0x29, 0x48, 0x52, 0x0a, 0xe3, 0x62, 0x73, 0x06, 0xcb, 0x08, 0xa9, 0x72, 0x31, 0x17, 0x18, 0x15,
	0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x09, 0xeb, 0xc1, 0x54, 0xe8, 0x05, 0x18, 0x05, 0x40,
	0x54, 0x04, 0x81, 0xe4, 0x41, 0xca, 0x8a, 0x0a, 0x92, 0x25, 0x98, 0xd0, 0x95, 0x05, 0x05, 0x38,
	0xc3, 0x94, 0x15, 0x15, 0x24, 0x2b, 0x19, 0x73, 0x71, 0xc2, 0x35, 0x0a, 0x09, 0x71, 0xb1, 0x14,
	0xa7, 0xa6, 0xa6, 0x80, 0xcd, 0xe6, 0x0c, 0x02, 0xb3, 0x41, 0x62, 0x05, 0xf9, 0x45, 0x25, 0x60,
	0x83, 0x78, 0x83, 0xc0, 0x6c, 0x25, 0x79, 0x2e, 0x4e, 0xb8, 0x31, 0x70, 0x05, 0x8c, 0x08, 0x05,
	0x49, 0x6c, 0x60, 0xe7, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x42, 0x2f, 0xb9, 0x4e, 0xce,
	0x00, 0x00, 0x00,
}
