// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config.proto

/*
Package nebletpb is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	Config
	NetworkConfig
	ChainConfig
	RPCConfig
	AppConfig
	PprofConfig
	MiscConfig
	StatsConfig
	InfluxdbConfig
*/
package nebletpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reporting modules.
type StatsConfig_ReportingModule int32

const (
	StatsConfig_Influxdb StatsConfig_ReportingModule = 0
)

var StatsConfig_ReportingModule_name = map[int32]string{
	0: "Influxdb",
}
var StatsConfig_ReportingModule_value = map[string]int32{
	"Influxdb": 0,
}

func (x StatsConfig_ReportingModule) String() string {
	return proto.EnumName(StatsConfig_ReportingModule_name, int32(x))
}
func (StatsConfig_ReportingModule) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorConfig, []int{7, 0}
}

// Neblet global configurations.
type Config struct {
	// Network config.
	Network *NetworkConfig `protobuf:"bytes,1,opt,name=network" json:"network"`
	// Chain config.
	Chain *ChainConfig `protobuf:"bytes,2,opt,name=chain" json:"chain"`
	// RPC config.
	Rpc *RPCConfig `protobuf:"bytes,3,opt,name=rpc" json:"rpc"`
	// Stats config.
	Stats *StatsConfig `protobuf:"bytes,100,opt,name=stats" json:"stats"`
	// Misc config.
	Misc *MiscConfig `protobuf:"bytes,101,opt,name=misc" json:"misc"`
	// App Config.
	App *AppConfig `protobuf:"bytes,102,opt,name=app" json:"app"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

func (m *Config) GetNetwork() *NetworkConfig {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *Config) GetChain() *ChainConfig {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (m *Config) GetRpc() *RPCConfig {
	if m != nil {
		return m.Rpc
	}
	return nil
}

func (m *Config) GetStats() *StatsConfig {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Config) GetMisc() *MiscConfig {
	if m != nil {
		return m.Misc
	}
	return nil
}

func (m *Config) GetApp() *AppConfig {
	if m != nil {
		return m.App
	}
	return nil
}

type NetworkConfig struct {
	// Neb seed node address.
	Seed []string `protobuf:"bytes,1,rep,name=seed" json:"seed"`
	// Listen addresses.
	Listen []string `protobuf:"bytes,2,rep,name=listen" json:"listen"`
	// Network node privateKey address. If nil, generate a new node.
	PrivateKey string `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key"`
	// Network ID
	NetworkId            uint32 `protobuf:"varint,4,opt,name=network_id,json=networkId,proto3" json:"network_id"`
	StreamLimits         int32  `protobuf:"varint,5,opt,name=stream_limits,json=streamLimits,proto3" json:"stream_limits"`
	ReservedStreamLimits int32  `protobuf:"varint,6,opt,name=reserved_stream_limits,json=reservedStreamLimits,proto3" json:"reserved_stream_limits"`
}

func (m *NetworkConfig) Reset()                    { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()               {}
func (*NetworkConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{1} }

func (m *NetworkConfig) GetSeed() []string {
	if m != nil {
		return m.Seed
	}
	return nil
}

func (m *NetworkConfig) GetListen() []string {
	if m != nil {
		return m.Listen
	}
	return nil
}

func (m *NetworkConfig) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *NetworkConfig) GetNetworkId() uint32 {
	if m != nil {
		return m.NetworkId
	}
	return 0
}

func (m *NetworkConfig) GetStreamLimits() int32 {
	if m != nil {
		return m.StreamLimits
	}
	return 0
}

func (m *NetworkConfig) GetReservedStreamLimits() int32 {
	if m != nil {
		return m.ReservedStreamLimits
	}
	return 0
}

type ChainConfig struct {
	// ChainID.
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id"`
	// genesis conf file path
	Genesis string `protobuf:"bytes,2,opt,name=genesis,proto3" json:"genesis"`
	// Data dir.
	Datadir string `protobuf:"bytes,11,opt,name=datadir,proto3" json:"datadir"`
	// Key dir.
	Keydir string `protobuf:"bytes,12,opt,name=keydir,proto3" json:"keydir"`
	// Start mine at launch
	StartMine bool `protobuf:"varint,20,opt,name=start_mine,json=startMine,proto3" json:"start_mine"`
	// Coinbase.
	Coinbase string `protobuf:"bytes,21,opt,name=coinbase,proto3" json:"coinbase"`
	// Miner.
	Miner string `protobuf:"bytes,22,opt,name=miner,proto3" json:"miner"`
	// Passphrase.
	Passphrase string `protobuf:"bytes,23,opt,name=passphrase,proto3" json:"passphrase"`
	// Enable remote sign server
	EnableRemoteSignServer bool `protobuf:"varint,24,opt,name=enable_remote_sign_server,json=enableRemoteSignServer,proto3" json:"enable_remote_sign_server"`
	// Remote sign server
	RemoteSignServer string `protobuf:"bytes,25,opt,name=remote_sign_server,json=remoteSignServer,proto3" json:"remote_sign_server"`
	// Lowest GasPrice.
	GasPrice string `protobuf:"bytes,26,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price"`
	// Max GasLimit.
	GasLimit string `protobuf:"bytes,27,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit"`
	// Supported signature cipher list. ["ECC_SECP256K1"]
	SignatureCiphers []string `protobuf:"bytes,28,rep,name=signature_ciphers,json=signatureCiphers" json:"signature_ciphers"`
}

func (m *ChainConfig) Reset()                    { *m = ChainConfig{} }
func (m *ChainConfig) String() string            { return proto.CompactTextString(m) }
func (*ChainConfig) ProtoMessage()               {}
func (*ChainConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{2} }

func (m *ChainConfig) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ChainConfig) GetGenesis() string {
	if m != nil {
		return m.Genesis
	}
	return ""
}

func (m *ChainConfig) GetDatadir() string {
	if m != nil {
		return m.Datadir
	}
	return ""
}

func (m *ChainConfig) GetKeydir() string {
	if m != nil {
		return m.Keydir
	}
	return ""
}

func (m *ChainConfig) GetStartMine() bool {
	if m != nil {
		return m.StartMine
	}
	return false
}

func (m *ChainConfig) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *ChainConfig) GetMiner() string {
	if m != nil {
		return m.Miner
	}
	return ""
}

func (m *ChainConfig) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

func (m *ChainConfig) GetEnableRemoteSignServer() bool {
	if m != nil {
		return m.EnableRemoteSignServer
	}
	return false
}

func (m *ChainConfig) GetRemoteSignServer() string {
	if m != nil {
		return m.RemoteSignServer
	}
	return ""
}

func (m *ChainConfig) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func (m *ChainConfig) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

func (m *ChainConfig) GetSignatureCiphers() []string {
	if m != nil {
		return m.SignatureCiphers
	}
	return nil
}

type RPCConfig struct {
	// RPC listen addresses.
	RpcListen []string `protobuf:"bytes,1,rep,name=rpc_listen,json=rpcListen" json:"rpc_listen"`
	// HTTP listen addresses.
	HttpListen []string `protobuf:"bytes,2,rep,name=http_listen,json=httpListen" json:"http_listen"`
	// Enabled HTTP modules.["api", "admin"]
	HttpModule       []string `protobuf:"bytes,3,rep,name=http_module,json=httpModule" json:"http_module"`
	ConnectionLimits int32    `protobuf:"varint,4,opt,name=connection_limits,json=connectionLimits,proto3" json:"connection_limits"`
	HttpLimits       int32    `protobuf:"varint,5,opt,name=http_limits,json=httpLimits,proto3" json:"http_limits"`
	// HTTP CORS allowed origins
	HttpCors []string `protobuf:"bytes,6,rep,name=http_cors,json=httpCors" json:"http_cors"`
}

func (m *RPCConfig) Reset()                    { *m = RPCConfig{} }
func (m *RPCConfig) String() string            { return proto.CompactTextString(m) }
func (*RPCConfig) ProtoMessage()               {}
func (*RPCConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{3} }

func (m *RPCConfig) GetRpcListen() []string {
	if m != nil {
		return m.RpcListen
	}
	return nil
}

func (m *RPCConfig) GetHttpListen() []string {
	if m != nil {
		return m.HttpListen
	}
	return nil
}

func (m *RPCConfig) GetHttpModule() []string {
	if m != nil {
		return m.HttpModule
	}
	return nil
}

func (m *RPCConfig) GetConnectionLimits() int32 {
	if m != nil {
		return m.ConnectionLimits
	}
	return 0
}

func (m *RPCConfig) GetHttpLimits() int32 {
	if m != nil {
		return m.HttpLimits
	}
	return 0
}

func (m *RPCConfig) GetHttpCors() []string {
	if m != nil {
		return m.HttpCors
	}
	return nil
}

type AppConfig struct {
	LogLevel string `protobuf:"bytes,1,opt,name=log_level,json=logLevel,proto3" json:"log_level"`
	LogFile  string `protobuf:"bytes,2,opt,name=log_file,json=logFile,proto3" json:"log_file"`
	// log file age, unit is s.
	LogAge            uint32 `protobuf:"varint,3,opt,name=log_age,json=logAge,proto3" json:"log_age"`
	EnableCrashReport bool   `protobuf:"varint,4,opt,name=enable_crash_report,json=enableCrashReport,proto3" json:"enable_crash_report"`
	CrashReportUrl    string `protobuf:"bytes,5,opt,name=crash_report_url,json=crashReportUrl,proto3" json:"crash_report_url"`
	// pprof config
	Pprof   *PprofConfig `protobuf:"bytes,6,opt,name=pprof" json:"pprof"`
	Version string       `protobuf:"bytes,100,opt,name=version,proto3" json:"version"`
}

func (m *AppConfig) Reset()                    { *m = AppConfig{} }
func (m *AppConfig) String() string            { return proto.CompactTextString(m) }
func (*AppConfig) ProtoMessage()               {}
func (*AppConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{4} }

func (m *AppConfig) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

func (m *AppConfig) GetLogFile() string {
	if m != nil {
		return m.LogFile
	}
	return ""
}

func (m *AppConfig) GetLogAge() uint32 {
	if m != nil {
		return m.LogAge
	}
	return 0
}

func (m *AppConfig) GetEnableCrashReport() bool {
	if m != nil {
		return m.EnableCrashReport
	}
	return false
}

func (m *AppConfig) GetCrashReportUrl() string {
	if m != nil {
		return m.CrashReportUrl
	}
	return ""
}

func (m *AppConfig) GetPprof() *PprofConfig {
	if m != nil {
		return m.Pprof
	}
	return nil
}

func (m *AppConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type PprofConfig struct {
	// pprof listen address, if not configured, the function closes.
	HttpListen string `protobuf:"bytes,1,opt,name=http_listen,json=httpListen,proto3" json:"http_listen"`
	// cpu profiling file, if not configured, the profiling not start
	Cpuprofile string `protobuf:"bytes,2,opt,name=cpuprofile,proto3" json:"cpuprofile"`
	// memory profiling file, if not configured, the profiling not start
	Memprofile string `protobuf:"bytes,3,opt,name=memprofile,proto3" json:"memprofile"`
}

func (m *PprofConfig) Reset()                    { *m = PprofConfig{} }
func (m *PprofConfig) String() string            { return proto.CompactTextString(m) }
func (*PprofConfig) ProtoMessage()               {}
func (*PprofConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{5} }

func (m *PprofConfig) GetHttpListen() string {
	if m != nil {
		return m.HttpListen
	}
	return ""
}

func (m *PprofConfig) GetCpuprofile() string {
	if m != nil {
		return m.Cpuprofile
	}
	return ""
}

func (m *PprofConfig) GetMemprofile() string {
	if m != nil {
		return m.Memprofile
	}
	return ""
}

type MiscConfig struct {
	// Default encryption ciper when create new keystore file.
	DefaultKeystoreFileCiper string `protobuf:"bytes,1,opt,name=default_keystore_file_ciper,json=defaultKeystoreFileCiper,proto3" json:"default_keystore_file_ciper"`
}

func (m *MiscConfig) Reset()                    { *m = MiscConfig{} }
func (m *MiscConfig) String() string            { return proto.CompactTextString(m) }
func (*MiscConfig) ProtoMessage()               {}
func (*MiscConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{6} }

func (m *MiscConfig) GetDefaultKeystoreFileCiper() string {
	if m != nil {
		return m.DefaultKeystoreFileCiper
	}
	return ""
}

type StatsConfig struct {
	// Enable metrics or not.
	EnableMetrics   bool                          `protobuf:"varint,1,opt,name=enable_metrics,json=enableMetrics,proto3" json:"enable_metrics"`
	ReportingModule []StatsConfig_ReportingModule `protobuf:"varint,2,rep,packed,name=reporting_module,json=reportingModule,enum=nebletpb.StatsConfig_ReportingModule" json:"reporting_module"`
	// Influxdb config.
	Influxdb    *InfluxdbConfig `protobuf:"bytes,11,opt,name=influxdb" json:"influxdb"`
	MetricsTags []string        `protobuf:"bytes,12,rep,name=metrics_tags,json=metricsTags" json:"metrics_tags"`
}

func (m *StatsConfig) Reset()                    { *m = StatsConfig{} }
func (m *StatsConfig) String() string            { return proto.CompactTextString(m) }
func (*StatsConfig) ProtoMessage()               {}
func (*StatsConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{7} }

func (m *StatsConfig) GetEnableMetrics() bool {
	if m != nil {
		return m.EnableMetrics
	}
	return false
}

func (m *StatsConfig) GetReportingModule() []StatsConfig_ReportingModule {
	if m != nil {
		return m.ReportingModule
	}
	return nil
}

func (m *StatsConfig) GetInfluxdb() *InfluxdbConfig {
	if m != nil {
		return m.Influxdb
	}
	return nil
}

func (m *StatsConfig) GetMetricsTags() []string {
	if m != nil {
		return m.MetricsTags
	}
	return nil
}

type InfluxdbConfig struct {
	// Host.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host"`
	// Port.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port"`
	// Database name.
	Db string `protobuf:"bytes,3,opt,name=db,proto3" json:"db"`
	// Auth user.
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user"`
	// Auth password.
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password"`
}

func (m *InfluxdbConfig) Reset()                    { *m = InfluxdbConfig{} }
func (m *InfluxdbConfig) String() string            { return proto.CompactTextString(m) }
func (*InfluxdbConfig) ProtoMessage()               {}
func (*InfluxdbConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{8} }

func (m *InfluxdbConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *InfluxdbConfig) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *InfluxdbConfig) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *InfluxdbConfig) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *InfluxdbConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "nebletpb.Config")
	proto.RegisterType((*NetworkConfig)(nil), "nebletpb.NetworkConfig")
	proto.RegisterType((*ChainConfig)(nil), "nebletpb.ChainConfig")
	proto.RegisterType((*RPCConfig)(nil), "nebletpb.RPCConfig")
	proto.RegisterType((*AppConfig)(nil), "nebletpb.AppConfig")
	proto.RegisterType((*PprofConfig)(nil), "nebletpb.PprofConfig")
	proto.RegisterType((*MiscConfig)(nil), "nebletpb.MiscConfig")
	proto.RegisterType((*StatsConfig)(nil), "nebletpb.StatsConfig")
	proto.RegisterType((*InfluxdbConfig)(nil), "nebletpb.InfluxdbConfig")
	proto.RegisterEnum("nebletpb.StatsConfig_ReportingModule", StatsConfig_ReportingModule_name, StatsConfig_ReportingModule_value)
}

func init() { proto.RegisterFile("config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 965 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x55, 0xdd, 0x6e, 0xdb, 0x46,
	0x13, 0xfd, 0x24, 0xff, 0x44, 0x1c, 0xc9, 0x8e, 0xb2, 0x71, 0xec, 0x75, 0xfc, 0x35, 0x71, 0x55,
	0x18, 0x10, 0x90, 0xc2, 0x40, 0xdd, 0xdc, 0xf4, 0xa2, 0x17, 0x81, 0x80, 0x02, 0x86, 0xed, 0xc2,
	0xa0, 0xdb, 0x6b, 0x82, 0x22, 0x47, 0xd4, 0xc2, 0x14, 0x77, 0xb1, 0xbb, 0x72, 0xe2, 0xbb, 0xbe,
	0x40, 0x1f, 0xa7, 0xaf, 0xd2, 0x3e, 0x4d, 0x81, 0x62, 0x86, 0x4b, 0x51, 0x12, 0x72, 0xc7, 0x39,
	0xe7, 0xec, 0xce, 0xee, 0xcc, 0xd9, 0x21, 0x0c, 0x32, 0x5d, 0xcd, 0x54, 0x71, 0x69, 0xac, 0xf6,
	0x5a, 0xf4, 0x2a, 0x9c, 0x96, 0xe8, 0xcd, 0x74, 0xf4, 0x67, 0x17, 0xf6, 0x27, 0x4c, 0x89, 0x1f,
	0xe0, 0x45, 0x85, 0xfe, 0xb3, 0xb6, 0x8f, 0xb2, 0x73, 0xde, 0x19, 0xf7, 0xaf, 0x4e, 0x2e, 0x1b,
	0xd9, 0xe5, 0xaf, 0x35, 0x51, 0x2b, 0xe3, 0x46, 0x27, 0x3e, 0xc0, 0x5e, 0x36, 0x4f, 0x55, 0x25,
	0xbb, 0xbc, 0xe0, 0x4d, 0xbb, 0x60, 0x42, 0x70, 0x90, 0xd7, 0x1a, 0x71, 0x01, 0x3b, 0xd6, 0x64,
	0x72, 0x87, 0xa5, 0xaf, 0x5b, 0x69, 0x7c, 0x3f, 0x09, 0x42, 0xe2, 0x69, 0x4f, 0xe7, 0x53, 0xef,
	0x64, 0xbe, 0xbd, 0xe7, 0x03, 0xc1, 0xcd, 0x9e, 0xac, 0x11, 0x63, 0xd8, 0x5d, 0x28, 0x97, 0x49,
	0x64, 0xed, 0x51, 0xab, 0xbd, 0x53, 0x2e, 0x0b, 0x52, 0x56, 0x50, 0xf6, 0xd4, 0x18, 0x39, 0xdb,
	0xce, 0xfe, 0xc9, 0x98, 0x26, 0x7b, 0x6a, 0xcc, 0xe8, 0xef, 0x0e, 0x1c, 0x6c, 0x5c, 0x56, 0x08,
	0xd8, 0x75, 0x88, 0xb9, 0xec, 0x9c, 0xef, 0x8c, 0xa3, 0x98, 0xbf, 0xc5, 0x31, 0xec, 0x97, 0xca,
	0x79, 0xa4, 0x8b, 0x13, 0x1a, 0x22, 0xf1, 0x1e, 0xfa, 0xc6, 0xaa, 0xa7, 0xd4, 0x63, 0xf2, 0x88,
	0xcf, 0x7c, 0xd5, 0x28, 0x86, 0x00, 0xdd, 0xe0, 0xb3, 0xf8, 0x06, 0x20, 0xd4, 0x2e, 0x51, 0xb9,
	0xdc, 0x3d, 0xef, 0x8c, 0x0f, 0xe2, 0x28, 0x20, 0xd7, 0xb9, 0xf8, 0x0e, 0x0e, 0x9c, 0xb7, 0x98,
	0x2e, 0x92, 0x52, 0x2d, 0x94, 0x77, 0x72, 0xef, 0xbc, 0x33, 0xde, 0x8b, 0x07, 0x35, 0x78, 0xcb,
	0x98, 0xf8, 0x08, 0xc7, 0x16, 0x1d, 0xda, 0x27, 0xcc, 0x93, 0x4d, 0xf5, 0x3e, 0xab, 0x8f, 0x1a,
	0xf6, 0x61, 0x6d, 0xd5, 0xe8, 0xaf, 0x1d, 0xe8, 0xaf, 0x35, 0x45, 0x9c, 0x42, 0x8f, 0xdb, 0x42,
	0xe7, 0xe8, 0xf0, 0x39, 0x5e, 0x70, 0x7c, 0x9d, 0x0b, 0x09, 0x2f, 0x0a, 0xac, 0xd0, 0x29, 0xc7,
	0x7d, 0x8d, 0xe2, 0x26, 0x24, 0x26, 0x4f, 0x7d, 0x9a, 0x2b, 0x2b, 0xfb, 0x35, 0x13, 0x42, 0xaa,
	0xc8, 0x23, 0x3e, 0x13, 0x31, 0x60, 0x22, 0x44, 0x74, 0x61, 0xe7, 0x53, 0xeb, 0x93, 0x85, 0xaa,
	0x50, 0x1e, 0x9d, 0x77, 0xc6, 0xbd, 0x38, 0x62, 0xe4, 0x4e, 0x55, 0x28, 0xde, 0x42, 0x2f, 0xd3,
	0xaa, 0x9a, 0xa6, 0x0e, 0xe5, 0x1b, 0x5e, 0xb8, 0x8a, 0xc5, 0x11, 0xec, 0xd1, 0x22, 0x2b, 0x8f,
	0x99, 0xa8, 0x03, 0xf1, 0x0e, 0xc0, 0xa4, 0xce, 0x99, 0xb9, 0xa5, 0x35, 0x27, 0xa1, 0xc2, 0x2b,
	0x44, 0xfc, 0x04, 0xa7, 0x58, 0xa5, 0xd3, 0x12, 0x13, 0x8b, 0x0b, 0xed, 0x31, 0x71, 0xaa, 0xa8,
	0x12, 0x2e, 0x88, 0x95, 0x92, 0xf3, 0x1f, 0xd7, 0x82, 0x98, 0xf9, 0x07, 0x55, 0x54, 0x0f, 0xcc,
	0x8a, 0xef, 0x41, 0x7c, 0x65, 0xcd, 0x29, 0xa7, 0x18, 0xda, 0x6d, 0xf5, 0x19, 0x44, 0x45, 0xea,
	0x12, 0x63, 0x55, 0x86, 0xf2, 0x6d, 0x7d, 0xf6, 0x22, 0x75, 0xf7, 0x14, 0x37, 0x24, 0xf7, 0x45,
	0x9e, 0xad, 0x48, 0xee, 0x85, 0xf8, 0x00, 0xaf, 0x28, 0x41, 0xea, 0x97, 0x16, 0x93, 0x4c, 0x99,
	0x39, 0x5a, 0x27, 0xff, 0xcf, 0x46, 0x1a, 0xae, 0x88, 0x49, 0x8d, 0x8f, 0xfe, 0xe9, 0x40, 0xb4,
	0x7a, 0x21, 0x54, 0x4e, 0x6b, 0xb2, 0x24, 0x98, 0xaf, 0xb6, 0x64, 0x64, 0x4d, 0x76, 0xbb, 0xf2,
	0xdf, 0xdc, 0x7b, 0x93, 0x6c, 0x98, 0x13, 0x08, 0xda, 0x12, 0x2c, 0x74, 0xbe, 0x2c, 0x51, 0xee,
	0xb4, 0x82, 0x3b, 0x46, 0xe8, 0x6c, 0x99, 0xae, 0x2a, 0xcc, 0xbc, 0xd2, 0x55, 0xe3, 0xab, 0x5d,
	0xf6, 0xd5, 0xb0, 0x25, 0x82, 0x13, 0xdb, 0x74, 0x6b, 0x66, 0x0d, 0xe9, 0x58, 0x70, 0x06, 0x11,
	0x0b, 0x32, 0x6d, 0xc9, 0x9d, 0x94, 0xac, 0x47, 0xc0, 0x44, 0x5b, 0x37, 0xfa, 0xb7, 0x03, 0xd1,
	0xea, 0xf5, 0x91, 0xb4, 0xd4, 0x45, 0x52, 0xe2, 0x13, 0x96, 0x6c, 0xc8, 0x28, 0xee, 0x95, 0xba,
	0xb8, 0xa5, 0x98, 0xcc, 0x4a, 0xe4, 0x4c, 0x95, 0xd8, 0x58, 0xb2, 0xd4, 0xc5, 0x2f, 0xaa, 0x44,
	0x71, 0x02, 0xf4, 0x99, 0xa4, 0x05, 0xf2, 0x73, 0x3b, 0x88, 0xf7, 0x4b, 0x5d, 0x7c, 0x2a, 0x50,
	0x5c, 0xc2, 0xeb, 0x60, 0x84, 0xcc, 0xa6, 0x6e, 0x9e, 0x58, 0x34, 0xda, 0x7a, 0xbe, 0x4b, 0x2f,
	0x7e, 0x55, 0x53, 0x13, 0x62, 0x62, 0x26, 0xc4, 0x18, 0x86, 0xeb, 0xc2, 0x64, 0x69, 0x4b, 0xbe,
	0x51, 0x14, 0x1f, 0x66, 0xad, 0xec, 0x77, 0x5b, 0xd2, 0x84, 0x32, 0xc6, 0xea, 0x19, 0xbf, 0xb7,
	0x8d, 0x09, 0x75, 0x4f, 0x70, 0x33, 0xa1, 0x58, 0x43, 0x4f, 0xe6, 0x09, 0xad, 0x53, 0xba, 0xe2,
	0x81, 0x16, 0xc5, 0x4d, 0x38, 0xaa, 0xa0, 0xbf, 0xa6, 0xdf, 0xee, 0x5d, 0x5d, 0x82, 0xf5, 0xde,
	0xbd, 0x03, 0xc8, 0xcc, 0x92, 0x56, 0xb4, 0x65, 0x58, 0x43, 0x88, 0x5f, 0xe0, 0xa2, 0xe1, 0xc3,
	0xec, 0x69, 0x91, 0xd1, 0x0d, 0x40, 0x3b, 0x15, 0xc5, 0xcf, 0x70, 0x96, 0xe3, 0x2c, 0x5d, 0x96,
	0x9e, 0x46, 0x95, 0xf3, 0xda, 0x22, 0xd7, 0x97, 0x0c, 0x89, 0x36, 0xa4, 0x97, 0x41, 0x72, 0x13,
	0x14, 0x54, 0xf1, 0x09, 0xf1, 0xa3, 0x3f, 0xba, 0xd0, 0x5f, 0x9b, 0xc7, 0xe2, 0x02, 0x0e, 0x43,
	0xb5, 0x17, 0xe8, 0xad, 0xca, 0x1c, 0xef, 0xd0, 0x8b, 0x0f, 0x6a, 0xf4, 0xae, 0x06, 0xc5, 0x3d,
	0x0c, 0xeb, 0xf2, 0xaa, 0xaa, 0x68, 0x4c, 0x48, 0x2e, 0x3d, 0xbc, 0xba, 0xf8, 0xea, 0x9c, 0xbf,
	0x8c, 0x1b, 0x75, 0xed, 0xcf, 0xf8, 0xa5, 0xdd, 0x04, 0xc4, 0x47, 0xe8, 0xa9, 0x6a, 0x56, 0x2e,
	0xbf, 0xe4, 0x53, 0x9e, 0x49, 0xfd, 0x2b, 0xd9, 0xee, 0x74, 0x1d, 0x98, 0xd0, 0x92, 0x95, 0x52,
	0x7c, 0x0b, 0x83, 0x70, 0xce, 0xc4, 0xa7, 0x85, 0x93, 0x03, 0xf6, 0x66, 0x3f, 0x60, 0xbf, 0xa5,
	0x85, 0x1b, 0xbd, 0x87, 0x97, 0x5b, 0xc9, 0xc5, 0x00, 0x7a, 0xcd, 0x8e, 0xc3, 0xff, 0x8d, 0xbe,
	0xc0, 0xe1, 0xe6, 0xfe, 0xf4, 0xab, 0x98, 0x6b, 0xe7, 0x43, 0xf1, 0xf8, 0x9b, 0x30, 0xf6, 0x5d,
	0x97, 0xcd, 0xc9, 0xdf, 0xe2, 0x10, 0xba, 0xf9, 0x34, 0x74, 0xa8, 0x9b, 0x4f, 0x49, 0xb3, 0x74,
	0x68, 0xd9, 0x9b, 0x51, 0xcc, 0xdf, 0x34, 0x19, 0x69, 0xaa, 0x7d, 0xd6, 0x36, 0x0f, 0x36, 0x5c,
	0xc5, 0xd3, 0x7d, 0xfe, 0x8b, 0xff, 0xf8, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x97, 0x55,
	0x46, 0xd5, 0x07, 0x00, 0x00,
}
