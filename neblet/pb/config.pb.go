// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config.proto

/*
Package nebletpb is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	Config
	P2PConfig
	RPCConfig
	PowConfig
	StorageConfig
	AccountConfig
	Influxdb
*/
package nebletpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Neblet global configurations.
type Config struct {
	// P2P network config.
	P2P *P2PConfig `protobuf:"bytes,1,opt,name=p2p" json:"p2p,omitempty"`
	// RPC server config.
	Rpc *RPCConfig `protobuf:"bytes,2,opt,name=rpc" json:"rpc,omitempty"`
	// Pow config
	Pow *PowConfig `protobuf:"bytes,3,opt,name=pow" json:"pow,omitempty"`
	// Storage config
	Storage *StorageConfig `protobuf:"bytes,4,opt,name=storage" json:"storage,omitempty"`
	// Account manager config
	Account *AccountConfig `protobuf:"bytes,5,opt,name=account" json:"account,omitempty"`
	// Influxdb config
	Influxdb *Influxdb `protobuf:"bytes,6,opt,name=influxdb" json:"influxdb,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

func (m *Config) GetP2P() *P2PConfig {
	if m != nil {
		return m.P2P
	}
	return nil
}

func (m *Config) GetRpc() *RPCConfig {
	if m != nil {
		return m.Rpc
	}
	return nil
}

func (m *Config) GetPow() *PowConfig {
	if m != nil {
		return m.Pow
	}
	return nil
}

func (m *Config) GetStorage() *StorageConfig {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *Config) GetAccount() *AccountConfig {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *Config) GetInfluxdb() *Influxdb {
	if m != nil {
		return m.Influxdb
	}
	return nil
}

type P2PConfig struct {
	// P2P seed node addresses.
	Seed string `protobuf:"bytes,1,opt,name=seed,proto3" json:"seed,omitempty"`
	// P2P node port number.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// P2P node chainID.
	ChainId uint32 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// P2P node version.
	Version uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *P2PConfig) Reset()                    { *m = P2PConfig{} }
func (m *P2PConfig) String() string            { return proto.CompactTextString(m) }
func (*P2PConfig) ProtoMessage()               {}
func (*P2PConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{1} }

func (m *P2PConfig) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

func (m *P2PConfig) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *P2PConfig) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *P2PConfig) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type RPCConfig struct {
	// API RPC server listening port number.
	ApiPort uint32 `protobuf:"varint,1,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty"`
	// Management RPC server listening port number.
	ManagementPort uint32 `protobuf:"varint,2,opt,name=management_port,json=managementPort,proto3" json:"management_port,omitempty"`
	// Json RPC Gateway server listening port number.
	GatewayPort uint32 `protobuf:"varint,3,opt,name=gateway_port,json=gatewayPort,proto3" json:"gateway_port,omitempty"`
}

func (m *RPCConfig) Reset()                    { *m = RPCConfig{} }
func (m *RPCConfig) String() string            { return proto.CompactTextString(m) }
func (*RPCConfig) ProtoMessage()               {}
func (*RPCConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{2} }

func (m *RPCConfig) GetApiPort() uint32 {
	if m != nil {
		return m.ApiPort
	}
	return 0
}

func (m *RPCConfig) GetManagementPort() uint32 {
	if m != nil {
		return m.ManagementPort
	}
	return 0
}

func (m *RPCConfig) GetGatewayPort() uint32 {
	if m != nil {
		return m.GatewayPort
	}
	return 0
}

type PowConfig struct {
	// pow miner's coinbase
	Coinbase string `protobuf:"bytes,1,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
}

func (m *PowConfig) Reset()                    { *m = PowConfig{} }
func (m *PowConfig) String() string            { return proto.CompactTextString(m) }
func (*PowConfig) ProtoMessage()               {}
func (*PowConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{3} }

func (m *PowConfig) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

type StorageConfig struct {
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *StorageConfig) Reset()                    { *m = StorageConfig{} }
func (m *StorageConfig) String() string            { return proto.CompactTextString(m) }
func (*StorageConfig) ProtoMessage()               {}
func (*StorageConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{4} }

func (m *StorageConfig) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type AccountConfig struct {
	// Account transaction sign algorithm type
	Signature uint32 `protobuf:"varint,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// Account addr encrypt algorithm type
	Encrypt uint32 `protobuf:"varint,2,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	// Account key file directory
	KeyDir string `protobuf:"bytes,3,opt,name=key_dir,json=keyDir,proto3" json:"key_dir,omitempty"`
	// Account test keyfile's passphrase
	TestPassphrase string `protobuf:"bytes,4,opt,name=test_passphrase,json=testPassphrase,proto3" json:"test_passphrase,omitempty"`
}

func (m *AccountConfig) Reset()                    { *m = AccountConfig{} }
func (m *AccountConfig) String() string            { return proto.CompactTextString(m) }
func (*AccountConfig) ProtoMessage()               {}
func (*AccountConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{5} }

func (m *AccountConfig) GetSignature() uint32 {
	if m != nil {
		return m.Signature
	}
	return 0
}

func (m *AccountConfig) GetEncrypt() uint32 {
	if m != nil {
		return m.Encrypt
	}
	return 0
}

func (m *AccountConfig) GetKeyDir() string {
	if m != nil {
		return m.KeyDir
	}
	return ""
}

func (m *AccountConfig) GetTestPassphrase() string {
	if m != nil {
		return m.TestPassphrase
	}
	return ""
}

type Influxdb struct {
	// Influxdb host
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Influxdb db name
	Db string `protobuf:"bytes,2,opt,name=db,proto3" json:"db,omitempty"`
	// Influxdb username
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Influxdb password
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *Influxdb) Reset()                    { *m = Influxdb{} }
func (m *Influxdb) String() string            { return proto.CompactTextString(m) }
func (*Influxdb) ProtoMessage()               {}
func (*Influxdb) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{6} }

func (m *Influxdb) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Influxdb) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *Influxdb) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Influxdb) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "nebletpb.Config")
	proto.RegisterType((*P2PConfig)(nil), "nebletpb.P2PConfig")
	proto.RegisterType((*RPCConfig)(nil), "nebletpb.RPCConfig")
	proto.RegisterType((*PowConfig)(nil), "nebletpb.PowConfig")
	proto.RegisterType((*StorageConfig)(nil), "nebletpb.StorageConfig")
	proto.RegisterType((*AccountConfig)(nil), "nebletpb.AccountConfig")
	proto.RegisterType((*Influxdb)(nil), "nebletpb.Influxdb")
}

func init() { proto.RegisterFile("config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0xd5, 0x6e, 0x69, 0x93, 0xd9, 0x4d, 0x91, 0xcc, 0x61, 0x03, 0xe2, 0x00, 0x91, 0xd0,
	0x22, 0x21, 0x55, 0xa2, 0x3c, 0x01, 0x5a, 0x2e, 0x7b, 0x8b, 0xc2, 0x03, 0x44, 0x8e, 0xe3, 0xa6,
	0xd6, 0xb6, 0xb6, 0x65, 0xbb, 0x84, 0x3e, 0x02, 0x67, 0x5e, 0x18, 0x8d, 0x63, 0xbb, 0xec, 0xee,
	0x2d, 0xff, 0xcc, 0x37, 0x33, 0xfe, 0x67, 0x14, 0xb8, 0x61, 0x4a, 0xee, 0xc4, 0xb0, 0xd1, 0x46,
	0x39, 0x45, 0x32, 0xc9, 0xbb, 0x03, 0x77, 0xba, 0xab, 0xfe, 0xce, 0x61, 0x79, 0xef, 0x53, 0xe4,
	0x13, 0x5c, 0xe9, 0xad, 0x2e, 0x67, 0x1f, 0x66, 0x9f, 0xaf, 0xb7, 0x6f, 0x36, 0x11, 0xd9, 0xd4,
	0xdb, 0x7a, 0x22, 0x1a, 0xcc, 0x23, 0x66, 0x34, 0x2b, 0xe7, 0xcf, 0xb1, 0xa6, 0xbe, 0x8f, 0x98,
	0xd1, 0xcc, 0x77, 0x53, 0x63, 0x79, 0xf5, 0xa2, 0x9b, 0x1a, 0x53, 0x37, 0x35, 0x92, 0xaf, 0xb0,
	0xb2, 0x4e, 0x19, 0x3a, 0xf0, 0x72, 0xe1, 0xd1, 0xdb, 0x0b, 0xfa, 0x73, 0x4a, 0x04, 0x3c, 0x72,
	0x58, 0x42, 0x19, 0x53, 0x27, 0xe9, 0xca, 0x57, 0xcf, 0x4b, 0xbe, 0x4f, 0x89, 0x58, 0x12, 0x38,
	0xb2, 0x81, 0x4c, 0xc8, 0xdd, 0xe1, 0xf4, 0xbb, 0xef, 0xca, 0xa5, 0xaf, 0x21, 0x97, 0x9a, 0x87,
	0x90, 0x69, 0x12, 0x53, 0xed, 0x21, 0x4f, 0xae, 0x09, 0x81, 0x85, 0xe5, 0xbc, 0xf7, 0x8b, 0xc9,
	0x1b, 0xff, 0x8d, 0x31, 0xad, 0x8c, 0xf3, 0x5b, 0x28, 0x1a, 0xff, 0x4d, 0xde, 0x42, 0xc6, 0xf6,
	0x54, 0xc8, 0x56, 0xf4, 0xde, 0x76, 0xd1, 0xac, 0xbc, 0x7e, 0xe8, 0x49, 0x09, 0xab, 0x5f, 0xdc,
	0x58, 0xa1, 0xa4, 0x77, 0x59, 0x34, 0x51, 0x56, 0x06, 0xf2, 0xb4, 0x38, 0xec, 0x40, 0xb5, 0x68,
	0x7d, 0xe7, 0xd9, 0xc4, 0x51, 0x2d, 0x6a, 0x6c, 0x7e, 0x07, 0xaf, 0x8f, 0x54, 0xd2, 0x81, 0x1f,
	0xb9, 0x74, 0xed, 0x7f, 0xb3, 0xd7, 0x97, 0xb0, 0x07, 0x3f, 0xc2, 0xcd, 0x40, 0x1d, 0x1f, 0xe9,
	0x79, 0xa2, 0xa6, 0x97, 0x5c, 0x87, 0x18, 0x22, 0xd5, 0x1d, 0xe4, 0xe9, 0x0a, 0xe4, 0x1d, 0x64,
	0x4c, 0x09, 0xd9, 0x51, 0xcb, 0x83, 0xc3, 0xa4, 0xab, 0x2f, 0x50, 0x3c, 0xb9, 0x01, 0xc2, 0x07,
	0xc5, 0xa8, 0x43, 0x23, 0x01, 0x8e, 0xba, 0xfa, 0x33, 0x83, 0xe2, 0xc9, 0xfa, 0xc9, 0x7b, 0xc8,
	0xad, 0x18, 0x24, 0x75, 0x27, 0xc3, 0x83, 0x9f, 0x4b, 0x00, 0x77, 0xc2, 0x25, 0x33, 0x67, 0x1d,
	0x9d, 0x44, 0x49, 0x6e, 0x61, 0xf5, 0xc8, 0xcf, 0x6d, 0x2f, 0x8c, 0x7f, 0x7d, 0xde, 0x2c, 0x1f,
	0xf9, 0xf9, 0x87, 0x30, 0xb8, 0x04, 0xc7, 0xad, 0x6b, 0x35, 0xb5, 0x56, 0xef, 0x0d, 0x3e, 0x79,
	0xe1, 0x81, 0x35, 0x86, 0xeb, 0x14, 0xad, 0x76, 0x90, 0xc5, 0xab, 0xe2, 0xa9, 0xf6, 0xca, 0xba,
	0x78, 0x3e, 0xfc, 0x26, 0x6b, 0x98, 0xf7, 0x9d, 0x1f, 0x9b, 0x37, 0xf3, 0xbe, 0x43, 0x5f, 0x27,
	0xcb, 0x8d, 0xa4, 0x47, 0x1e, 0x46, 0x26, 0x8d, 0x39, 0x9c, 0x37, 0x2a, 0xd3, 0x87, 0x69, 0x49,
	0x77, 0x4b, 0xff, 0x3b, 0x7d, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0x6b, 0xeb, 0xdc, 0x7e, 0x5e,
	0x03, 0x00, 0x00,
}
