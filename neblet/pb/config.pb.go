// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config.proto

/*
Package nebletpb is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	Config
	NetworkConfig
	ChainConfig
	RPCConfig
	AppConfig
	MiscConfig
	StatsConfig
	InfluxdbConfig
*/
package nebletpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reporting modules.
type StatsConfig_ReportingModule int32

const (
	StatsConfig_Influxdb StatsConfig_ReportingModule = 0
)

var StatsConfig_ReportingModule_name = map[int32]string{
	0: "Influxdb",
}
var StatsConfig_ReportingModule_value = map[string]int32{
	"Influxdb": 0,
}

func (x StatsConfig_ReportingModule) String() string {
	return proto.EnumName(StatsConfig_ReportingModule_name, int32(x))
}
func (StatsConfig_ReportingModule) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorConfig, []int{6, 0}
}

// Neblet global configurations.
type Config struct {
	// Network config.
	Network *NetworkConfig `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	// Chain config.
	Chain *ChainConfig `protobuf:"bytes,2,opt,name=chain" json:"chain,omitempty"`
	// RPC config.
	Rpc *RPCConfig `protobuf:"bytes,3,opt,name=rpc" json:"rpc,omitempty"`
	// Stats config.
	Stats *StatsConfig `protobuf:"bytes,100,opt,name=stats" json:"stats,omitempty"`
	// Misc config.
	Misc *MiscConfig `protobuf:"bytes,101,opt,name=misc" json:"misc,omitempty"`
	// App Config.
	App *AppConfig `protobuf:"bytes,102,opt,name=app" json:"app,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

func (m *Config) GetNetwork() *NetworkConfig {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *Config) GetChain() *ChainConfig {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (m *Config) GetRpc() *RPCConfig {
	if m != nil {
		return m.Rpc
	}
	return nil
}

func (m *Config) GetStats() *StatsConfig {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Config) GetMisc() *MiscConfig {
	if m != nil {
		return m.Misc
	}
	return nil
}

func (m *Config) GetApp() *AppConfig {
	if m != nil {
		return m.App
	}
	return nil
}

type NetworkConfig struct {
	// Neb seed node address.
	Seed []string `protobuf:"bytes,1,rep,name=seed" json:"seed,omitempty"`
	// Listen addresses.
	Listen []string `protobuf:"bytes,2,rep,name=listen" json:"listen,omitempty"`
	// Network node privateKey address. If nil, generate a new node.
	PrivateKey string `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (m *NetworkConfig) Reset()                    { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()               {}
func (*NetworkConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{1} }

func (m *NetworkConfig) GetSeed() []string {
	if m != nil {
		return m.Seed
	}
	return nil
}

func (m *NetworkConfig) GetListen() []string {
	if m != nil {
		return m.Listen
	}
	return nil
}

func (m *NetworkConfig) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

type ChainConfig struct {
	// ChainID.
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Data dir.
	Datadir string `protobuf:"bytes,11,opt,name=datadir,proto3" json:"datadir,omitempty"`
	// Key dir.
	Keydir string `protobuf:"bytes,12,opt,name=keydir,proto3" json:"keydir,omitempty"`
	// Coinbase.
	Coinbase string `protobuf:"bytes,21,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Lowest GasPrice.
	GasPrice string `protobuf:"bytes,22,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Max GasLimit.
	GasLimit string `protobuf:"bytes,23,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// Supported signature cipher list. ["ECC_SECP256K1"]
	SignatureCiphers []string `protobuf:"bytes,24,rep,name=signature_ciphers,json=signatureCiphers" json:"signature_ciphers,omitempty"`
}

func (m *ChainConfig) Reset()                    { *m = ChainConfig{} }
func (m *ChainConfig) String() string            { return proto.CompactTextString(m) }
func (*ChainConfig) ProtoMessage()               {}
func (*ChainConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{2} }

func (m *ChainConfig) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ChainConfig) GetDatadir() string {
	if m != nil {
		return m.Datadir
	}
	return ""
}

func (m *ChainConfig) GetKeydir() string {
	if m != nil {
		return m.Keydir
	}
	return ""
}

func (m *ChainConfig) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *ChainConfig) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func (m *ChainConfig) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

func (m *ChainConfig) GetSignatureCiphers() []string {
	if m != nil {
		return m.SignatureCiphers
	}
	return nil
}

type RPCConfig struct {
	// RPC listen addresses.
	RpcListen []string `protobuf:"bytes,1,rep,name=rpc_listen,json=rpcListen" json:"rpc_listen,omitempty"`
	// HTTP listen addresses.
	HttpListen []string `protobuf:"bytes,2,rep,name=http_listen,json=httpListen" json:"http_listen,omitempty"`
	// Enabled HTTP modules.["api", "admin"]
	HttpModule []string `protobuf:"bytes,3,rep,name=http_module,json=httpModule" json:"http_module,omitempty"`
}

func (m *RPCConfig) Reset()                    { *m = RPCConfig{} }
func (m *RPCConfig) String() string            { return proto.CompactTextString(m) }
func (*RPCConfig) ProtoMessage()               {}
func (*RPCConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{3} }

func (m *RPCConfig) GetRpcListen() []string {
	if m != nil {
		return m.RpcListen
	}
	return nil
}

func (m *RPCConfig) GetHttpListen() []string {
	if m != nil {
		return m.HttpListen
	}
	return nil
}

func (m *RPCConfig) GetHttpModule() []string {
	if m != nil {
		return m.HttpModule
	}
	return nil
}

type AppConfig struct {
	LogLevel      string `protobuf:"bytes,1,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	LogFileEnable bool   `protobuf:"varint,2,opt,name=log_file_enable,json=logFileEnable,proto3" json:"log_file_enable,omitempty"`
	// Log dir.
	LogFileDir string `protobuf:"bytes,3,opt,name=log_file_dir,json=logFileDir,proto3" json:"log_file_dir,omitempty"`
}

func (m *AppConfig) Reset()                    { *m = AppConfig{} }
func (m *AppConfig) String() string            { return proto.CompactTextString(m) }
func (*AppConfig) ProtoMessage()               {}
func (*AppConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{4} }

func (m *AppConfig) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

func (m *AppConfig) GetLogFileEnable() bool {
	if m != nil {
		return m.LogFileEnable
	}
	return false
}

func (m *AppConfig) GetLogFileDir() string {
	if m != nil {
		return m.LogFileDir
	}
	return ""
}

type MiscConfig struct {
	// Default encryption ciper when create new keystore file.
	DefaultKeystoreFileCiper string `protobuf:"bytes,1,opt,name=default_keystore_file_ciper,json=defaultKeystoreFileCiper,proto3" json:"default_keystore_file_ciper,omitempty"`
}

func (m *MiscConfig) Reset()                    { *m = MiscConfig{} }
func (m *MiscConfig) String() string            { return proto.CompactTextString(m) }
func (*MiscConfig) ProtoMessage()               {}
func (*MiscConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{5} }

func (m *MiscConfig) GetDefaultKeystoreFileCiper() string {
	if m != nil {
		return m.DefaultKeystoreFileCiper
	}
	return ""
}

type StatsConfig struct {
	// Enable metrics or not.
	EnableMetrics   bool                          `protobuf:"varint,1,opt,name=enable_metrics,json=enableMetrics,proto3" json:"enable_metrics,omitempty"`
	ReportingModule []StatsConfig_ReportingModule `protobuf:"varint,2,rep,packed,name=reporting_module,json=reportingModule,enum=nebletpb.StatsConfig_ReportingModule" json:"reporting_module,omitempty"`
	// Influxdb config.`
	Influxdb *InfluxdbConfig `protobuf:"bytes,11,opt,name=influxdb" json:"influxdb,omitempty"`
}

func (m *StatsConfig) Reset()                    { *m = StatsConfig{} }
func (m *StatsConfig) String() string            { return proto.CompactTextString(m) }
func (*StatsConfig) ProtoMessage()               {}
func (*StatsConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{6} }

func (m *StatsConfig) GetEnableMetrics() bool {
	if m != nil {
		return m.EnableMetrics
	}
	return false
}

func (m *StatsConfig) GetReportingModule() []StatsConfig_ReportingModule {
	if m != nil {
		return m.ReportingModule
	}
	return nil
}

func (m *StatsConfig) GetInfluxdb() *InfluxdbConfig {
	if m != nil {
		return m.Influxdb
	}
	return nil
}

type InfluxdbConfig struct {
	// Host.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Database name.
	Db string `protobuf:"bytes,3,opt,name=db,proto3" json:"db,omitempty"`
	// Auth user.
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Auth password.
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *InfluxdbConfig) Reset()                    { *m = InfluxdbConfig{} }
func (m *InfluxdbConfig) String() string            { return proto.CompactTextString(m) }
func (*InfluxdbConfig) ProtoMessage()               {}
func (*InfluxdbConfig) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{7} }

func (m *InfluxdbConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *InfluxdbConfig) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *InfluxdbConfig) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *InfluxdbConfig) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *InfluxdbConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "nebletpb.Config")
	proto.RegisterType((*NetworkConfig)(nil), "nebletpb.NetworkConfig")
	proto.RegisterType((*ChainConfig)(nil), "nebletpb.ChainConfig")
	proto.RegisterType((*RPCConfig)(nil), "nebletpb.RPCConfig")
	proto.RegisterType((*AppConfig)(nil), "nebletpb.AppConfig")
	proto.RegisterType((*MiscConfig)(nil), "nebletpb.MiscConfig")
	proto.RegisterType((*StatsConfig)(nil), "nebletpb.StatsConfig")
	proto.RegisterType((*InfluxdbConfig)(nil), "nebletpb.InfluxdbConfig")
	proto.RegisterEnum("nebletpb.StatsConfig_ReportingModule", StatsConfig_ReportingModule_name, StatsConfig_ReportingModule_value)
}

func init() { proto.RegisterFile("config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 646 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x5d, 0x6b, 0xdb, 0x3e,
	0x14, 0xc6, 0xff, 0x49, 0xfa, 0xe2, 0x9c, 0xbc, 0xb4, 0x7f, 0x6d, 0x6d, 0xb5, 0x95, 0xd1, 0x62,
	0xe8, 0x28, 0x14, 0x02, 0xeb, 0x76, 0xbb, 0x8b, 0x91, 0x6d, 0x50, 0xda, 0x8e, 0xe2, 0xdd, 0x0e,
	0x8c, 0x6c, 0x9f, 0x38, 0xa2, 0x8a, 0x2d, 0x24, 0xa5, 0x2f, 0x1f, 0x62, 0x1f, 0x71, 0xdf, 0x65,
	0xe8, 0xc5, 0x4e, 0x13, 0x76, 0xa7, 0xf3, 0x3c, 0x3f, 0x1d, 0x45, 0x8f, 0x8e, 0x03, 0xc3, 0xbc,
	0xae, 0x66, 0xbc, 0x9c, 0x48, 0x55, 0x9b, 0x9a, 0x44, 0x15, 0x66, 0x02, 0x8d, 0xcc, 0xe2, 0xdf,
	0x5d, 0xd8, 0x99, 0x3a, 0x8b, 0x7c, 0x80, 0xdd, 0x0a, 0xcd, 0x63, 0xad, 0xee, 0x69, 0xe7, 0xb4,
	0x73, 0x3e, 0xb8, 0x3c, 0x9a, 0x34, 0xd8, 0xe4, 0x87, 0x37, 0x3c, 0x99, 0x34, 0x1c, 0xb9, 0x80,
	0xed, 0x7c, 0xce, 0x78, 0x45, 0xbb, 0x6e, 0xc3, 0xc1, 0x6a, 0xc3, 0xd4, 0xca, 0x01, 0xf7, 0x0c,
	0x39, 0x83, 0x9e, 0x92, 0x39, 0xed, 0x39, 0xf4, 0xd5, 0x0a, 0x4d, 0xee, 0xa6, 0x01, 0xb4, 0xbe,
	0xed, 0xa9, 0x0d, 0x33, 0x9a, 0x16, 0x9b, 0x3d, 0x7f, 0x5a, 0xb9, 0xe9, 0xe9, 0x18, 0x72, 0x0e,
	0x5b, 0x0b, 0xae, 0x73, 0x8a, 0x8e, 0x7d, 0xbd, 0x62, 0x6f, 0xb9, 0xce, 0x03, 0xea, 0x08, 0x7b,
	0x3a, 0x93, 0x92, 0xce, 0x36, 0x4f, 0xff, 0x22, 0x65, 0x73, 0x3a, 0x93, 0x32, 0xfe, 0x05, 0xa3,
	0xb5, 0xbb, 0x12, 0x02, 0x5b, 0x1a, 0xb1, 0xa0, 0x9d, 0xd3, 0xde, 0x79, 0x3f, 0x71, 0x6b, 0x72,
	0x08, 0x3b, 0x82, 0x6b, 0x83, 0xf6, 0xde, 0x56, 0x0d, 0x15, 0x39, 0x81, 0x81, 0x54, 0xfc, 0x81,
	0x19, 0x4c, 0xef, 0xf1, 0xd9, 0xdd, 0xb4, 0x9f, 0x40, 0x90, 0xae, 0xf1, 0x39, 0xfe, 0xd3, 0x81,
	0xc1, 0x8b, 0x64, 0xc8, 0x1b, 0x88, 0x5c, 0x36, 0x29, 0x2f, 0x5c, 0xe6, 0xa3, 0x64, 0xd7, 0xd5,
	0x57, 0x05, 0xa1, 0xb0, 0x5b, 0x30, 0xc3, 0x0a, 0xae, 0xe8, 0xc0, 0xf5, 0x69, 0x4a, 0x7b, 0xfa,
	0x3d, 0x3e, 0x5b, 0x63, 0xe8, 0x8c, 0x50, 0x91, 0xb7, 0x10, 0xe5, 0x35, 0xaf, 0x32, 0xa6, 0x91,
	0x1e, 0x38, 0xa7, 0xad, 0xc9, 0x31, 0xf4, 0x4b, 0xa6, 0x53, 0xa9, 0x78, 0x8e, 0xf4, 0xd0, 0x9b,
	0x25, 0xd3, 0x77, 0xb6, 0x6e, 0x4c, 0xc1, 0x17, 0xdc, 0xd0, 0xa3, 0xd6, 0xbc, 0xb1, 0x35, 0xb9,
	0x80, 0xff, 0x35, 0x2f, 0x2b, 0x66, 0x96, 0x0a, 0xd3, 0x9c, 0xcb, 0x39, 0x2a, 0x4d, 0xa9, 0xbb,
	0xf6, 0x7e, 0x6b, 0x4c, 0xbd, 0x1e, 0x0b, 0xe8, 0xb7, 0xaf, 0x49, 0xde, 0x01, 0x28, 0x99, 0xa7,
	0x21, 0x29, 0x9f, 0x5f, 0x5f, 0xc9, 0xfc, 0xa6, 0x0d, 0x6b, 0x6e, 0x8c, 0x4c, 0xd7, 0x92, 0x04,
	0x2b, 0x6d, 0x00, 0x8b, 0xba, 0x58, 0x0a, 0xa4, 0xbd, 0x15, 0x70, 0xeb, 0x94, 0x58, 0x41, 0xbf,
	0x7d, 0x3d, 0x7b, 0x09, 0x51, 0x97, 0xa9, 0xc0, 0x07, 0x14, 0x2e, 0xcb, 0x7e, 0x12, 0x89, 0xba,
	0xbc, 0xb1, 0x35, 0x79, 0x0f, 0x7b, 0xd6, 0x9c, 0x71, 0x81, 0x29, 0x56, 0x2c, 0x13, 0xe8, 0x26,
	0x36, 0x4a, 0x46, 0xa2, 0x2e, 0xbf, 0x73, 0x81, 0xdf, 0x9c, 0x48, 0x4e, 0x61, 0xd8, 0x72, 0x36,
	0xe0, 0xf0, 0x82, 0x01, 0xfa, 0xca, 0x55, 0x7c, 0x0d, 0xb0, 0x1a, 0x2d, 0xf2, 0x19, 0x8e, 0x0b,
	0x9c, 0xb1, 0xa5, 0x30, 0xf6, 0xc1, 0xb5, 0xa9, 0x15, 0xfa, 0xcd, 0x39, 0x97, 0xa8, 0xc2, 0xcf,
	0xa0, 0x01, 0xb9, 0x0e, 0x84, 0x6d, 0x35, 0xb5, 0xbe, 0x1b, 0x87, 0x17, 0x43, 0x4d, 0xce, 0x60,
	0xec, 0x7f, 0x5d, 0xba, 0x40, 0xa3, 0x78, 0xae, 0x5d, 0x87, 0x28, 0x19, 0x79, 0xf5, 0xd6, 0x8b,
	0xe4, 0x0e, 0xf6, 0x15, 0xca, 0x5a, 0x19, 0x5e, 0x95, 0x4d, 0x3a, 0x36, 0xbe, 0xf1, 0xe5, 0xd9,
	0x3f, 0x3f, 0x96, 0x49, 0xd2, 0xd0, 0x3e, 0xb8, 0x64, 0x4f, 0xad, 0x0b, 0xe4, 0x13, 0x44, 0xbc,
	0x9a, 0x89, 0xe5, 0x53, 0x91, 0xb9, 0x69, 0x1b, 0x5c, 0xd2, 0x55, 0xa7, 0xab, 0xe0, 0x84, 0xcf,
	0xa4, 0x25, 0xe3, 0x13, 0xd8, 0xdb, 0xe8, 0x4c, 0x86, 0x10, 0x35, 0xf8, 0xfe, 0x7f, 0xf1, 0x13,
	0x8c, 0xd7, 0x37, 0xdb, 0xaf, 0x69, 0x5e, 0x6b, 0x13, 0x92, 0x71, 0x6b, 0xab, 0xd9, 0x26, 0xee,
	0x45, 0x46, 0x89, 0x5b, 0x93, 0x31, 0x74, 0x8b, 0x2c, 0xc4, 0xdf, 0x2d, 0x32, 0xcb, 0x2c, 0x35,
	0x2a, 0xba, 0xe5, 0xf7, 0xd9, 0xb5, 0x9d, 0x77, 0xc9, 0xb4, 0x7e, 0xac, 0x55, 0x41, 0xb7, 0xfd,
	0x83, 0x37, 0x75, 0xb6, 0xe3, 0xfe, 0xe7, 0x3e, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x79, 0x1d,
	0xc9, 0xa0, 0xf7, 0x04, 0x00, 0x00,
}
